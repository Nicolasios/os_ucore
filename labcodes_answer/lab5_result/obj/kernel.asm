
bin/kernel：     文件格式 elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:

.text
.globl kern_entry
kern_entry:
    # load pa of boot pgdir
    movl $REALLOC(__boot_pgdir), %eax
c0100000:	b8 00 30 1b 00       	mov    $0x1b3000,%eax
    movl %eax, %cr3
c0100005:	0f 22 d8             	mov    %eax,%cr3

    # enable paging
    movl %cr0, %eax
c0100008:	0f 20 c0             	mov    %cr0,%eax
    orl $(CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP), %eax
c010000b:	0d 2f 00 05 80       	or     $0x8005002f,%eax
    andl $~(CR0_TS | CR0_EM), %eax
c0100010:	83 e0 f3             	and    $0xfffffff3,%eax
    movl %eax, %cr0
c0100013:	0f 22 c0             	mov    %eax,%cr0

    # update eip
    # now, eip = 0x1.....
    leal next, %eax
c0100016:	8d 05 1e 00 10 c0    	lea    0xc010001e,%eax
    # set eip = KERNBASE + 0x1.....
    jmp *%eax
c010001c:	ff e0                	jmp    *%eax

c010001e <next>:
next:

    # unmap va 0 ~ 4M, it's temporary mapping
    xorl %eax, %eax
c010001e:	31 c0                	xor    %eax,%eax
    movl %eax, __boot_pgdir
c0100020:	a3 00 30 1b c0       	mov    %eax,0xc01b3000

    # set ebp, esp
    movl $0x0, %ebp
c0100025:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010002a:	bc 00 20 13 c0       	mov    $0xc0132000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c010002f:	e8 02 00 00 00       	call   c0100036 <kern_init>

c0100034 <spin>:

# should never get here
spin:
    jmp spin
c0100034:	eb fe                	jmp    c0100034 <spin>

c0100036 <kern_init>:
int kern_init(void) __attribute__((noreturn));

static void lab1_switch_test(void);

int
kern_init(void) {
c0100036:	f3 0f 1e fb          	endbr32 
c010003a:	55                   	push   %ebp
c010003b:	89 e5                	mov    %esp,%ebp
c010003d:	83 ec 18             	sub    $0x18,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c0100040:	b8 60 81 1b c0       	mov    $0xc01b8160,%eax
c0100045:	2d 00 50 1b c0       	sub    $0xc01b5000,%eax
c010004a:	83 ec 04             	sub    $0x4,%esp
c010004d:	50                   	push   %eax
c010004e:	6a 00                	push   $0x0
c0100050:	68 00 50 1b c0       	push   $0xc01b5000
c0100055:	e8 08 c2 00 00       	call   c010c262 <memset>
c010005a:	83 c4 10             	add    $0x10,%esp

    cons_init();                // init the console
c010005d:	e8 ba 32 00 00       	call   c010331c <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c0100062:	c7 45 f4 40 cb 10 c0 	movl   $0xc010cb40,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100069:	83 ec 08             	sub    $0x8,%esp
c010006c:	ff 75 f4             	pushl  -0xc(%ebp)
c010006f:	68 5c cb 10 c0       	push   $0xc010cb5c
c0100074:	e8 39 02 00 00       	call   c01002b2 <cprintf>
c0100079:	83 c4 10             	add    $0x10,%esp

    print_kerninfo();
c010007c:	e8 81 1d 00 00       	call   c0101e02 <print_kerninfo>

    grade_backtrace();
c0100081:	e8 97 00 00 00       	call   c010011d <grade_backtrace>

    pmm_init();                 // init physical memory management
c0100086:	e8 8c 51 00 00       	call   c0105217 <pmm_init>

    pic_init();                 // init interrupt controller
c010008b:	e8 14 34 00 00       	call   c01034a4 <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100090:	e8 b6 35 00 00       	call   c010364b <idt_init>

    vmm_init();                 // init virtual memory management
c0100095:	e8 a9 6c 00 00       	call   c0106d43 <vmm_init>
    proc_init();                // init process table
c010009a:	e8 19 b9 00 00       	call   c010b9b8 <proc_init>
    
    ide_init();                 // init ide devices
c010009f:	e8 45 22 00 00       	call   c01022e9 <ide_init>
    swap_init();                // init swap
c01000a4:	e8 e4 76 00 00       	call   c010778d <swap_init>

    clock_init();               // init clock interrupt
c01000a9:	e8 b5 29 00 00       	call   c0102a63 <clock_init>
    intr_enable();              // enable irq interrupt
c01000ae:	e8 40 35 00 00       	call   c01035f3 <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000b3:	e8 a3 ba 00 00       	call   c010bb5b <cpu_idle>

c01000b8 <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000b8:	f3 0f 1e fb          	endbr32 
c01000bc:	55                   	push   %ebp
c01000bd:	89 e5                	mov    %esp,%ebp
c01000bf:	83 ec 08             	sub    $0x8,%esp
    mon_backtrace(0, NULL, NULL);
c01000c2:	83 ec 04             	sub    $0x4,%esp
c01000c5:	6a 00                	push   $0x0
c01000c7:	6a 00                	push   $0x0
c01000c9:	6a 00                	push   $0x0
c01000cb:	e8 a5 21 00 00       	call   c0102275 <mon_backtrace>
c01000d0:	83 c4 10             	add    $0x10,%esp
}
c01000d3:	90                   	nop
c01000d4:	c9                   	leave  
c01000d5:	c3                   	ret    

c01000d6 <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000d6:	f3 0f 1e fb          	endbr32 
c01000da:	55                   	push   %ebp
c01000db:	89 e5                	mov    %esp,%ebp
c01000dd:	53                   	push   %ebx
c01000de:	83 ec 04             	sub    $0x4,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000e1:	8d 4d 0c             	lea    0xc(%ebp),%ecx
c01000e4:	8b 55 0c             	mov    0xc(%ebp),%edx
c01000e7:	8d 5d 08             	lea    0x8(%ebp),%ebx
c01000ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01000ed:	51                   	push   %ecx
c01000ee:	52                   	push   %edx
c01000ef:	53                   	push   %ebx
c01000f0:	50                   	push   %eax
c01000f1:	e8 c2 ff ff ff       	call   c01000b8 <grade_backtrace2>
c01000f6:	83 c4 10             	add    $0x10,%esp
}
c01000f9:	90                   	nop
c01000fa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01000fd:	c9                   	leave  
c01000fe:	c3                   	ret    

c01000ff <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c01000ff:	f3 0f 1e fb          	endbr32 
c0100103:	55                   	push   %ebp
c0100104:	89 e5                	mov    %esp,%ebp
c0100106:	83 ec 08             	sub    $0x8,%esp
    grade_backtrace1(arg0, arg2);
c0100109:	83 ec 08             	sub    $0x8,%esp
c010010c:	ff 75 10             	pushl  0x10(%ebp)
c010010f:	ff 75 08             	pushl  0x8(%ebp)
c0100112:	e8 bf ff ff ff       	call   c01000d6 <grade_backtrace1>
c0100117:	83 c4 10             	add    $0x10,%esp
}
c010011a:	90                   	nop
c010011b:	c9                   	leave  
c010011c:	c3                   	ret    

c010011d <grade_backtrace>:

void
grade_backtrace(void) {
c010011d:	f3 0f 1e fb          	endbr32 
c0100121:	55                   	push   %ebp
c0100122:	89 e5                	mov    %esp,%ebp
c0100124:	83 ec 08             	sub    $0x8,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c0100127:	b8 36 00 10 c0       	mov    $0xc0100036,%eax
c010012c:	83 ec 04             	sub    $0x4,%esp
c010012f:	68 00 00 ff ff       	push   $0xffff0000
c0100134:	50                   	push   %eax
c0100135:	6a 00                	push   $0x0
c0100137:	e8 c3 ff ff ff       	call   c01000ff <grade_backtrace0>
c010013c:	83 c4 10             	add    $0x10,%esp
}
c010013f:	90                   	nop
c0100140:	c9                   	leave  
c0100141:	c3                   	ret    

c0100142 <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c0100142:	f3 0f 1e fb          	endbr32 
c0100146:	55                   	push   %ebp
c0100147:	89 e5                	mov    %esp,%ebp
c0100149:	83 ec 18             	sub    $0x18,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c010014c:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c010014f:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100152:	8c 45 f2             	mov    %es,-0xe(%ebp)
c0100155:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c0100158:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010015c:	0f b7 c0             	movzwl %ax,%eax
c010015f:	83 e0 03             	and    $0x3,%eax
c0100162:	89 c2                	mov    %eax,%edx
c0100164:	a1 00 50 1b c0       	mov    0xc01b5000,%eax
c0100169:	83 ec 04             	sub    $0x4,%esp
c010016c:	52                   	push   %edx
c010016d:	50                   	push   %eax
c010016e:	68 61 cb 10 c0       	push   $0xc010cb61
c0100173:	e8 3a 01 00 00       	call   c01002b2 <cprintf>
c0100178:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  cs = %x\n", round, reg1);
c010017b:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010017f:	0f b7 d0             	movzwl %ax,%edx
c0100182:	a1 00 50 1b c0       	mov    0xc01b5000,%eax
c0100187:	83 ec 04             	sub    $0x4,%esp
c010018a:	52                   	push   %edx
c010018b:	50                   	push   %eax
c010018c:	68 6f cb 10 c0       	push   $0xc010cb6f
c0100191:	e8 1c 01 00 00       	call   c01002b2 <cprintf>
c0100196:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  ds = %x\n", round, reg2);
c0100199:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010019d:	0f b7 d0             	movzwl %ax,%edx
c01001a0:	a1 00 50 1b c0       	mov    0xc01b5000,%eax
c01001a5:	83 ec 04             	sub    $0x4,%esp
c01001a8:	52                   	push   %edx
c01001a9:	50                   	push   %eax
c01001aa:	68 7d cb 10 c0       	push   $0xc010cb7d
c01001af:	e8 fe 00 00 00       	call   c01002b2 <cprintf>
c01001b4:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  es = %x\n", round, reg3);
c01001b7:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001bb:	0f b7 d0             	movzwl %ax,%edx
c01001be:	a1 00 50 1b c0       	mov    0xc01b5000,%eax
c01001c3:	83 ec 04             	sub    $0x4,%esp
c01001c6:	52                   	push   %edx
c01001c7:	50                   	push   %eax
c01001c8:	68 8b cb 10 c0       	push   $0xc010cb8b
c01001cd:	e8 e0 00 00 00       	call   c01002b2 <cprintf>
c01001d2:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  ss = %x\n", round, reg4);
c01001d5:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001d9:	0f b7 d0             	movzwl %ax,%edx
c01001dc:	a1 00 50 1b c0       	mov    0xc01b5000,%eax
c01001e1:	83 ec 04             	sub    $0x4,%esp
c01001e4:	52                   	push   %edx
c01001e5:	50                   	push   %eax
c01001e6:	68 99 cb 10 c0       	push   $0xc010cb99
c01001eb:	e8 c2 00 00 00       	call   c01002b2 <cprintf>
c01001f0:	83 c4 10             	add    $0x10,%esp
    round ++;
c01001f3:	a1 00 50 1b c0       	mov    0xc01b5000,%eax
c01001f8:	83 c0 01             	add    $0x1,%eax
c01001fb:	a3 00 50 1b c0       	mov    %eax,0xc01b5000
}
c0100200:	90                   	nop
c0100201:	c9                   	leave  
c0100202:	c3                   	ret    

c0100203 <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c0100203:	f3 0f 1e fb          	endbr32 
c0100207:	55                   	push   %ebp
c0100208:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c010020a:	90                   	nop
c010020b:	5d                   	pop    %ebp
c010020c:	c3                   	ret    

c010020d <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c010020d:	f3 0f 1e fb          	endbr32 
c0100211:	55                   	push   %ebp
c0100212:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c0100214:	90                   	nop
c0100215:	5d                   	pop    %ebp
c0100216:	c3                   	ret    

c0100217 <lab1_switch_test>:

static void
lab1_switch_test(void) {
c0100217:	f3 0f 1e fb          	endbr32 
c010021b:	55                   	push   %ebp
c010021c:	89 e5                	mov    %esp,%ebp
c010021e:	83 ec 08             	sub    $0x8,%esp
    lab1_print_cur_status();
c0100221:	e8 1c ff ff ff       	call   c0100142 <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100226:	83 ec 0c             	sub    $0xc,%esp
c0100229:	68 a8 cb 10 c0       	push   $0xc010cba8
c010022e:	e8 7f 00 00 00       	call   c01002b2 <cprintf>
c0100233:	83 c4 10             	add    $0x10,%esp
    lab1_switch_to_user();
c0100236:	e8 c8 ff ff ff       	call   c0100203 <lab1_switch_to_user>
    lab1_print_cur_status();
c010023b:	e8 02 ff ff ff       	call   c0100142 <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c0100240:	83 ec 0c             	sub    $0xc,%esp
c0100243:	68 c8 cb 10 c0       	push   $0xc010cbc8
c0100248:	e8 65 00 00 00       	call   c01002b2 <cprintf>
c010024d:	83 c4 10             	add    $0x10,%esp
    lab1_switch_to_kernel();
c0100250:	e8 b8 ff ff ff       	call   c010020d <lab1_switch_to_kernel>
    lab1_print_cur_status();
c0100255:	e8 e8 fe ff ff       	call   c0100142 <lab1_print_cur_status>
}
c010025a:	90                   	nop
c010025b:	c9                   	leave  
c010025c:	c3                   	ret    

c010025d <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c010025d:	f3 0f 1e fb          	endbr32 
c0100261:	55                   	push   %ebp
c0100262:	89 e5                	mov    %esp,%ebp
c0100264:	83 ec 08             	sub    $0x8,%esp
    cons_putc(c);
c0100267:	83 ec 0c             	sub    $0xc,%esp
c010026a:	ff 75 08             	pushl  0x8(%ebp)
c010026d:	e8 df 30 00 00       	call   c0103351 <cons_putc>
c0100272:	83 c4 10             	add    $0x10,%esp
    (*cnt) ++;
c0100275:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100278:	8b 00                	mov    (%eax),%eax
c010027a:	8d 50 01             	lea    0x1(%eax),%edx
c010027d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100280:	89 10                	mov    %edx,(%eax)
}
c0100282:	90                   	nop
c0100283:	c9                   	leave  
c0100284:	c3                   	ret    

c0100285 <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c0100285:	f3 0f 1e fb          	endbr32 
c0100289:	55                   	push   %ebp
c010028a:	89 e5                	mov    %esp,%ebp
c010028c:	83 ec 18             	sub    $0x18,%esp
    int cnt = 0;
c010028f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, &cnt, fmt, ap);
c0100296:	ff 75 0c             	pushl  0xc(%ebp)
c0100299:	ff 75 08             	pushl  0x8(%ebp)
c010029c:	8d 45 f4             	lea    -0xc(%ebp),%eax
c010029f:	50                   	push   %eax
c01002a0:	68 5d 02 10 c0       	push   $0xc010025d
c01002a5:	e8 07 c3 00 00       	call   c010c5b1 <vprintfmt>
c01002aa:	83 c4 10             	add    $0x10,%esp
    return cnt;
c01002ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01002b0:	c9                   	leave  
c01002b1:	c3                   	ret    

c01002b2 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c01002b2:	f3 0f 1e fb          	endbr32 
c01002b6:	55                   	push   %ebp
c01002b7:	89 e5                	mov    %esp,%ebp
c01002b9:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c01002bc:	8d 45 0c             	lea    0xc(%ebp),%eax
c01002bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c01002c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002c5:	83 ec 08             	sub    $0x8,%esp
c01002c8:	50                   	push   %eax
c01002c9:	ff 75 08             	pushl  0x8(%ebp)
c01002cc:	e8 b4 ff ff ff       	call   c0100285 <vcprintf>
c01002d1:	83 c4 10             	add    $0x10,%esp
c01002d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c01002d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01002da:	c9                   	leave  
c01002db:	c3                   	ret    

c01002dc <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c01002dc:	f3 0f 1e fb          	endbr32 
c01002e0:	55                   	push   %ebp
c01002e1:	89 e5                	mov    %esp,%ebp
c01002e3:	83 ec 08             	sub    $0x8,%esp
    cons_putc(c);
c01002e6:	83 ec 0c             	sub    $0xc,%esp
c01002e9:	ff 75 08             	pushl  0x8(%ebp)
c01002ec:	e8 60 30 00 00       	call   c0103351 <cons_putc>
c01002f1:	83 c4 10             	add    $0x10,%esp
}
c01002f4:	90                   	nop
c01002f5:	c9                   	leave  
c01002f6:	c3                   	ret    

c01002f7 <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c01002f7:	f3 0f 1e fb          	endbr32 
c01002fb:	55                   	push   %ebp
c01002fc:	89 e5                	mov    %esp,%ebp
c01002fe:	83 ec 18             	sub    $0x18,%esp
    int cnt = 0;
c0100301:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c0100308:	eb 14                	jmp    c010031e <cputs+0x27>
        cputch(c, &cnt);
c010030a:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c010030e:	83 ec 08             	sub    $0x8,%esp
c0100311:	8d 55 f0             	lea    -0x10(%ebp),%edx
c0100314:	52                   	push   %edx
c0100315:	50                   	push   %eax
c0100316:	e8 42 ff ff ff       	call   c010025d <cputch>
c010031b:	83 c4 10             	add    $0x10,%esp
    while ((c = *str ++) != '\0') {
c010031e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100321:	8d 50 01             	lea    0x1(%eax),%edx
c0100324:	89 55 08             	mov    %edx,0x8(%ebp)
c0100327:	0f b6 00             	movzbl (%eax),%eax
c010032a:	88 45 f7             	mov    %al,-0x9(%ebp)
c010032d:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c0100331:	75 d7                	jne    c010030a <cputs+0x13>
    }
    cputch('\n', &cnt);
c0100333:	83 ec 08             	sub    $0x8,%esp
c0100336:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0100339:	50                   	push   %eax
c010033a:	6a 0a                	push   $0xa
c010033c:	e8 1c ff ff ff       	call   c010025d <cputch>
c0100341:	83 c4 10             	add    $0x10,%esp
    return cnt;
c0100344:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0100347:	c9                   	leave  
c0100348:	c3                   	ret    

c0100349 <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c0100349:	f3 0f 1e fb          	endbr32 
c010034d:	55                   	push   %ebp
c010034e:	89 e5                	mov    %esp,%ebp
c0100350:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c0100353:	90                   	nop
c0100354:	e8 45 30 00 00       	call   c010339e <cons_getc>
c0100359:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010035c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100360:	74 f2                	je     c0100354 <getchar+0xb>
        /* do nothing */;
    return c;
c0100362:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100365:	c9                   	leave  
c0100366:	c3                   	ret    

c0100367 <rb_node_create>:
#include <rb_tree.h>
#include <assert.h>

/* rb_node_create - create a new rb_node */
static inline rb_node *
rb_node_create(void) {
c0100367:	55                   	push   %ebp
c0100368:	89 e5                	mov    %esp,%ebp
c010036a:	83 ec 08             	sub    $0x8,%esp
    return kmalloc(sizeof(rb_node));
c010036d:	83 ec 0c             	sub    $0xc,%esp
c0100370:	6a 10                	push   $0x10
c0100372:	e8 cb 84 00 00       	call   c0108842 <kmalloc>
c0100377:	83 c4 10             	add    $0x10,%esp
}
c010037a:	c9                   	leave  
c010037b:	c3                   	ret    

c010037c <rb_tree_empty>:

/* rb_tree_empty - tests if tree is empty */
static inline bool
rb_tree_empty(rb_tree *tree) {
c010037c:	55                   	push   %ebp
c010037d:	89 e5                	mov    %esp,%ebp
c010037f:	83 ec 10             	sub    $0x10,%esp
    rb_node *nil = tree->nil, *root = tree->root;
c0100382:	8b 45 08             	mov    0x8(%ebp),%eax
c0100385:	8b 40 04             	mov    0x4(%eax),%eax
c0100388:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010038b:	8b 45 08             	mov    0x8(%ebp),%eax
c010038e:	8b 40 08             	mov    0x8(%eax),%eax
c0100391:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return root->left == nil;
c0100394:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100397:	8b 40 08             	mov    0x8(%eax),%eax
c010039a:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010039d:	0f 94 c0             	sete   %al
c01003a0:	0f b6 c0             	movzbl %al,%eax
}
c01003a3:	c9                   	leave  
c01003a4:	c3                   	ret    

c01003a5 <rb_tree_create>:
 * Note that, root->left should always point to the node that is the root
 * of the tree. And nil points to a 'NULL' node which should always be
 * black and may have arbitrary children and parent node.
 * */
rb_tree *
rb_tree_create(int (*compare)(rb_node *node1, rb_node *node2)) {
c01003a5:	f3 0f 1e fb          	endbr32 
c01003a9:	55                   	push   %ebp
c01003aa:	89 e5                	mov    %esp,%ebp
c01003ac:	83 ec 18             	sub    $0x18,%esp
    assert(compare != NULL);
c01003af:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01003b3:	75 16                	jne    c01003cb <rb_tree_create+0x26>
c01003b5:	68 e8 cb 10 c0       	push   $0xc010cbe8
c01003ba:	68 f8 cb 10 c0       	push   $0xc010cbf8
c01003bf:	6a 1f                	push   $0x1f
c01003c1:	68 0d cc 10 c0       	push   $0xc010cc0d
c01003c6:	e8 23 14 00 00       	call   c01017ee <__panic>

    rb_tree *tree;
    rb_node *nil, *root;

    if ((tree = kmalloc(sizeof(rb_tree))) == NULL) {
c01003cb:	83 ec 0c             	sub    $0xc,%esp
c01003ce:	6a 0c                	push   $0xc
c01003d0:	e8 6d 84 00 00       	call   c0108842 <kmalloc>
c01003d5:	83 c4 10             	add    $0x10,%esp
c01003d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01003db:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01003df:	0f 84 b9 00 00 00    	je     c010049e <rb_tree_create+0xf9>
        goto bad_tree;
    }

    tree->compare = compare;
c01003e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01003e8:	8b 55 08             	mov    0x8(%ebp),%edx
c01003eb:	89 10                	mov    %edx,(%eax)

    if ((nil = rb_node_create()) == NULL) {
c01003ed:	e8 75 ff ff ff       	call   c0100367 <rb_node_create>
c01003f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01003f5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01003f9:	0f 84 8e 00 00 00    	je     c010048d <rb_tree_create+0xe8>
        goto bad_node_cleanup_tree;
    }

    nil->parent = nil->left = nil->right = nil;
c01003ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100402:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100405:	89 50 0c             	mov    %edx,0xc(%eax)
c0100408:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010040b:	8b 50 0c             	mov    0xc(%eax),%edx
c010040e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100411:	89 50 08             	mov    %edx,0x8(%eax)
c0100414:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100417:	8b 50 08             	mov    0x8(%eax),%edx
c010041a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010041d:	89 50 04             	mov    %edx,0x4(%eax)
    nil->red = 0;
c0100420:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100423:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    tree->nil = nil;
c0100429:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010042c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010042f:	89 50 04             	mov    %edx,0x4(%eax)

    if ((root = rb_node_create()) == NULL) {
c0100432:	e8 30 ff ff ff       	call   c0100367 <rb_node_create>
c0100437:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010043a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010043e:	74 38                	je     c0100478 <rb_tree_create+0xd3>
        goto bad_node_cleanup_nil;
    }

    root->parent = root->left = root->right = nil;
c0100440:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100443:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100446:	89 50 0c             	mov    %edx,0xc(%eax)
c0100449:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010044c:	8b 50 0c             	mov    0xc(%eax),%edx
c010044f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100452:	89 50 08             	mov    %edx,0x8(%eax)
c0100455:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100458:	8b 50 08             	mov    0x8(%eax),%edx
c010045b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010045e:	89 50 04             	mov    %edx,0x4(%eax)
    root->red = 0;
c0100461:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100464:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    tree->root = root;
c010046a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010046d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0100470:	89 50 08             	mov    %edx,0x8(%eax)
    return tree;
c0100473:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100476:	eb 2c                	jmp    c01004a4 <rb_tree_create+0xff>
        goto bad_node_cleanup_nil;
c0100478:	90                   	nop
c0100479:	f3 0f 1e fb          	endbr32 

bad_node_cleanup_nil:
    kfree(nil);
c010047d:	83 ec 0c             	sub    $0xc,%esp
c0100480:	ff 75 f0             	pushl  -0x10(%ebp)
c0100483:	e8 d6 83 00 00       	call   c010885e <kfree>
c0100488:	83 c4 10             	add    $0x10,%esp
c010048b:	eb 01                	jmp    c010048e <rb_tree_create+0xe9>
        goto bad_node_cleanup_tree;
c010048d:	90                   	nop
bad_node_cleanup_tree:
    kfree(tree);
c010048e:	83 ec 0c             	sub    $0xc,%esp
c0100491:	ff 75 f4             	pushl  -0xc(%ebp)
c0100494:	e8 c5 83 00 00       	call   c010885e <kfree>
c0100499:	83 c4 10             	add    $0x10,%esp
c010049c:	eb 01                	jmp    c010049f <rb_tree_create+0xfa>
        goto bad_tree;
c010049e:	90                   	nop
bad_tree:
    return NULL;
c010049f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01004a4:	c9                   	leave  
c01004a5:	c3                   	ret    

c01004a6 <rb_left_rotate>:
    y->_left = x;                                               \
    x->parent = y;                                              \
    assert(!(nil->red));                                        \
}

FUNC_ROTATE(rb_left_rotate, left, right);
c01004a6:	f3 0f 1e fb          	endbr32 
c01004aa:	55                   	push   %ebp
c01004ab:	89 e5                	mov    %esp,%ebp
c01004ad:	83 ec 18             	sub    $0x18,%esp
c01004b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01004b3:	8b 40 04             	mov    0x4(%eax),%eax
c01004b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01004b9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004bc:	8b 40 0c             	mov    0xc(%eax),%eax
c01004bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01004c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01004c5:	8b 40 08             	mov    0x8(%eax),%eax
c01004c8:	39 45 0c             	cmp    %eax,0xc(%ebp)
c01004cb:	74 10                	je     c01004dd <rb_left_rotate+0x37>
c01004cd:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004d0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01004d3:	74 08                	je     c01004dd <rb_left_rotate+0x37>
c01004d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004d8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01004db:	75 16                	jne    c01004f3 <rb_left_rotate+0x4d>
c01004dd:	68 24 cc 10 c0       	push   $0xc010cc24
c01004e2:	68 f8 cb 10 c0       	push   $0xc010cbf8
c01004e7:	6a 64                	push   $0x64
c01004e9:	68 0d cc 10 c0       	push   $0xc010cc0d
c01004ee:	e8 fb 12 00 00       	call   c01017ee <__panic>
c01004f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004f6:	8b 50 08             	mov    0x8(%eax),%edx
c01004f9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004fc:	89 50 0c             	mov    %edx,0xc(%eax)
c01004ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100502:	8b 40 08             	mov    0x8(%eax),%eax
c0100505:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0100508:	74 0c                	je     c0100516 <rb_left_rotate+0x70>
c010050a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010050d:	8b 40 08             	mov    0x8(%eax),%eax
c0100510:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100513:	89 50 04             	mov    %edx,0x4(%eax)
c0100516:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100519:	8b 50 04             	mov    0x4(%eax),%edx
c010051c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010051f:	89 50 04             	mov    %edx,0x4(%eax)
c0100522:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100525:	8b 40 04             	mov    0x4(%eax),%eax
c0100528:	8b 40 08             	mov    0x8(%eax),%eax
c010052b:	39 45 0c             	cmp    %eax,0xc(%ebp)
c010052e:	75 0e                	jne    c010053e <rb_left_rotate+0x98>
c0100530:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100533:	8b 40 04             	mov    0x4(%eax),%eax
c0100536:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100539:	89 50 08             	mov    %edx,0x8(%eax)
c010053c:	eb 0c                	jmp    c010054a <rb_left_rotate+0xa4>
c010053e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100541:	8b 40 04             	mov    0x4(%eax),%eax
c0100544:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100547:	89 50 0c             	mov    %edx,0xc(%eax)
c010054a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010054d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100550:	89 50 08             	mov    %edx,0x8(%eax)
c0100553:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100556:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100559:	89 50 04             	mov    %edx,0x4(%eax)
c010055c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010055f:	8b 00                	mov    (%eax),%eax
c0100561:	85 c0                	test   %eax,%eax
c0100563:	74 16                	je     c010057b <rb_left_rotate+0xd5>
c0100565:	68 4c cc 10 c0       	push   $0xc010cc4c
c010056a:	68 f8 cb 10 c0       	push   $0xc010cbf8
c010056f:	6a 64                	push   $0x64
c0100571:	68 0d cc 10 c0       	push   $0xc010cc0d
c0100576:	e8 73 12 00 00       	call   c01017ee <__panic>
c010057b:	90                   	nop
c010057c:	c9                   	leave  
c010057d:	c3                   	ret    

c010057e <rb_right_rotate>:
FUNC_ROTATE(rb_right_rotate, right, left);
c010057e:	f3 0f 1e fb          	endbr32 
c0100582:	55                   	push   %ebp
c0100583:	89 e5                	mov    %esp,%ebp
c0100585:	83 ec 18             	sub    $0x18,%esp
c0100588:	8b 45 08             	mov    0x8(%ebp),%eax
c010058b:	8b 40 04             	mov    0x4(%eax),%eax
c010058e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100591:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100594:	8b 40 08             	mov    0x8(%eax),%eax
c0100597:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010059a:	8b 45 08             	mov    0x8(%ebp),%eax
c010059d:	8b 40 08             	mov    0x8(%eax),%eax
c01005a0:	39 45 0c             	cmp    %eax,0xc(%ebp)
c01005a3:	74 10                	je     c01005b5 <rb_right_rotate+0x37>
c01005a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005a8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01005ab:	74 08                	je     c01005b5 <rb_right_rotate+0x37>
c01005ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005b0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01005b3:	75 16                	jne    c01005cb <rb_right_rotate+0x4d>
c01005b5:	68 24 cc 10 c0       	push   $0xc010cc24
c01005ba:	68 f8 cb 10 c0       	push   $0xc010cbf8
c01005bf:	6a 65                	push   $0x65
c01005c1:	68 0d cc 10 c0       	push   $0xc010cc0d
c01005c6:	e8 23 12 00 00       	call   c01017ee <__panic>
c01005cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005ce:	8b 50 0c             	mov    0xc(%eax),%edx
c01005d1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005d4:	89 50 08             	mov    %edx,0x8(%eax)
c01005d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005da:	8b 40 0c             	mov    0xc(%eax),%eax
c01005dd:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c01005e0:	74 0c                	je     c01005ee <rb_right_rotate+0x70>
c01005e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005e5:	8b 40 0c             	mov    0xc(%eax),%eax
c01005e8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01005eb:	89 50 04             	mov    %edx,0x4(%eax)
c01005ee:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005f1:	8b 50 04             	mov    0x4(%eax),%edx
c01005f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005f7:	89 50 04             	mov    %edx,0x4(%eax)
c01005fa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005fd:	8b 40 04             	mov    0x4(%eax),%eax
c0100600:	8b 40 0c             	mov    0xc(%eax),%eax
c0100603:	39 45 0c             	cmp    %eax,0xc(%ebp)
c0100606:	75 0e                	jne    c0100616 <rb_right_rotate+0x98>
c0100608:	8b 45 0c             	mov    0xc(%ebp),%eax
c010060b:	8b 40 04             	mov    0x4(%eax),%eax
c010060e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100611:	89 50 0c             	mov    %edx,0xc(%eax)
c0100614:	eb 0c                	jmp    c0100622 <rb_right_rotate+0xa4>
c0100616:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100619:	8b 40 04             	mov    0x4(%eax),%eax
c010061c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010061f:	89 50 08             	mov    %edx,0x8(%eax)
c0100622:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100625:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100628:	89 50 0c             	mov    %edx,0xc(%eax)
c010062b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010062e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100631:	89 50 04             	mov    %edx,0x4(%eax)
c0100634:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100637:	8b 00                	mov    (%eax),%eax
c0100639:	85 c0                	test   %eax,%eax
c010063b:	74 16                	je     c0100653 <rb_right_rotate+0xd5>
c010063d:	68 4c cc 10 c0       	push   $0xc010cc4c
c0100642:	68 f8 cb 10 c0       	push   $0xc010cbf8
c0100647:	6a 65                	push   $0x65
c0100649:	68 0d cc 10 c0       	push   $0xc010cc0d
c010064e:	e8 9b 11 00 00       	call   c01017ee <__panic>
c0100653:	90                   	nop
c0100654:	c9                   	leave  
c0100655:	c3                   	ret    

c0100656 <rb_insert_binary>:
 * rb_insert_binary - insert @node to red-black @tree as if it were
 * a regular binary tree. This function is only intended to be called
 * by function rb_insert.
 * */
static inline void
rb_insert_binary(rb_tree *tree, rb_node *node) {
c0100656:	55                   	push   %ebp
c0100657:	89 e5                	mov    %esp,%ebp
c0100659:	83 ec 28             	sub    $0x28,%esp
    rb_node *x, *y, *z = node, *nil = tree->nil, *root = tree->root;
c010065c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010065f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100662:	8b 45 08             	mov    0x8(%ebp),%eax
c0100665:	8b 40 04             	mov    0x4(%eax),%eax
c0100668:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010066b:	8b 45 08             	mov    0x8(%ebp),%eax
c010066e:	8b 40 08             	mov    0x8(%eax),%eax
c0100671:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    z->left = z->right = nil;
c0100674:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100677:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010067a:	89 50 0c             	mov    %edx,0xc(%eax)
c010067d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100680:	8b 50 0c             	mov    0xc(%eax),%edx
c0100683:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100686:	89 50 08             	mov    %edx,0x8(%eax)
    y = root, x = y->left;
c0100689:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010068c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010068f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100692:	8b 40 08             	mov    0x8(%eax),%eax
c0100695:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (x != nil) {
c0100698:	eb 2e                	jmp    c01006c8 <rb_insert_binary+0x72>
        y = x;
c010069a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010069d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        x = (COMPARE(tree, x, node) > 0) ? x->left : x->right;
c01006a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01006a3:	8b 00                	mov    (%eax),%eax
c01006a5:	83 ec 08             	sub    $0x8,%esp
c01006a8:	ff 75 0c             	pushl  0xc(%ebp)
c01006ab:	ff 75 f4             	pushl  -0xc(%ebp)
c01006ae:	ff d0                	call   *%eax
c01006b0:	83 c4 10             	add    $0x10,%esp
c01006b3:	85 c0                	test   %eax,%eax
c01006b5:	7e 08                	jle    c01006bf <rb_insert_binary+0x69>
c01006b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006ba:	8b 40 08             	mov    0x8(%eax),%eax
c01006bd:	eb 06                	jmp    c01006c5 <rb_insert_binary+0x6f>
c01006bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006c2:	8b 40 0c             	mov    0xc(%eax),%eax
c01006c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (x != nil) {
c01006c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006cb:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01006ce:	75 ca                	jne    c010069a <rb_insert_binary+0x44>
    }
    z->parent = y;
c01006d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01006d3:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01006d6:	89 50 04             	mov    %edx,0x4(%eax)
    if (y == root || COMPARE(tree, y, z) > 0) {
c01006d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01006dc:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c01006df:	74 17                	je     c01006f8 <rb_insert_binary+0xa2>
c01006e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01006e4:	8b 00                	mov    (%eax),%eax
c01006e6:	83 ec 08             	sub    $0x8,%esp
c01006e9:	ff 75 ec             	pushl  -0x14(%ebp)
c01006ec:	ff 75 f0             	pushl  -0x10(%ebp)
c01006ef:	ff d0                	call   *%eax
c01006f1:	83 c4 10             	add    $0x10,%esp
c01006f4:	85 c0                	test   %eax,%eax
c01006f6:	7e 0b                	jle    c0100703 <rb_insert_binary+0xad>
        y->left = z;
c01006f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01006fb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01006fe:	89 50 08             	mov    %edx,0x8(%eax)
c0100701:	eb 0a                	jmp    c010070d <rb_insert_binary+0xb7>
    }
    else {
        y->right = z;
c0100703:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100706:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0100709:	89 50 0c             	mov    %edx,0xc(%eax)
    }
}
c010070c:	90                   	nop
c010070d:	90                   	nop
c010070e:	c9                   	leave  
c010070f:	c3                   	ret    

c0100710 <rb_insert>:

/* rb_insert - insert a node to red-black tree */
void
rb_insert(rb_tree *tree, rb_node *node) {
c0100710:	f3 0f 1e fb          	endbr32 
c0100714:	55                   	push   %ebp
c0100715:	89 e5                	mov    %esp,%ebp
c0100717:	83 ec 18             	sub    $0x18,%esp
    rb_insert_binary(tree, node);
c010071a:	83 ec 08             	sub    $0x8,%esp
c010071d:	ff 75 0c             	pushl  0xc(%ebp)
c0100720:	ff 75 08             	pushl  0x8(%ebp)
c0100723:	e8 2e ff ff ff       	call   c0100656 <rb_insert_binary>
c0100728:	83 c4 10             	add    $0x10,%esp
    node->red = 1;
c010072b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010072e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    rb_node *x = node, *y;
c0100734:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100737:	89 45 f4             	mov    %eax,-0xc(%ebp)
            x->parent->parent->red = 1;                         \
            rb_##_right##_rotate(tree, x->parent->parent);      \
        }                                                       \
    } while (0)

    while (x->parent->red) {
c010073a:	e9 6c 01 00 00       	jmp    c01008ab <rb_insert+0x19b>
        if (x->parent == x->parent->parent->left) {
c010073f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100742:	8b 50 04             	mov    0x4(%eax),%edx
c0100745:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100748:	8b 40 04             	mov    0x4(%eax),%eax
c010074b:	8b 40 04             	mov    0x4(%eax),%eax
c010074e:	8b 40 08             	mov    0x8(%eax),%eax
c0100751:	39 c2                	cmp    %eax,%edx
c0100753:	0f 85 ad 00 00 00    	jne    c0100806 <rb_insert+0xf6>
            RB_INSERT_SUB(left, right);
c0100759:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010075c:	8b 40 04             	mov    0x4(%eax),%eax
c010075f:	8b 40 04             	mov    0x4(%eax),%eax
c0100762:	8b 40 0c             	mov    0xc(%eax),%eax
c0100765:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100768:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010076b:	8b 00                	mov    (%eax),%eax
c010076d:	85 c0                	test   %eax,%eax
c010076f:	74 35                	je     c01007a6 <rb_insert+0x96>
c0100771:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100774:	8b 40 04             	mov    0x4(%eax),%eax
c0100777:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010077d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100780:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100786:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100789:	8b 40 04             	mov    0x4(%eax),%eax
c010078c:	8b 40 04             	mov    0x4(%eax),%eax
c010078f:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100795:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100798:	8b 40 04             	mov    0x4(%eax),%eax
c010079b:	8b 40 04             	mov    0x4(%eax),%eax
c010079e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01007a1:	e9 05 01 00 00       	jmp    c01008ab <rb_insert+0x19b>
c01007a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007a9:	8b 40 04             	mov    0x4(%eax),%eax
c01007ac:	8b 40 0c             	mov    0xc(%eax),%eax
c01007af:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c01007b2:	75 1a                	jne    c01007ce <rb_insert+0xbe>
c01007b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007b7:	8b 40 04             	mov    0x4(%eax),%eax
c01007ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01007bd:	83 ec 08             	sub    $0x8,%esp
c01007c0:	ff 75 f4             	pushl  -0xc(%ebp)
c01007c3:	ff 75 08             	pushl  0x8(%ebp)
c01007c6:	e8 db fc ff ff       	call   c01004a6 <rb_left_rotate>
c01007cb:	83 c4 10             	add    $0x10,%esp
c01007ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007d1:	8b 40 04             	mov    0x4(%eax),%eax
c01007d4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c01007da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007dd:	8b 40 04             	mov    0x4(%eax),%eax
c01007e0:	8b 40 04             	mov    0x4(%eax),%eax
c01007e3:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c01007e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007ec:	8b 40 04             	mov    0x4(%eax),%eax
c01007ef:	8b 40 04             	mov    0x4(%eax),%eax
c01007f2:	83 ec 08             	sub    $0x8,%esp
c01007f5:	50                   	push   %eax
c01007f6:	ff 75 08             	pushl  0x8(%ebp)
c01007f9:	e8 80 fd ff ff       	call   c010057e <rb_right_rotate>
c01007fe:	83 c4 10             	add    $0x10,%esp
c0100801:	e9 a5 00 00 00       	jmp    c01008ab <rb_insert+0x19b>
        }
        else {
            RB_INSERT_SUB(right, left);
c0100806:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100809:	8b 40 04             	mov    0x4(%eax),%eax
c010080c:	8b 40 04             	mov    0x4(%eax),%eax
c010080f:	8b 40 08             	mov    0x8(%eax),%eax
c0100812:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100815:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100818:	8b 00                	mov    (%eax),%eax
c010081a:	85 c0                	test   %eax,%eax
c010081c:	74 32                	je     c0100850 <rb_insert+0x140>
c010081e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100821:	8b 40 04             	mov    0x4(%eax),%eax
c0100824:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010082a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010082d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100833:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100836:	8b 40 04             	mov    0x4(%eax),%eax
c0100839:	8b 40 04             	mov    0x4(%eax),%eax
c010083c:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100842:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100845:	8b 40 04             	mov    0x4(%eax),%eax
c0100848:	8b 40 04             	mov    0x4(%eax),%eax
c010084b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010084e:	eb 5b                	jmp    c01008ab <rb_insert+0x19b>
c0100850:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100853:	8b 40 04             	mov    0x4(%eax),%eax
c0100856:	8b 40 08             	mov    0x8(%eax),%eax
c0100859:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010085c:	75 1a                	jne    c0100878 <rb_insert+0x168>
c010085e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100861:	8b 40 04             	mov    0x4(%eax),%eax
c0100864:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100867:	83 ec 08             	sub    $0x8,%esp
c010086a:	ff 75 f4             	pushl  -0xc(%ebp)
c010086d:	ff 75 08             	pushl  0x8(%ebp)
c0100870:	e8 09 fd ff ff       	call   c010057e <rb_right_rotate>
c0100875:	83 c4 10             	add    $0x10,%esp
c0100878:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010087b:	8b 40 04             	mov    0x4(%eax),%eax
c010087e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100884:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100887:	8b 40 04             	mov    0x4(%eax),%eax
c010088a:	8b 40 04             	mov    0x4(%eax),%eax
c010088d:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100893:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100896:	8b 40 04             	mov    0x4(%eax),%eax
c0100899:	8b 40 04             	mov    0x4(%eax),%eax
c010089c:	83 ec 08             	sub    $0x8,%esp
c010089f:	50                   	push   %eax
c01008a0:	ff 75 08             	pushl  0x8(%ebp)
c01008a3:	e8 fe fb ff ff       	call   c01004a6 <rb_left_rotate>
c01008a8:	83 c4 10             	add    $0x10,%esp
    while (x->parent->red) {
c01008ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008ae:	8b 40 04             	mov    0x4(%eax),%eax
c01008b1:	8b 00                	mov    (%eax),%eax
c01008b3:	85 c0                	test   %eax,%eax
c01008b5:	0f 85 84 fe ff ff    	jne    c010073f <rb_insert+0x2f>
        }
    }
    tree->root->left->red = 0;
c01008bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01008be:	8b 40 08             	mov    0x8(%eax),%eax
c01008c1:	8b 40 08             	mov    0x8(%eax),%eax
c01008c4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    assert(!(tree->nil->red) && !(tree->root->red));
c01008ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01008cd:	8b 40 04             	mov    0x4(%eax),%eax
c01008d0:	8b 00                	mov    (%eax),%eax
c01008d2:	85 c0                	test   %eax,%eax
c01008d4:	75 0c                	jne    c01008e2 <rb_insert+0x1d2>
c01008d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01008d9:	8b 40 08             	mov    0x8(%eax),%eax
c01008dc:	8b 00                	mov    (%eax),%eax
c01008de:	85 c0                	test   %eax,%eax
c01008e0:	74 19                	je     c01008fb <rb_insert+0x1eb>
c01008e2:	68 58 cc 10 c0       	push   $0xc010cc58
c01008e7:	68 f8 cb 10 c0       	push   $0xc010cbf8
c01008ec:	68 a9 00 00 00       	push   $0xa9
c01008f1:	68 0d cc 10 c0       	push   $0xc010cc0d
c01008f6:	e8 f3 0e 00 00       	call   c01017ee <__panic>

#undef RB_INSERT_SUB
}
c01008fb:	90                   	nop
c01008fc:	c9                   	leave  
c01008fd:	c3                   	ret    

c01008fe <rb_tree_successor>:
 * rb_tree_successor - returns the successor of @node, or nil
 * if no successor exists. Make sure that @node must belong to @tree,
 * and this function should only be called by rb_node_prev.
 * */
static inline rb_node *
rb_tree_successor(rb_tree *tree, rb_node *node) {
c01008fe:	55                   	push   %ebp
c01008ff:	89 e5                	mov    %esp,%ebp
c0100901:	83 ec 10             	sub    $0x10,%esp
    rb_node *x = node, *y, *nil = tree->nil;
c0100904:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100907:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010090a:	8b 45 08             	mov    0x8(%ebp),%eax
c010090d:	8b 40 04             	mov    0x4(%eax),%eax
c0100910:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if ((y = x->right) != nil) {
c0100913:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100916:	8b 40 0c             	mov    0xc(%eax),%eax
c0100919:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010091c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010091f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100922:	74 1b                	je     c010093f <rb_tree_successor+0x41>
        while (y->left != nil) {
c0100924:	eb 09                	jmp    c010092f <rb_tree_successor+0x31>
            y = y->left;
c0100926:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100929:	8b 40 08             	mov    0x8(%eax),%eax
c010092c:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (y->left != nil) {
c010092f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100932:	8b 40 08             	mov    0x8(%eax),%eax
c0100935:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0100938:	75 ec                	jne    c0100926 <rb_tree_successor+0x28>
        }
        return y;
c010093a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010093d:	eb 38                	jmp    c0100977 <rb_tree_successor+0x79>
    }
    else {
        y = x->parent;
c010093f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100942:	8b 40 04             	mov    0x4(%eax),%eax
c0100945:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (x == y->right) {
c0100948:	eb 0f                	jmp    c0100959 <rb_tree_successor+0x5b>
            x = y, y = y->parent;
c010094a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010094d:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100950:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100953:	8b 40 04             	mov    0x4(%eax),%eax
c0100956:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (x == y->right) {
c0100959:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010095c:	8b 40 0c             	mov    0xc(%eax),%eax
c010095f:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0100962:	74 e6                	je     c010094a <rb_tree_successor+0x4c>
        }
        if (y == tree->root) {
c0100964:	8b 45 08             	mov    0x8(%ebp),%eax
c0100967:	8b 40 08             	mov    0x8(%eax),%eax
c010096a:	39 45 f8             	cmp    %eax,-0x8(%ebp)
c010096d:	75 05                	jne    c0100974 <rb_tree_successor+0x76>
            return nil;
c010096f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100972:	eb 03                	jmp    c0100977 <rb_tree_successor+0x79>
        }
        return y;
c0100974:	8b 45 f8             	mov    -0x8(%ebp),%eax
    }
}
c0100977:	c9                   	leave  
c0100978:	c3                   	ret    

c0100979 <rb_tree_predecessor>:
/* *
 * rb_tree_predecessor - returns the predecessor of @node, or nil
 * if no predecessor exists, likes rb_tree_successor.
 * */
static inline rb_node *
rb_tree_predecessor(rb_tree *tree, rb_node *node) {
c0100979:	55                   	push   %ebp
c010097a:	89 e5                	mov    %esp,%ebp
c010097c:	83 ec 10             	sub    $0x10,%esp
    rb_node *x = node, *y, *nil = tree->nil;
c010097f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100982:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100985:	8b 45 08             	mov    0x8(%ebp),%eax
c0100988:	8b 40 04             	mov    0x4(%eax),%eax
c010098b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if ((y = x->left) != nil) {
c010098e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100991:	8b 40 08             	mov    0x8(%eax),%eax
c0100994:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0100997:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010099a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010099d:	74 1b                	je     c01009ba <rb_tree_predecessor+0x41>
        while (y->right != nil) {
c010099f:	eb 09                	jmp    c01009aa <rb_tree_predecessor+0x31>
            y = y->right;
c01009a1:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01009a4:	8b 40 0c             	mov    0xc(%eax),%eax
c01009a7:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (y->right != nil) {
c01009aa:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01009ad:	8b 40 0c             	mov    0xc(%eax),%eax
c01009b0:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c01009b3:	75 ec                	jne    c01009a1 <rb_tree_predecessor+0x28>
        }
        return y;
c01009b5:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01009b8:	eb 38                	jmp    c01009f2 <rb_tree_predecessor+0x79>
    }
    else {
        y = x->parent;
c01009ba:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01009bd:	8b 40 04             	mov    0x4(%eax),%eax
c01009c0:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (x == y->left) {
c01009c3:	eb 1f                	jmp    c01009e4 <rb_tree_predecessor+0x6b>
            if (y == tree->root) {
c01009c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01009c8:	8b 40 08             	mov    0x8(%eax),%eax
c01009cb:	39 45 f8             	cmp    %eax,-0x8(%ebp)
c01009ce:	75 05                	jne    c01009d5 <rb_tree_predecessor+0x5c>
                return nil;
c01009d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009d3:	eb 1d                	jmp    c01009f2 <rb_tree_predecessor+0x79>
            }
            x = y, y = y->parent;
c01009d5:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01009d8:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01009db:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01009de:	8b 40 04             	mov    0x4(%eax),%eax
c01009e1:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (x == y->left) {
c01009e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01009e7:	8b 40 08             	mov    0x8(%eax),%eax
c01009ea:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c01009ed:	74 d6                	je     c01009c5 <rb_tree_predecessor+0x4c>
        }
        return y;
c01009ef:	8b 45 f8             	mov    -0x8(%ebp),%eax
    }
}
c01009f2:	c9                   	leave  
c01009f3:	c3                   	ret    

c01009f4 <rb_search>:
 * rb_search - returns a node with value 'equal' to @key (according to
 * function @compare). If there're multiple nodes with value 'equal' to @key,
 * the functions returns the one highest in the tree.
 * */
rb_node *
rb_search(rb_tree *tree, int (*compare)(rb_node *node, void *key), void *key) {
c01009f4:	f3 0f 1e fb          	endbr32 
c01009f8:	55                   	push   %ebp
c01009f9:	89 e5                	mov    %esp,%ebp
c01009fb:	83 ec 18             	sub    $0x18,%esp
    rb_node *nil = tree->nil, *node = tree->root->left;
c01009fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a01:	8b 40 04             	mov    0x4(%eax),%eax
c0100a04:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100a07:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a0a:	8b 40 08             	mov    0x8(%eax),%eax
c0100a0d:	8b 40 08             	mov    0x8(%eax),%eax
c0100a10:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int r;
    while (node != nil && (r = compare(node, key)) != 0) {
c0100a13:	eb 17                	jmp    c0100a2c <rb_search+0x38>
        node = (r > 0) ? node->left : node->right;
c0100a15:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0100a19:	7e 08                	jle    c0100a23 <rb_search+0x2f>
c0100a1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a1e:	8b 40 08             	mov    0x8(%eax),%eax
c0100a21:	eb 06                	jmp    c0100a29 <rb_search+0x35>
c0100a23:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a26:	8b 40 0c             	mov    0xc(%eax),%eax
c0100a29:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (node != nil && (r = compare(node, key)) != 0) {
c0100a2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a2f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100a32:	74 1a                	je     c0100a4e <rb_search+0x5a>
c0100a34:	83 ec 08             	sub    $0x8,%esp
c0100a37:	ff 75 10             	pushl  0x10(%ebp)
c0100a3a:	ff 75 f4             	pushl  -0xc(%ebp)
c0100a3d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a40:	ff d0                	call   *%eax
c0100a42:	83 c4 10             	add    $0x10,%esp
c0100a45:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100a48:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0100a4c:	75 c7                	jne    c0100a15 <rb_search+0x21>
    }
    return (node != nil) ? node : NULL;
c0100a4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a51:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100a54:	74 05                	je     c0100a5b <rb_search+0x67>
c0100a56:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a59:	eb 05                	jmp    c0100a60 <rb_search+0x6c>
c0100a5b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100a60:	c9                   	leave  
c0100a61:	c3                   	ret    

c0100a62 <rb_delete_fixup>:
/* *
 * rb_delete_fixup - performs rotations and changes colors to restore
 * red-black properties after a node is deleted.
 * */
static void
rb_delete_fixup(rb_tree *tree, rb_node *node) {
c0100a62:	f3 0f 1e fb          	endbr32 
c0100a66:	55                   	push   %ebp
c0100a67:	89 e5                	mov    %esp,%ebp
c0100a69:	83 ec 18             	sub    $0x18,%esp
    rb_node *x = node, *w, *root = tree->root->left;
c0100a6c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100a72:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a75:	8b 40 08             	mov    0x8(%eax),%eax
c0100a78:	8b 40 08             	mov    0x8(%eax),%eax
c0100a7b:	89 45 ec             	mov    %eax,-0x14(%ebp)
            rb_##_left##_rotate(tree, x->parent);               \
            x = root;                                           \
        }                                                       \
    } while (0)

    while (x != root && !x->red) {
c0100a7e:	e9 04 02 00 00       	jmp    c0100c87 <rb_delete_fixup+0x225>
        if (x == x->parent->left) {
c0100a83:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a86:	8b 40 04             	mov    0x4(%eax),%eax
c0100a89:	8b 40 08             	mov    0x8(%eax),%eax
c0100a8c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0100a8f:	0f 85 fd 00 00 00    	jne    c0100b92 <rb_delete_fixup+0x130>
            RB_DELETE_FIXUP_SUB(left, right);
c0100a95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a98:	8b 40 04             	mov    0x4(%eax),%eax
c0100a9b:	8b 40 0c             	mov    0xc(%eax),%eax
c0100a9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100aa1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100aa4:	8b 00                	mov    (%eax),%eax
c0100aa6:	85 c0                	test   %eax,%eax
c0100aa8:	74 36                	je     c0100ae0 <rb_delete_fixup+0x7e>
c0100aaa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100aad:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100ab3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ab6:	8b 40 04             	mov    0x4(%eax),%eax
c0100ab9:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100abf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ac2:	8b 40 04             	mov    0x4(%eax),%eax
c0100ac5:	83 ec 08             	sub    $0x8,%esp
c0100ac8:	50                   	push   %eax
c0100ac9:	ff 75 08             	pushl  0x8(%ebp)
c0100acc:	e8 d5 f9 ff ff       	call   c01004a6 <rb_left_rotate>
c0100ad1:	83 c4 10             	add    $0x10,%esp
c0100ad4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ad7:	8b 40 04             	mov    0x4(%eax),%eax
c0100ada:	8b 40 0c             	mov    0xc(%eax),%eax
c0100add:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100ae0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100ae3:	8b 40 08             	mov    0x8(%eax),%eax
c0100ae6:	8b 00                	mov    (%eax),%eax
c0100ae8:	85 c0                	test   %eax,%eax
c0100aea:	75 23                	jne    c0100b0f <rb_delete_fixup+0xad>
c0100aec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100aef:	8b 40 0c             	mov    0xc(%eax),%eax
c0100af2:	8b 00                	mov    (%eax),%eax
c0100af4:	85 c0                	test   %eax,%eax
c0100af6:	75 17                	jne    c0100b0f <rb_delete_fixup+0xad>
c0100af8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100afb:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100b01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b04:	8b 40 04             	mov    0x4(%eax),%eax
c0100b07:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100b0a:	e9 78 01 00 00       	jmp    c0100c87 <rb_delete_fixup+0x225>
c0100b0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b12:	8b 40 0c             	mov    0xc(%eax),%eax
c0100b15:	8b 00                	mov    (%eax),%eax
c0100b17:	85 c0                	test   %eax,%eax
c0100b19:	75 32                	jne    c0100b4d <rb_delete_fixup+0xeb>
c0100b1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b1e:	8b 40 08             	mov    0x8(%eax),%eax
c0100b21:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100b27:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b2a:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100b30:	83 ec 08             	sub    $0x8,%esp
c0100b33:	ff 75 f0             	pushl  -0x10(%ebp)
c0100b36:	ff 75 08             	pushl  0x8(%ebp)
c0100b39:	e8 40 fa ff ff       	call   c010057e <rb_right_rotate>
c0100b3e:	83 c4 10             	add    $0x10,%esp
c0100b41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b44:	8b 40 04             	mov    0x4(%eax),%eax
c0100b47:	8b 40 0c             	mov    0xc(%eax),%eax
c0100b4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100b4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b50:	8b 40 04             	mov    0x4(%eax),%eax
c0100b53:	8b 10                	mov    (%eax),%edx
c0100b55:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b58:	89 10                	mov    %edx,(%eax)
c0100b5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b5d:	8b 40 04             	mov    0x4(%eax),%eax
c0100b60:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100b66:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b69:	8b 40 0c             	mov    0xc(%eax),%eax
c0100b6c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100b72:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b75:	8b 40 04             	mov    0x4(%eax),%eax
c0100b78:	83 ec 08             	sub    $0x8,%esp
c0100b7b:	50                   	push   %eax
c0100b7c:	ff 75 08             	pushl  0x8(%ebp)
c0100b7f:	e8 22 f9 ff ff       	call   c01004a6 <rb_left_rotate>
c0100b84:	83 c4 10             	add    $0x10,%esp
c0100b87:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100b8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100b8d:	e9 f5 00 00 00       	jmp    c0100c87 <rb_delete_fixup+0x225>
        }
        else {
            RB_DELETE_FIXUP_SUB(right, left);
c0100b92:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b95:	8b 40 04             	mov    0x4(%eax),%eax
c0100b98:	8b 40 08             	mov    0x8(%eax),%eax
c0100b9b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100b9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100ba1:	8b 00                	mov    (%eax),%eax
c0100ba3:	85 c0                	test   %eax,%eax
c0100ba5:	74 36                	je     c0100bdd <rb_delete_fixup+0x17b>
c0100ba7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100baa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100bb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bb3:	8b 40 04             	mov    0x4(%eax),%eax
c0100bb6:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100bbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bbf:	8b 40 04             	mov    0x4(%eax),%eax
c0100bc2:	83 ec 08             	sub    $0x8,%esp
c0100bc5:	50                   	push   %eax
c0100bc6:	ff 75 08             	pushl  0x8(%ebp)
c0100bc9:	e8 b0 f9 ff ff       	call   c010057e <rb_right_rotate>
c0100bce:	83 c4 10             	add    $0x10,%esp
c0100bd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bd4:	8b 40 04             	mov    0x4(%eax),%eax
c0100bd7:	8b 40 08             	mov    0x8(%eax),%eax
c0100bda:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100bdd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100be0:	8b 40 0c             	mov    0xc(%eax),%eax
c0100be3:	8b 00                	mov    (%eax),%eax
c0100be5:	85 c0                	test   %eax,%eax
c0100be7:	75 20                	jne    c0100c09 <rb_delete_fixup+0x1a7>
c0100be9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100bec:	8b 40 08             	mov    0x8(%eax),%eax
c0100bef:	8b 00                	mov    (%eax),%eax
c0100bf1:	85 c0                	test   %eax,%eax
c0100bf3:	75 14                	jne    c0100c09 <rb_delete_fixup+0x1a7>
c0100bf5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100bf8:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100bfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c01:	8b 40 04             	mov    0x4(%eax),%eax
c0100c04:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100c07:	eb 7e                	jmp    c0100c87 <rb_delete_fixup+0x225>
c0100c09:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100c0c:	8b 40 08             	mov    0x8(%eax),%eax
c0100c0f:	8b 00                	mov    (%eax),%eax
c0100c11:	85 c0                	test   %eax,%eax
c0100c13:	75 32                	jne    c0100c47 <rb_delete_fixup+0x1e5>
c0100c15:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100c18:	8b 40 0c             	mov    0xc(%eax),%eax
c0100c1b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100c21:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100c24:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100c2a:	83 ec 08             	sub    $0x8,%esp
c0100c2d:	ff 75 f0             	pushl  -0x10(%ebp)
c0100c30:	ff 75 08             	pushl  0x8(%ebp)
c0100c33:	e8 6e f8 ff ff       	call   c01004a6 <rb_left_rotate>
c0100c38:	83 c4 10             	add    $0x10,%esp
c0100c3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c3e:	8b 40 04             	mov    0x4(%eax),%eax
c0100c41:	8b 40 08             	mov    0x8(%eax),%eax
c0100c44:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100c47:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c4a:	8b 40 04             	mov    0x4(%eax),%eax
c0100c4d:	8b 10                	mov    (%eax),%edx
c0100c4f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100c52:	89 10                	mov    %edx,(%eax)
c0100c54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c57:	8b 40 04             	mov    0x4(%eax),%eax
c0100c5a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100c60:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100c63:	8b 40 08             	mov    0x8(%eax),%eax
c0100c66:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100c6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c6f:	8b 40 04             	mov    0x4(%eax),%eax
c0100c72:	83 ec 08             	sub    $0x8,%esp
c0100c75:	50                   	push   %eax
c0100c76:	ff 75 08             	pushl  0x8(%ebp)
c0100c79:	e8 00 f9 ff ff       	call   c010057e <rb_right_rotate>
c0100c7e:	83 c4 10             	add    $0x10,%esp
c0100c81:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100c84:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (x != root && !x->red) {
c0100c87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c8a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0100c8d:	74 0d                	je     c0100c9c <rb_delete_fixup+0x23a>
c0100c8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c92:	8b 00                	mov    (%eax),%eax
c0100c94:	85 c0                	test   %eax,%eax
c0100c96:	0f 84 e7 fd ff ff    	je     c0100a83 <rb_delete_fixup+0x21>
        }
    }
    x->red = 0;
c0100c9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c9f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

#undef RB_DELETE_FIXUP_SUB
}
c0100ca5:	90                   	nop
c0100ca6:	c9                   	leave  
c0100ca7:	c3                   	ret    

c0100ca8 <rb_delete>:
/* *
 * rb_delete - deletes @node from @tree, and calls rb_delete_fixup to
 * restore red-black properties.
 * */
void
rb_delete(rb_tree *tree, rb_node *node) {
c0100ca8:	f3 0f 1e fb          	endbr32 
c0100cac:	55                   	push   %ebp
c0100cad:	89 e5                	mov    %esp,%ebp
c0100caf:	83 ec 28             	sub    $0x28,%esp
    rb_node *x, *y, *z = node;
c0100cb2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100cb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    rb_node *nil = tree->nil, *root = tree->root;
c0100cb8:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cbb:	8b 40 04             	mov    0x4(%eax),%eax
c0100cbe:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100cc1:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cc4:	8b 40 08             	mov    0x8(%eax),%eax
c0100cc7:	89 45 ec             	mov    %eax,-0x14(%ebp)

    y = (z->left == nil || z->right == nil) ? z : rb_tree_successor(tree, z);
c0100cca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ccd:	8b 40 08             	mov    0x8(%eax),%eax
c0100cd0:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0100cd3:	74 1b                	je     c0100cf0 <rb_delete+0x48>
c0100cd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cd8:	8b 40 0c             	mov    0xc(%eax),%eax
c0100cdb:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0100cde:	74 10                	je     c0100cf0 <rb_delete+0x48>
c0100ce0:	ff 75 f4             	pushl  -0xc(%ebp)
c0100ce3:	ff 75 08             	pushl  0x8(%ebp)
c0100ce6:	e8 13 fc ff ff       	call   c01008fe <rb_tree_successor>
c0100ceb:	83 c4 08             	add    $0x8,%esp
c0100cee:	eb 03                	jmp    c0100cf3 <rb_delete+0x4b>
c0100cf0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cf3:	89 45 e8             	mov    %eax,-0x18(%ebp)
    x = (y->left != nil) ? y->left : y->right;
c0100cf6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100cf9:	8b 40 08             	mov    0x8(%eax),%eax
c0100cfc:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0100cff:	74 08                	je     c0100d09 <rb_delete+0x61>
c0100d01:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100d04:	8b 40 08             	mov    0x8(%eax),%eax
c0100d07:	eb 06                	jmp    c0100d0f <rb_delete+0x67>
c0100d09:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100d0c:	8b 40 0c             	mov    0xc(%eax),%eax
c0100d0f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    assert(y != root && y != nil);
c0100d12:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100d15:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0100d18:	74 08                	je     c0100d22 <rb_delete+0x7a>
c0100d1a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100d1d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100d20:	75 19                	jne    c0100d3b <rb_delete+0x93>
c0100d22:	68 80 cc 10 c0       	push   $0xc010cc80
c0100d27:	68 f8 cb 10 c0       	push   $0xc010cbf8
c0100d2c:	68 2f 01 00 00       	push   $0x12f
c0100d31:	68 0d cc 10 c0       	push   $0xc010cc0d
c0100d36:	e8 b3 0a 00 00       	call   c01017ee <__panic>

    x->parent = y->parent;
c0100d3b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100d3e:	8b 50 04             	mov    0x4(%eax),%edx
c0100d41:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100d44:	89 50 04             	mov    %edx,0x4(%eax)
    if (y == y->parent->left) {
c0100d47:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100d4a:	8b 40 04             	mov    0x4(%eax),%eax
c0100d4d:	8b 40 08             	mov    0x8(%eax),%eax
c0100d50:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0100d53:	75 0e                	jne    c0100d63 <rb_delete+0xbb>
        y->parent->left = x;
c0100d55:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100d58:	8b 40 04             	mov    0x4(%eax),%eax
c0100d5b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100d5e:	89 50 08             	mov    %edx,0x8(%eax)
c0100d61:	eb 0c                	jmp    c0100d6f <rb_delete+0xc7>
    }
    else {
        y->parent->right = x;
c0100d63:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100d66:	8b 40 04             	mov    0x4(%eax),%eax
c0100d69:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100d6c:	89 50 0c             	mov    %edx,0xc(%eax)
    }

    bool need_fixup = !(y->red);
c0100d6f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100d72:	8b 00                	mov    (%eax),%eax
c0100d74:	85 c0                	test   %eax,%eax
c0100d76:	0f 94 c0             	sete   %al
c0100d79:	0f b6 c0             	movzbl %al,%eax
c0100d7c:	89 45 e0             	mov    %eax,-0x20(%ebp)

    if (y != z) {
c0100d7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100d82:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100d85:	74 5c                	je     c0100de3 <rb_delete+0x13b>
        if (z == z->parent->left) {
c0100d87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d8a:	8b 40 04             	mov    0x4(%eax),%eax
c0100d8d:	8b 40 08             	mov    0x8(%eax),%eax
c0100d90:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0100d93:	75 0e                	jne    c0100da3 <rb_delete+0xfb>
            z->parent->left = y;
c0100d95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d98:	8b 40 04             	mov    0x4(%eax),%eax
c0100d9b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0100d9e:	89 50 08             	mov    %edx,0x8(%eax)
c0100da1:	eb 0c                	jmp    c0100daf <rb_delete+0x107>
        }
        else {
            z->parent->right = y;
c0100da3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100da6:	8b 40 04             	mov    0x4(%eax),%eax
c0100da9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0100dac:	89 50 0c             	mov    %edx,0xc(%eax)
        }
        z->left->parent = z->right->parent = y;
c0100daf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100db2:	8b 40 0c             	mov    0xc(%eax),%eax
c0100db5:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0100db8:	89 50 04             	mov    %edx,0x4(%eax)
c0100dbb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100dbe:	8b 52 08             	mov    0x8(%edx),%edx
c0100dc1:	8b 40 04             	mov    0x4(%eax),%eax
c0100dc4:	89 42 04             	mov    %eax,0x4(%edx)
        *y = *z;
c0100dc7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100dca:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100dcd:	8b 0a                	mov    (%edx),%ecx
c0100dcf:	89 08                	mov    %ecx,(%eax)
c0100dd1:	8b 4a 04             	mov    0x4(%edx),%ecx
c0100dd4:	89 48 04             	mov    %ecx,0x4(%eax)
c0100dd7:	8b 4a 08             	mov    0x8(%edx),%ecx
c0100dda:	89 48 08             	mov    %ecx,0x8(%eax)
c0100ddd:	8b 52 0c             	mov    0xc(%edx),%edx
c0100de0:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    if (need_fixup) {
c0100de3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0100de7:	74 11                	je     c0100dfa <rb_delete+0x152>
        rb_delete_fixup(tree, x);
c0100de9:	83 ec 08             	sub    $0x8,%esp
c0100dec:	ff 75 e4             	pushl  -0x1c(%ebp)
c0100def:	ff 75 08             	pushl  0x8(%ebp)
c0100df2:	e8 6b fc ff ff       	call   c0100a62 <rb_delete_fixup>
c0100df7:	83 c4 10             	add    $0x10,%esp
    }
}
c0100dfa:	90                   	nop
c0100dfb:	c9                   	leave  
c0100dfc:	c3                   	ret    

c0100dfd <rb_tree_destroy>:

/* rb_tree_destroy - destroy a tree and free memory */
void
rb_tree_destroy(rb_tree *tree) {
c0100dfd:	f3 0f 1e fb          	endbr32 
c0100e01:	55                   	push   %ebp
c0100e02:	89 e5                	mov    %esp,%ebp
c0100e04:	83 ec 08             	sub    $0x8,%esp
    kfree(tree->root);
c0100e07:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e0a:	8b 40 08             	mov    0x8(%eax),%eax
c0100e0d:	83 ec 0c             	sub    $0xc,%esp
c0100e10:	50                   	push   %eax
c0100e11:	e8 48 7a 00 00       	call   c010885e <kfree>
c0100e16:	83 c4 10             	add    $0x10,%esp
    kfree(tree->nil);
c0100e19:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e1c:	8b 40 04             	mov    0x4(%eax),%eax
c0100e1f:	83 ec 0c             	sub    $0xc,%esp
c0100e22:	50                   	push   %eax
c0100e23:	e8 36 7a 00 00       	call   c010885e <kfree>
c0100e28:	83 c4 10             	add    $0x10,%esp
    kfree(tree);
c0100e2b:	83 ec 0c             	sub    $0xc,%esp
c0100e2e:	ff 75 08             	pushl  0x8(%ebp)
c0100e31:	e8 28 7a 00 00       	call   c010885e <kfree>
c0100e36:	83 c4 10             	add    $0x10,%esp
}
c0100e39:	90                   	nop
c0100e3a:	c9                   	leave  
c0100e3b:	c3                   	ret    

c0100e3c <rb_node_prev>:
/* *
 * rb_node_prev - returns the predecessor node of @node in @tree,
 * or 'NULL' if no predecessor exists.
 * */
rb_node *
rb_node_prev(rb_tree *tree, rb_node *node) {
c0100e3c:	f3 0f 1e fb          	endbr32 
c0100e40:	55                   	push   %ebp
c0100e41:	89 e5                	mov    %esp,%ebp
c0100e43:	83 ec 10             	sub    $0x10,%esp
    rb_node *prev = rb_tree_predecessor(tree, node);
c0100e46:	ff 75 0c             	pushl  0xc(%ebp)
c0100e49:	ff 75 08             	pushl  0x8(%ebp)
c0100e4c:	e8 28 fb ff ff       	call   c0100979 <rb_tree_predecessor>
c0100e51:	83 c4 08             	add    $0x8,%esp
c0100e54:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (prev != tree->nil) ? prev : NULL;
c0100e57:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e5a:	8b 40 04             	mov    0x4(%eax),%eax
c0100e5d:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0100e60:	74 05                	je     c0100e67 <rb_node_prev+0x2b>
c0100e62:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100e65:	eb 05                	jmp    c0100e6c <rb_node_prev+0x30>
c0100e67:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e6c:	c9                   	leave  
c0100e6d:	c3                   	ret    

c0100e6e <rb_node_next>:
/* *
 * rb_node_next - returns the successor node of @node in @tree,
 * or 'NULL' if no successor exists.
 * */
rb_node *
rb_node_next(rb_tree *tree, rb_node *node) {
c0100e6e:	f3 0f 1e fb          	endbr32 
c0100e72:	55                   	push   %ebp
c0100e73:	89 e5                	mov    %esp,%ebp
c0100e75:	83 ec 10             	sub    $0x10,%esp
    rb_node *next = rb_tree_successor(tree, node);
c0100e78:	ff 75 0c             	pushl  0xc(%ebp)
c0100e7b:	ff 75 08             	pushl  0x8(%ebp)
c0100e7e:	e8 7b fa ff ff       	call   c01008fe <rb_tree_successor>
c0100e83:	83 c4 08             	add    $0x8,%esp
c0100e86:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (next != tree->nil) ? next : NULL;
c0100e89:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e8c:	8b 40 04             	mov    0x4(%eax),%eax
c0100e8f:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0100e92:	74 05                	je     c0100e99 <rb_node_next+0x2b>
c0100e94:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100e97:	eb 05                	jmp    c0100e9e <rb_node_next+0x30>
c0100e99:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e9e:	c9                   	leave  
c0100e9f:	c3                   	ret    

c0100ea0 <rb_node_root>:

/* rb_node_root - returns the root node of a @tree, or 'NULL' if tree is empty */
rb_node *
rb_node_root(rb_tree *tree) {
c0100ea0:	f3 0f 1e fb          	endbr32 
c0100ea4:	55                   	push   %ebp
c0100ea5:	89 e5                	mov    %esp,%ebp
c0100ea7:	83 ec 10             	sub    $0x10,%esp
    rb_node *node = tree->root->left;
c0100eaa:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ead:	8b 40 08             	mov    0x8(%eax),%eax
c0100eb0:	8b 40 08             	mov    0x8(%eax),%eax
c0100eb3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (node != tree->nil) ? node : NULL;
c0100eb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0100eb9:	8b 40 04             	mov    0x4(%eax),%eax
c0100ebc:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0100ebf:	74 05                	je     c0100ec6 <rb_node_root+0x26>
c0100ec1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100ec4:	eb 05                	jmp    c0100ecb <rb_node_root+0x2b>
c0100ec6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ecb:	c9                   	leave  
c0100ecc:	c3                   	ret    

c0100ecd <rb_node_left>:

/* rb_node_left - gets the left child of @node, or 'NULL' if no such node */
rb_node *
rb_node_left(rb_tree *tree, rb_node *node) {
c0100ecd:	f3 0f 1e fb          	endbr32 
c0100ed1:	55                   	push   %ebp
c0100ed2:	89 e5                	mov    %esp,%ebp
c0100ed4:	83 ec 10             	sub    $0x10,%esp
    rb_node *left = node->left;
c0100ed7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100eda:	8b 40 08             	mov    0x8(%eax),%eax
c0100edd:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (left != tree->nil) ? left : NULL;
c0100ee0:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ee3:	8b 40 04             	mov    0x4(%eax),%eax
c0100ee6:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0100ee9:	74 05                	je     c0100ef0 <rb_node_left+0x23>
c0100eeb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100eee:	eb 05                	jmp    c0100ef5 <rb_node_left+0x28>
c0100ef0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ef5:	c9                   	leave  
c0100ef6:	c3                   	ret    

c0100ef7 <rb_node_right>:

/* rb_node_right - gets the right child of @node, or 'NULL' if no such node */
rb_node *
rb_node_right(rb_tree *tree, rb_node *node) {
c0100ef7:	f3 0f 1e fb          	endbr32 
c0100efb:	55                   	push   %ebp
c0100efc:	89 e5                	mov    %esp,%ebp
c0100efe:	83 ec 10             	sub    $0x10,%esp
    rb_node *right = node->right;
c0100f01:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f04:	8b 40 0c             	mov    0xc(%eax),%eax
c0100f07:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (right != tree->nil) ? right : NULL;
c0100f0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0100f0d:	8b 40 04             	mov    0x4(%eax),%eax
c0100f10:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0100f13:	74 05                	je     c0100f1a <rb_node_right+0x23>
c0100f15:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100f18:	eb 05                	jmp    c0100f1f <rb_node_right+0x28>
c0100f1a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100f1f:	c9                   	leave  
c0100f20:	c3                   	ret    

c0100f21 <check_tree>:

int
check_tree(rb_tree *tree, rb_node *node) {
c0100f21:	f3 0f 1e fb          	endbr32 
c0100f25:	55                   	push   %ebp
c0100f26:	89 e5                	mov    %esp,%ebp
c0100f28:	83 ec 18             	sub    $0x18,%esp
    rb_node *nil = tree->nil;
c0100f2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0100f2e:	8b 40 04             	mov    0x4(%eax),%eax
c0100f31:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (node == nil) {
c0100f34:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f37:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100f3a:	75 2c                	jne    c0100f68 <check_tree+0x47>
        assert(!node->red);
c0100f3c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f3f:	8b 00                	mov    (%eax),%eax
c0100f41:	85 c0                	test   %eax,%eax
c0100f43:	74 19                	je     c0100f5e <check_tree+0x3d>
c0100f45:	68 96 cc 10 c0       	push   $0xc010cc96
c0100f4a:	68 f8 cb 10 c0       	push   $0xc010cbf8
c0100f4f:	68 7f 01 00 00       	push   $0x17f
c0100f54:	68 0d cc 10 c0       	push   $0xc010cc0d
c0100f59:	e8 90 08 00 00       	call   c01017ee <__panic>
        return 1;
c0100f5e:	b8 01 00 00 00       	mov    $0x1,%eax
c0100f63:	e9 6d 01 00 00       	jmp    c01010d5 <check_tree+0x1b4>
    }
    if (node->left != nil) {
c0100f68:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f6b:	8b 40 08             	mov    0x8(%eax),%eax
c0100f6e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0100f71:	74 5b                	je     c0100fce <check_tree+0xad>
        assert(COMPARE(tree, node, node->left) >= 0);
c0100f73:	8b 45 08             	mov    0x8(%ebp),%eax
c0100f76:	8b 00                	mov    (%eax),%eax
c0100f78:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100f7b:	8b 52 08             	mov    0x8(%edx),%edx
c0100f7e:	83 ec 08             	sub    $0x8,%esp
c0100f81:	52                   	push   %edx
c0100f82:	ff 75 0c             	pushl  0xc(%ebp)
c0100f85:	ff d0                	call   *%eax
c0100f87:	83 c4 10             	add    $0x10,%esp
c0100f8a:	85 c0                	test   %eax,%eax
c0100f8c:	79 19                	jns    c0100fa7 <check_tree+0x86>
c0100f8e:	68 a4 cc 10 c0       	push   $0xc010cca4
c0100f93:	68 f8 cb 10 c0       	push   $0xc010cbf8
c0100f98:	68 83 01 00 00       	push   $0x183
c0100f9d:	68 0d cc 10 c0       	push   $0xc010cc0d
c0100fa2:	e8 47 08 00 00       	call   c01017ee <__panic>
        assert(node->left->parent == node);
c0100fa7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100faa:	8b 40 08             	mov    0x8(%eax),%eax
c0100fad:	8b 40 04             	mov    0x4(%eax),%eax
c0100fb0:	39 45 0c             	cmp    %eax,0xc(%ebp)
c0100fb3:	74 19                	je     c0100fce <check_tree+0xad>
c0100fb5:	68 c9 cc 10 c0       	push   $0xc010ccc9
c0100fba:	68 f8 cb 10 c0       	push   $0xc010cbf8
c0100fbf:	68 84 01 00 00       	push   $0x184
c0100fc4:	68 0d cc 10 c0       	push   $0xc010cc0d
c0100fc9:	e8 20 08 00 00       	call   c01017ee <__panic>
    }
    if (node->right != nil) {
c0100fce:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100fd1:	8b 40 0c             	mov    0xc(%eax),%eax
c0100fd4:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0100fd7:	74 5b                	je     c0101034 <check_tree+0x113>
        assert(COMPARE(tree, node, node->right) <= 0);
c0100fd9:	8b 45 08             	mov    0x8(%ebp),%eax
c0100fdc:	8b 00                	mov    (%eax),%eax
c0100fde:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100fe1:	8b 52 0c             	mov    0xc(%edx),%edx
c0100fe4:	83 ec 08             	sub    $0x8,%esp
c0100fe7:	52                   	push   %edx
c0100fe8:	ff 75 0c             	pushl  0xc(%ebp)
c0100feb:	ff d0                	call   *%eax
c0100fed:	83 c4 10             	add    $0x10,%esp
c0100ff0:	85 c0                	test   %eax,%eax
c0100ff2:	7e 19                	jle    c010100d <check_tree+0xec>
c0100ff4:	68 e4 cc 10 c0       	push   $0xc010cce4
c0100ff9:	68 f8 cb 10 c0       	push   $0xc010cbf8
c0100ffe:	68 87 01 00 00       	push   $0x187
c0101003:	68 0d cc 10 c0       	push   $0xc010cc0d
c0101008:	e8 e1 07 00 00       	call   c01017ee <__panic>
        assert(node->right->parent == node);
c010100d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101010:	8b 40 0c             	mov    0xc(%eax),%eax
c0101013:	8b 40 04             	mov    0x4(%eax),%eax
c0101016:	39 45 0c             	cmp    %eax,0xc(%ebp)
c0101019:	74 19                	je     c0101034 <check_tree+0x113>
c010101b:	68 0a cd 10 c0       	push   $0xc010cd0a
c0101020:	68 f8 cb 10 c0       	push   $0xc010cbf8
c0101025:	68 88 01 00 00       	push   $0x188
c010102a:	68 0d cc 10 c0       	push   $0xc010cc0d
c010102f:	e8 ba 07 00 00       	call   c01017ee <__panic>
    }
    if (node->red) {
c0101034:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101037:	8b 00                	mov    (%eax),%eax
c0101039:	85 c0                	test   %eax,%eax
c010103b:	74 31                	je     c010106e <check_tree+0x14d>
        assert(!node->left->red && !node->right->red);
c010103d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101040:	8b 40 08             	mov    0x8(%eax),%eax
c0101043:	8b 00                	mov    (%eax),%eax
c0101045:	85 c0                	test   %eax,%eax
c0101047:	75 0c                	jne    c0101055 <check_tree+0x134>
c0101049:	8b 45 0c             	mov    0xc(%ebp),%eax
c010104c:	8b 40 0c             	mov    0xc(%eax),%eax
c010104f:	8b 00                	mov    (%eax),%eax
c0101051:	85 c0                	test   %eax,%eax
c0101053:	74 19                	je     c010106e <check_tree+0x14d>
c0101055:	68 28 cd 10 c0       	push   $0xc010cd28
c010105a:	68 f8 cb 10 c0       	push   $0xc010cbf8
c010105f:	68 8b 01 00 00       	push   $0x18b
c0101064:	68 0d cc 10 c0       	push   $0xc010cc0d
c0101069:	e8 80 07 00 00       	call   c01017ee <__panic>
    }
    int hb_left = check_tree(tree, node->left);
c010106e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101071:	8b 40 08             	mov    0x8(%eax),%eax
c0101074:	83 ec 08             	sub    $0x8,%esp
c0101077:	50                   	push   %eax
c0101078:	ff 75 08             	pushl  0x8(%ebp)
c010107b:	e8 a1 fe ff ff       	call   c0100f21 <check_tree>
c0101080:	83 c4 10             	add    $0x10,%esp
c0101083:	89 45 ec             	mov    %eax,-0x14(%ebp)
    int hb_right = check_tree(tree, node->right);
c0101086:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101089:	8b 40 0c             	mov    0xc(%eax),%eax
c010108c:	83 ec 08             	sub    $0x8,%esp
c010108f:	50                   	push   %eax
c0101090:	ff 75 08             	pushl  0x8(%ebp)
c0101093:	e8 89 fe ff ff       	call   c0100f21 <check_tree>
c0101098:	83 c4 10             	add    $0x10,%esp
c010109b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(hb_left == hb_right);
c010109e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01010a1:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01010a4:	74 19                	je     c01010bf <check_tree+0x19e>
c01010a6:	68 4e cd 10 c0       	push   $0xc010cd4e
c01010ab:	68 f8 cb 10 c0       	push   $0xc010cbf8
c01010b0:	68 8f 01 00 00       	push   $0x18f
c01010b5:	68 0d cc 10 c0       	push   $0xc010cc0d
c01010ba:	e8 2f 07 00 00       	call   c01017ee <__panic>
    int hb = hb_left;
c01010bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01010c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!node->red) {
c01010c5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01010c8:	8b 00                	mov    (%eax),%eax
c01010ca:	85 c0                	test   %eax,%eax
c01010cc:	75 04                	jne    c01010d2 <check_tree+0x1b1>
        hb ++;
c01010ce:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
    }
    return hb;
c01010d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01010d5:	c9                   	leave  
c01010d6:	c3                   	ret    

c01010d7 <check_safe_kmalloc>:

static void *
check_safe_kmalloc(size_t size) {
c01010d7:	f3 0f 1e fb          	endbr32 
c01010db:	55                   	push   %ebp
c01010dc:	89 e5                	mov    %esp,%ebp
c01010de:	83 ec 18             	sub    $0x18,%esp
    void *ret = kmalloc(size);
c01010e1:	83 ec 0c             	sub    $0xc,%esp
c01010e4:	ff 75 08             	pushl  0x8(%ebp)
c01010e7:	e8 56 77 00 00       	call   c0108842 <kmalloc>
c01010ec:	83 c4 10             	add    $0x10,%esp
c01010ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(ret != NULL);
c01010f2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01010f6:	75 19                	jne    c0101111 <check_safe_kmalloc+0x3a>
c01010f8:	68 62 cd 10 c0       	push   $0xc010cd62
c01010fd:	68 f8 cb 10 c0       	push   $0xc010cbf8
c0101102:	68 9a 01 00 00       	push   $0x19a
c0101107:	68 0d cc 10 c0       	push   $0xc010cc0d
c010110c:	e8 dd 06 00 00       	call   c01017ee <__panic>
    return ret;
c0101111:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101114:	c9                   	leave  
c0101115:	c3                   	ret    

c0101116 <check_compare1>:

#define rbn2data(node)              \
    (to_struct(node, struct check_data, rb_link))

static inline int
check_compare1(rb_node *node1, rb_node *node2) {
c0101116:	f3 0f 1e fb          	endbr32 
c010111a:	55                   	push   %ebp
c010111b:	89 e5                	mov    %esp,%ebp
    return rbn2data(node1)->data - rbn2data(node2)->data;
c010111d:	8b 45 08             	mov    0x8(%ebp),%eax
c0101120:	83 e8 04             	sub    $0x4,%eax
c0101123:	8b 10                	mov    (%eax),%edx
c0101125:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101128:	83 e8 04             	sub    $0x4,%eax
c010112b:	8b 00                	mov    (%eax),%eax
c010112d:	29 c2                	sub    %eax,%edx
c010112f:	89 d0                	mov    %edx,%eax
}
c0101131:	5d                   	pop    %ebp
c0101132:	c3                   	ret    

c0101133 <check_compare2>:

static inline int
check_compare2(rb_node *node, void *key) {
c0101133:	f3 0f 1e fb          	endbr32 
c0101137:	55                   	push   %ebp
c0101138:	89 e5                	mov    %esp,%ebp
    return rbn2data(node)->data - (long)key;
c010113a:	8b 45 08             	mov    0x8(%ebp),%eax
c010113d:	83 e8 04             	sub    $0x4,%eax
c0101140:	8b 10                	mov    (%eax),%edx
c0101142:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101145:	29 c2                	sub    %eax,%edx
c0101147:	89 d0                	mov    %edx,%eax
}
c0101149:	5d                   	pop    %ebp
c010114a:	c3                   	ret    

c010114b <check_rb_tree>:

void
check_rb_tree(void) {
c010114b:	f3 0f 1e fb          	endbr32 
c010114f:	55                   	push   %ebp
c0101150:	89 e5                	mov    %esp,%ebp
c0101152:	53                   	push   %ebx
c0101153:	83 ec 34             	sub    $0x34,%esp
    rb_tree *tree = rb_tree_create(check_compare1);
c0101156:	83 ec 0c             	sub    $0xc,%esp
c0101159:	68 16 11 10 c0       	push   $0xc0101116
c010115e:	e8 42 f2 ff ff       	call   c01003a5 <rb_tree_create>
c0101163:	83 c4 10             	add    $0x10,%esp
c0101166:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(tree != NULL);
c0101169:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010116d:	75 19                	jne    c0101188 <check_rb_tree+0x3d>
c010116f:	68 6e cd 10 c0       	push   $0xc010cd6e
c0101174:	68 f8 cb 10 c0       	push   $0xc010cbf8
c0101179:	68 b3 01 00 00       	push   $0x1b3
c010117e:	68 0d cc 10 c0       	push   $0xc010cc0d
c0101183:	e8 66 06 00 00       	call   c01017ee <__panic>

    rb_node *nil = tree->nil, *root = tree->root;
c0101188:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010118b:	8b 40 04             	mov    0x4(%eax),%eax
c010118e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0101191:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101194:	8b 40 08             	mov    0x8(%eax),%eax
c0101197:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(!nil->red && root->left == nil);
c010119a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010119d:	8b 00                	mov    (%eax),%eax
c010119f:	85 c0                	test   %eax,%eax
c01011a1:	75 0b                	jne    c01011ae <check_rb_tree+0x63>
c01011a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01011a6:	8b 40 08             	mov    0x8(%eax),%eax
c01011a9:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c01011ac:	74 19                	je     c01011c7 <check_rb_tree+0x7c>
c01011ae:	68 7c cd 10 c0       	push   $0xc010cd7c
c01011b3:	68 f8 cb 10 c0       	push   $0xc010cbf8
c01011b8:	68 b6 01 00 00       	push   $0x1b6
c01011bd:	68 0d cc 10 c0       	push   $0xc010cc0d
c01011c2:	e8 27 06 00 00       	call   c01017ee <__panic>

    int total = 1000;
c01011c7:	c7 45 e0 e8 03 00 00 	movl   $0x3e8,-0x20(%ebp)
    struct check_data **all = check_safe_kmalloc(sizeof(struct check_data *) * total);
c01011ce:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01011d1:	c1 e0 02             	shl    $0x2,%eax
c01011d4:	83 ec 0c             	sub    $0xc,%esp
c01011d7:	50                   	push   %eax
c01011d8:	e8 fa fe ff ff       	call   c01010d7 <check_safe_kmalloc>
c01011dd:	83 c4 10             	add    $0x10,%esp
c01011e0:	89 45 dc             	mov    %eax,-0x24(%ebp)

    long i;
    for (i = 0; i < total; i ++) {
c01011e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01011ea:	eb 39                	jmp    c0101225 <check_rb_tree+0xda>
        all[i] = check_safe_kmalloc(sizeof(struct check_data));
c01011ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01011ef:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01011f6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01011f9:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
c01011fc:	83 ec 0c             	sub    $0xc,%esp
c01011ff:	6a 14                	push   $0x14
c0101201:	e8 d1 fe ff ff       	call   c01010d7 <check_safe_kmalloc>
c0101206:	83 c4 10             	add    $0x10,%esp
c0101209:	89 03                	mov    %eax,(%ebx)
        all[i]->data = i;
c010120b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010120e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101215:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101218:	01 d0                	add    %edx,%eax
c010121a:	8b 00                	mov    (%eax),%eax
c010121c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010121f:	89 10                	mov    %edx,(%eax)
    for (i = 0; i < total; i ++) {
c0101221:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101225:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101228:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010122b:	7c bf                	jl     c01011ec <check_rb_tree+0xa1>
    }

    int *mark = check_safe_kmalloc(sizeof(int) * total);
c010122d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101230:	c1 e0 02             	shl    $0x2,%eax
c0101233:	83 ec 0c             	sub    $0xc,%esp
c0101236:	50                   	push   %eax
c0101237:	e8 9b fe ff ff       	call   c01010d7 <check_safe_kmalloc>
c010123c:	83 c4 10             	add    $0x10,%esp
c010123f:	89 45 d8             	mov    %eax,-0x28(%ebp)
    memset(mark, 0, sizeof(int) * total);
c0101242:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101245:	c1 e0 02             	shl    $0x2,%eax
c0101248:	83 ec 04             	sub    $0x4,%esp
c010124b:	50                   	push   %eax
c010124c:	6a 00                	push   $0x0
c010124e:	ff 75 d8             	pushl  -0x28(%ebp)
c0101251:	e8 0c b0 00 00       	call   c010c262 <memset>
c0101256:	83 c4 10             	add    $0x10,%esp

    for (i = 0; i < total; i ++) {
c0101259:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101260:	eb 29                	jmp    c010128b <check_rb_tree+0x140>
        mark[all[i]->data] = 1;
c0101262:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101265:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010126c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010126f:	01 d0                	add    %edx,%eax
c0101271:	8b 00                	mov    (%eax),%eax
c0101273:	8b 00                	mov    (%eax),%eax
c0101275:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010127c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010127f:	01 d0                	add    %edx,%eax
c0101281:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    for (i = 0; i < total; i ++) {
c0101287:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010128b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010128e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0101291:	7c cf                	jl     c0101262 <check_rb_tree+0x117>
    }
    for (i = 0; i < total; i ++) {
c0101293:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010129a:	eb 33                	jmp    c01012cf <check_rb_tree+0x184>
        assert(mark[i] == 1);
c010129c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010129f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01012a6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01012a9:	01 d0                	add    %edx,%eax
c01012ab:	8b 00                	mov    (%eax),%eax
c01012ad:	83 f8 01             	cmp    $0x1,%eax
c01012b0:	74 19                	je     c01012cb <check_rb_tree+0x180>
c01012b2:	68 9b cd 10 c0       	push   $0xc010cd9b
c01012b7:	68 f8 cb 10 c0       	push   $0xc010cbf8
c01012bc:	68 c8 01 00 00       	push   $0x1c8
c01012c1:	68 0d cc 10 c0       	push   $0xc010cc0d
c01012c6:	e8 23 05 00 00       	call   c01017ee <__panic>
    for (i = 0; i < total; i ++) {
c01012cb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01012cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01012d2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01012d5:	7c c5                	jl     c010129c <check_rb_tree+0x151>
    }

    for (i = 0; i < total; i ++) {
c01012d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01012de:	eb 66                	jmp    c0101346 <check_rb_tree+0x1fb>
        int j = (rand() % (total - i)) + i;
c01012e0:	e8 67 b7 00 00       	call   c010ca4c <rand>
c01012e5:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01012e8:	89 d1                	mov    %edx,%ecx
c01012ea:	2b 4d f4             	sub    -0xc(%ebp),%ecx
c01012ed:	99                   	cltd   
c01012ee:	f7 f9                	idiv   %ecx
c01012f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01012f3:	01 d0                	add    %edx,%eax
c01012f5:	89 45 d0             	mov    %eax,-0x30(%ebp)
        struct check_data *z = all[i];
c01012f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01012fb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101302:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101305:	01 d0                	add    %edx,%eax
c0101307:	8b 00                	mov    (%eax),%eax
c0101309:	89 45 cc             	mov    %eax,-0x34(%ebp)
        all[i] = all[j];
c010130c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010130f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101316:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101319:	01 d0                	add    %edx,%eax
c010131b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010131e:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
c0101325:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101328:	01 ca                	add    %ecx,%edx
c010132a:	8b 00                	mov    (%eax),%eax
c010132c:	89 02                	mov    %eax,(%edx)
        all[j] = z;
c010132e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0101331:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101338:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010133b:	01 c2                	add    %eax,%edx
c010133d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101340:	89 02                	mov    %eax,(%edx)
    for (i = 0; i < total; i ++) {
c0101342:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101346:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101349:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010134c:	7c 92                	jl     c01012e0 <check_rb_tree+0x195>
    }

    memset(mark, 0, sizeof(int) * total);
c010134e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101351:	c1 e0 02             	shl    $0x2,%eax
c0101354:	83 ec 04             	sub    $0x4,%esp
c0101357:	50                   	push   %eax
c0101358:	6a 00                	push   $0x0
c010135a:	ff 75 d8             	pushl  -0x28(%ebp)
c010135d:	e8 00 af 00 00       	call   c010c262 <memset>
c0101362:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < total; i ++) {
c0101365:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010136c:	eb 29                	jmp    c0101397 <check_rb_tree+0x24c>
        mark[all[i]->data] = 1;
c010136e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101371:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101378:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010137b:	01 d0                	add    %edx,%eax
c010137d:	8b 00                	mov    (%eax),%eax
c010137f:	8b 00                	mov    (%eax),%eax
c0101381:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101388:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010138b:	01 d0                	add    %edx,%eax
c010138d:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    for (i = 0; i < total; i ++) {
c0101393:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101397:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010139a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010139d:	7c cf                	jl     c010136e <check_rb_tree+0x223>
    }
    for (i = 0; i < total; i ++) {
c010139f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01013a6:	eb 33                	jmp    c01013db <check_rb_tree+0x290>
        assert(mark[i] == 1);
c01013a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01013ab:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01013b2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01013b5:	01 d0                	add    %edx,%eax
c01013b7:	8b 00                	mov    (%eax),%eax
c01013b9:	83 f8 01             	cmp    $0x1,%eax
c01013bc:	74 19                	je     c01013d7 <check_rb_tree+0x28c>
c01013be:	68 9b cd 10 c0       	push   $0xc010cd9b
c01013c3:	68 f8 cb 10 c0       	push   $0xc010cbf8
c01013c8:	68 d7 01 00 00       	push   $0x1d7
c01013cd:	68 0d cc 10 c0       	push   $0xc010cc0d
c01013d2:	e8 17 04 00 00       	call   c01017ee <__panic>
    for (i = 0; i < total; i ++) {
c01013d7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01013db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01013de:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01013e1:	7c c5                	jl     c01013a8 <check_rb_tree+0x25d>
    }

    for (i = 0; i < total; i ++) {
c01013e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01013ea:	eb 3c                	jmp    c0101428 <check_rb_tree+0x2dd>
        rb_insert(tree, &(all[i]->rb_link));
c01013ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01013ef:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01013f6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01013f9:	01 d0                	add    %edx,%eax
c01013fb:	8b 00                	mov    (%eax),%eax
c01013fd:	83 c0 04             	add    $0x4,%eax
c0101400:	83 ec 08             	sub    $0x8,%esp
c0101403:	50                   	push   %eax
c0101404:	ff 75 ec             	pushl  -0x14(%ebp)
c0101407:	e8 04 f3 ff ff       	call   c0100710 <rb_insert>
c010140c:	83 c4 10             	add    $0x10,%esp
        check_tree(tree, root->left);
c010140f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101412:	8b 40 08             	mov    0x8(%eax),%eax
c0101415:	83 ec 08             	sub    $0x8,%esp
c0101418:	50                   	push   %eax
c0101419:	ff 75 ec             	pushl  -0x14(%ebp)
c010141c:	e8 00 fb ff ff       	call   c0100f21 <check_tree>
c0101421:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < total; i ++) {
c0101424:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101428:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010142b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010142e:	7c bc                	jl     c01013ec <check_rb_tree+0x2a1>
    }

    rb_node *node;
    for (i = 0; i < total; i ++) {
c0101430:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101437:	eb 66                	jmp    c010149f <check_rb_tree+0x354>
        node = rb_search(tree, check_compare2, (void *)(all[i]->data));
c0101439:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010143c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101443:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101446:	01 d0                	add    %edx,%eax
c0101448:	8b 00                	mov    (%eax),%eax
c010144a:	8b 00                	mov    (%eax),%eax
c010144c:	83 ec 04             	sub    $0x4,%esp
c010144f:	50                   	push   %eax
c0101450:	68 33 11 10 c0       	push   $0xc0101133
c0101455:	ff 75 ec             	pushl  -0x14(%ebp)
c0101458:	e8 97 f5 ff ff       	call   c01009f4 <rb_search>
c010145d:	83 c4 10             	add    $0x10,%esp
c0101460:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(node != NULL && node == &(all[i]->rb_link));
c0101463:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0101467:	74 19                	je     c0101482 <check_rb_tree+0x337>
c0101469:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010146c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101473:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101476:	01 d0                	add    %edx,%eax
c0101478:	8b 00                	mov    (%eax),%eax
c010147a:	83 c0 04             	add    $0x4,%eax
c010147d:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
c0101480:	74 19                	je     c010149b <check_rb_tree+0x350>
c0101482:	68 a8 cd 10 c0       	push   $0xc010cda8
c0101487:	68 f8 cb 10 c0       	push   $0xc010cbf8
c010148c:	68 e2 01 00 00       	push   $0x1e2
c0101491:	68 0d cc 10 c0       	push   $0xc010cc0d
c0101496:	e8 53 03 00 00       	call   c01017ee <__panic>
    for (i = 0; i < total; i ++) {
c010149b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010149f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01014a2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01014a5:	7c 92                	jl     c0101439 <check_rb_tree+0x2ee>
    }

    for (i = 0; i < total; i ++) {
c01014a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01014ae:	eb 70                	jmp    c0101520 <check_rb_tree+0x3d5>
        node = rb_search(tree, check_compare2, (void *)i);
c01014b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01014b3:	83 ec 04             	sub    $0x4,%esp
c01014b6:	50                   	push   %eax
c01014b7:	68 33 11 10 c0       	push   $0xc0101133
c01014bc:	ff 75 ec             	pushl  -0x14(%ebp)
c01014bf:	e8 30 f5 ff ff       	call   c01009f4 <rb_search>
c01014c4:	83 c4 10             	add    $0x10,%esp
c01014c7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(node != NULL && rbn2data(node)->data == i);
c01014ca:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c01014ce:	74 0d                	je     c01014dd <check_rb_tree+0x392>
c01014d0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01014d3:	83 e8 04             	sub    $0x4,%eax
c01014d6:	8b 00                	mov    (%eax),%eax
c01014d8:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c01014db:	74 19                	je     c01014f6 <check_rb_tree+0x3ab>
c01014dd:	68 d4 cd 10 c0       	push   $0xc010cdd4
c01014e2:	68 f8 cb 10 c0       	push   $0xc010cbf8
c01014e7:	68 e7 01 00 00       	push   $0x1e7
c01014ec:	68 0d cc 10 c0       	push   $0xc010cc0d
c01014f1:	e8 f8 02 00 00       	call   c01017ee <__panic>
        rb_delete(tree, node);
c01014f6:	83 ec 08             	sub    $0x8,%esp
c01014f9:	ff 75 d4             	pushl  -0x2c(%ebp)
c01014fc:	ff 75 ec             	pushl  -0x14(%ebp)
c01014ff:	e8 a4 f7 ff ff       	call   c0100ca8 <rb_delete>
c0101504:	83 c4 10             	add    $0x10,%esp
        check_tree(tree, root->left);
c0101507:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010150a:	8b 40 08             	mov    0x8(%eax),%eax
c010150d:	83 ec 08             	sub    $0x8,%esp
c0101510:	50                   	push   %eax
c0101511:	ff 75 ec             	pushl  -0x14(%ebp)
c0101514:	e8 08 fa ff ff       	call   c0100f21 <check_tree>
c0101519:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < total; i ++) {
c010151c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101520:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101523:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0101526:	7c 88                	jl     c01014b0 <check_rb_tree+0x365>
    }

    assert(!nil->red && root->left == nil);
c0101528:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010152b:	8b 00                	mov    (%eax),%eax
c010152d:	85 c0                	test   %eax,%eax
c010152f:	75 0b                	jne    c010153c <check_rb_tree+0x3f1>
c0101531:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101534:	8b 40 08             	mov    0x8(%eax),%eax
c0101537:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010153a:	74 19                	je     c0101555 <check_rb_tree+0x40a>
c010153c:	68 7c cd 10 c0       	push   $0xc010cd7c
c0101541:	68 f8 cb 10 c0       	push   $0xc010cbf8
c0101546:	68 ec 01 00 00       	push   $0x1ec
c010154b:	68 0d cc 10 c0       	push   $0xc010cc0d
c0101550:	e8 99 02 00 00       	call   c01017ee <__panic>

    long max = 32;
c0101555:	c7 45 f0 20 00 00 00 	movl   $0x20,-0x10(%ebp)
    if (max > total) {
c010155c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010155f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0101562:	7e 06                	jle    c010156a <check_rb_tree+0x41f>
        max = total;
c0101564:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101567:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    for (i = 0; i < max; i ++) {
c010156a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101571:	eb 52                	jmp    c01015c5 <check_rb_tree+0x47a>
        all[i]->data = max;
c0101573:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101576:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010157d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101580:	01 d0                	add    %edx,%eax
c0101582:	8b 00                	mov    (%eax),%eax
c0101584:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0101587:	89 10                	mov    %edx,(%eax)
        rb_insert(tree, &(all[i]->rb_link));
c0101589:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010158c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101593:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101596:	01 d0                	add    %edx,%eax
c0101598:	8b 00                	mov    (%eax),%eax
c010159a:	83 c0 04             	add    $0x4,%eax
c010159d:	83 ec 08             	sub    $0x8,%esp
c01015a0:	50                   	push   %eax
c01015a1:	ff 75 ec             	pushl  -0x14(%ebp)
c01015a4:	e8 67 f1 ff ff       	call   c0100710 <rb_insert>
c01015a9:	83 c4 10             	add    $0x10,%esp
        check_tree(tree, root->left);
c01015ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01015af:	8b 40 08             	mov    0x8(%eax),%eax
c01015b2:	83 ec 08             	sub    $0x8,%esp
c01015b5:	50                   	push   %eax
c01015b6:	ff 75 ec             	pushl  -0x14(%ebp)
c01015b9:	e8 63 f9 ff ff       	call   c0100f21 <check_tree>
c01015be:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < max; i ++) {
c01015c1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01015c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01015c8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01015cb:	7c a6                	jl     c0101573 <check_rb_tree+0x428>
    }

    for (i = 0; i < max; i ++) {
c01015cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01015d4:	eb 70                	jmp    c0101646 <check_rb_tree+0x4fb>
        node = rb_search(tree, check_compare2, (void *)max);
c01015d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01015d9:	83 ec 04             	sub    $0x4,%esp
c01015dc:	50                   	push   %eax
c01015dd:	68 33 11 10 c0       	push   $0xc0101133
c01015e2:	ff 75 ec             	pushl  -0x14(%ebp)
c01015e5:	e8 0a f4 ff ff       	call   c01009f4 <rb_search>
c01015ea:	83 c4 10             	add    $0x10,%esp
c01015ed:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(node != NULL && rbn2data(node)->data == max);
c01015f0:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c01015f4:	74 0d                	je     c0101603 <check_rb_tree+0x4b8>
c01015f6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01015f9:	83 e8 04             	sub    $0x4,%eax
c01015fc:	8b 00                	mov    (%eax),%eax
c01015fe:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0101601:	74 19                	je     c010161c <check_rb_tree+0x4d1>
c0101603:	68 00 ce 10 c0       	push   $0xc010ce00
c0101608:	68 f8 cb 10 c0       	push   $0xc010cbf8
c010160d:	68 fb 01 00 00       	push   $0x1fb
c0101612:	68 0d cc 10 c0       	push   $0xc010cc0d
c0101617:	e8 d2 01 00 00       	call   c01017ee <__panic>
        rb_delete(tree, node);
c010161c:	83 ec 08             	sub    $0x8,%esp
c010161f:	ff 75 d4             	pushl  -0x2c(%ebp)
c0101622:	ff 75 ec             	pushl  -0x14(%ebp)
c0101625:	e8 7e f6 ff ff       	call   c0100ca8 <rb_delete>
c010162a:	83 c4 10             	add    $0x10,%esp
        check_tree(tree, root->left);
c010162d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101630:	8b 40 08             	mov    0x8(%eax),%eax
c0101633:	83 ec 08             	sub    $0x8,%esp
c0101636:	50                   	push   %eax
c0101637:	ff 75 ec             	pushl  -0x14(%ebp)
c010163a:	e8 e2 f8 ff ff       	call   c0100f21 <check_tree>
c010163f:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < max; i ++) {
c0101642:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101646:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101649:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010164c:	7c 88                	jl     c01015d6 <check_rb_tree+0x48b>
    }

    assert(rb_tree_empty(tree));
c010164e:	83 ec 0c             	sub    $0xc,%esp
c0101651:	ff 75 ec             	pushl  -0x14(%ebp)
c0101654:	e8 23 ed ff ff       	call   c010037c <rb_tree_empty>
c0101659:	83 c4 10             	add    $0x10,%esp
c010165c:	85 c0                	test   %eax,%eax
c010165e:	75 19                	jne    c0101679 <check_rb_tree+0x52e>
c0101660:	68 2c ce 10 c0       	push   $0xc010ce2c
c0101665:	68 f8 cb 10 c0       	push   $0xc010cbf8
c010166a:	68 00 02 00 00       	push   $0x200
c010166f:	68 0d cc 10 c0       	push   $0xc010cc0d
c0101674:	e8 75 01 00 00       	call   c01017ee <__panic>

    for (i = 0; i < total; i ++) {
c0101679:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101680:	eb 3c                	jmp    c01016be <check_rb_tree+0x573>
        rb_insert(tree, &(all[i]->rb_link));
c0101682:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101685:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010168c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010168f:	01 d0                	add    %edx,%eax
c0101691:	8b 00                	mov    (%eax),%eax
c0101693:	83 c0 04             	add    $0x4,%eax
c0101696:	83 ec 08             	sub    $0x8,%esp
c0101699:	50                   	push   %eax
c010169a:	ff 75 ec             	pushl  -0x14(%ebp)
c010169d:	e8 6e f0 ff ff       	call   c0100710 <rb_insert>
c01016a2:	83 c4 10             	add    $0x10,%esp
        check_tree(tree, root->left);
c01016a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01016a8:	8b 40 08             	mov    0x8(%eax),%eax
c01016ab:	83 ec 08             	sub    $0x8,%esp
c01016ae:	50                   	push   %eax
c01016af:	ff 75 ec             	pushl  -0x14(%ebp)
c01016b2:	e8 6a f8 ff ff       	call   c0100f21 <check_tree>
c01016b7:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < total; i ++) {
c01016ba:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01016be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01016c1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01016c4:	7c bc                	jl     c0101682 <check_rb_tree+0x537>
    }

    rb_tree_destroy(tree);
c01016c6:	83 ec 0c             	sub    $0xc,%esp
c01016c9:	ff 75 ec             	pushl  -0x14(%ebp)
c01016cc:	e8 2c f7 ff ff       	call   c0100dfd <rb_tree_destroy>
c01016d1:	83 c4 10             	add    $0x10,%esp

    for (i = 0; i < total; i ++) {
c01016d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01016db:	eb 21                	jmp    c01016fe <check_rb_tree+0x5b3>
        kfree(all[i]);
c01016dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01016e0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01016e7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01016ea:	01 d0                	add    %edx,%eax
c01016ec:	8b 00                	mov    (%eax),%eax
c01016ee:	83 ec 0c             	sub    $0xc,%esp
c01016f1:	50                   	push   %eax
c01016f2:	e8 67 71 00 00       	call   c010885e <kfree>
c01016f7:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < total; i ++) {
c01016fa:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01016fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101701:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0101704:	7c d7                	jl     c01016dd <check_rb_tree+0x592>
    }

    kfree(mark);
c0101706:	83 ec 0c             	sub    $0xc,%esp
c0101709:	ff 75 d8             	pushl  -0x28(%ebp)
c010170c:	e8 4d 71 00 00       	call   c010885e <kfree>
c0101711:	83 c4 10             	add    $0x10,%esp
    kfree(all);
c0101714:	83 ec 0c             	sub    $0xc,%esp
c0101717:	ff 75 dc             	pushl  -0x24(%ebp)
c010171a:	e8 3f 71 00 00       	call   c010885e <kfree>
c010171f:	83 c4 10             	add    $0x10,%esp
}
c0101722:	90                   	nop
c0101723:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0101726:	c9                   	leave  
c0101727:	c3                   	ret    

c0101728 <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c0101728:	f3 0f 1e fb          	endbr32 
c010172c:	55                   	push   %ebp
c010172d:	89 e5                	mov    %esp,%ebp
c010172f:	83 ec 18             	sub    $0x18,%esp
    if (prompt != NULL) {
c0101732:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0101736:	74 13                	je     c010174b <readline+0x23>
        cprintf("%s", prompt);
c0101738:	83 ec 08             	sub    $0x8,%esp
c010173b:	ff 75 08             	pushl  0x8(%ebp)
c010173e:	68 40 ce 10 c0       	push   $0xc010ce40
c0101743:	e8 6a eb ff ff       	call   c01002b2 <cprintf>
c0101748:	83 c4 10             	add    $0x10,%esp
    }
    int i = 0, c;
c010174b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c0101752:	e8 f2 eb ff ff       	call   c0100349 <getchar>
c0101757:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c010175a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010175e:	79 0a                	jns    c010176a <readline+0x42>
            return NULL;
c0101760:	b8 00 00 00 00       	mov    $0x0,%eax
c0101765:	e9 82 00 00 00       	jmp    c01017ec <readline+0xc4>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c010176a:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c010176e:	7e 2b                	jle    c010179b <readline+0x73>
c0101770:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c0101777:	7f 22                	jg     c010179b <readline+0x73>
            cputchar(c);
c0101779:	83 ec 0c             	sub    $0xc,%esp
c010177c:	ff 75 f0             	pushl  -0x10(%ebp)
c010177f:	e8 58 eb ff ff       	call   c01002dc <cputchar>
c0101784:	83 c4 10             	add    $0x10,%esp
            buf[i ++] = c;
c0101787:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010178a:	8d 50 01             	lea    0x1(%eax),%edx
c010178d:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0101790:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0101793:	88 90 20 50 1b c0    	mov    %dl,-0x3fe4afe0(%eax)
c0101799:	eb 4c                	jmp    c01017e7 <readline+0xbf>
        }
        else if (c == '\b' && i > 0) {
c010179b:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c010179f:	75 1a                	jne    c01017bb <readline+0x93>
c01017a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01017a5:	7e 14                	jle    c01017bb <readline+0x93>
            cputchar(c);
c01017a7:	83 ec 0c             	sub    $0xc,%esp
c01017aa:	ff 75 f0             	pushl  -0x10(%ebp)
c01017ad:	e8 2a eb ff ff       	call   c01002dc <cputchar>
c01017b2:	83 c4 10             	add    $0x10,%esp
            i --;
c01017b5:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01017b9:	eb 2c                	jmp    c01017e7 <readline+0xbf>
        }
        else if (c == '\n' || c == '\r') {
c01017bb:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01017bf:	74 06                	je     c01017c7 <readline+0x9f>
c01017c1:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01017c5:	75 8b                	jne    c0101752 <readline+0x2a>
            cputchar(c);
c01017c7:	83 ec 0c             	sub    $0xc,%esp
c01017ca:	ff 75 f0             	pushl  -0x10(%ebp)
c01017cd:	e8 0a eb ff ff       	call   c01002dc <cputchar>
c01017d2:	83 c4 10             	add    $0x10,%esp
            buf[i] = '\0';
c01017d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01017d8:	05 20 50 1b c0       	add    $0xc01b5020,%eax
c01017dd:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01017e0:	b8 20 50 1b c0       	mov    $0xc01b5020,%eax
c01017e5:	eb 05                	jmp    c01017ec <readline+0xc4>
        c = getchar();
c01017e7:	e9 66 ff ff ff       	jmp    c0101752 <readline+0x2a>
        }
    }
}
c01017ec:	c9                   	leave  
c01017ed:	c3                   	ret    

c01017ee <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c01017ee:	f3 0f 1e fb          	endbr32 
c01017f2:	55                   	push   %ebp
c01017f3:	89 e5                	mov    %esp,%ebp
c01017f5:	83 ec 18             	sub    $0x18,%esp
    if (is_panic) {
c01017f8:	a1 20 54 1b c0       	mov    0xc01b5420,%eax
c01017fd:	85 c0                	test   %eax,%eax
c01017ff:	75 5f                	jne    c0101860 <__panic+0x72>
        goto panic_dead;
    }
    is_panic = 1;
c0101801:	c7 05 20 54 1b c0 01 	movl   $0x1,0xc01b5420
c0101808:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c010180b:	8d 45 14             	lea    0x14(%ebp),%eax
c010180e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0101811:	83 ec 04             	sub    $0x4,%esp
c0101814:	ff 75 0c             	pushl  0xc(%ebp)
c0101817:	ff 75 08             	pushl  0x8(%ebp)
c010181a:	68 43 ce 10 c0       	push   $0xc010ce43
c010181f:	e8 8e ea ff ff       	call   c01002b2 <cprintf>
c0101824:	83 c4 10             	add    $0x10,%esp
    vcprintf(fmt, ap);
c0101827:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010182a:	83 ec 08             	sub    $0x8,%esp
c010182d:	50                   	push   %eax
c010182e:	ff 75 10             	pushl  0x10(%ebp)
c0101831:	e8 4f ea ff ff       	call   c0100285 <vcprintf>
c0101836:	83 c4 10             	add    $0x10,%esp
    cprintf("\n");
c0101839:	83 ec 0c             	sub    $0xc,%esp
c010183c:	68 5f ce 10 c0       	push   $0xc010ce5f
c0101841:	e8 6c ea ff ff       	call   c01002b2 <cprintf>
c0101846:	83 c4 10             	add    $0x10,%esp
    
    cprintf("stack trackback:\n");
c0101849:	83 ec 0c             	sub    $0xc,%esp
c010184c:	68 61 ce 10 c0       	push   $0xc010ce61
c0101851:	e8 5c ea ff ff       	call   c01002b2 <cprintf>
c0101856:	83 c4 10             	add    $0x10,%esp
    print_stackframe();
c0101859:	e8 f8 06 00 00       	call   c0101f56 <print_stackframe>
c010185e:	eb 01                	jmp    c0101861 <__panic+0x73>
        goto panic_dead;
c0101860:	90                   	nop
    
    va_end(ap);

panic_dead:
    intr_disable();
c0101861:	e8 99 1d 00 00       	call   c01035ff <intr_disable>
    while (1) {
        kmonitor(NULL);
c0101866:	83 ec 0c             	sub    $0xc,%esp
c0101869:	6a 00                	push   $0x0
c010186b:	e8 1f 09 00 00       	call   c010218f <kmonitor>
c0101870:	83 c4 10             	add    $0x10,%esp
c0101873:	eb f1                	jmp    c0101866 <__panic+0x78>

c0101875 <__warn>:
    }
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0101875:	f3 0f 1e fb          	endbr32 
c0101879:	55                   	push   %ebp
c010187a:	89 e5                	mov    %esp,%ebp
c010187c:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    va_start(ap, fmt);
c010187f:	8d 45 14             	lea    0x14(%ebp),%eax
c0101882:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c0101885:	83 ec 04             	sub    $0x4,%esp
c0101888:	ff 75 0c             	pushl  0xc(%ebp)
c010188b:	ff 75 08             	pushl  0x8(%ebp)
c010188e:	68 73 ce 10 c0       	push   $0xc010ce73
c0101893:	e8 1a ea ff ff       	call   c01002b2 <cprintf>
c0101898:	83 c4 10             	add    $0x10,%esp
    vcprintf(fmt, ap);
c010189b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010189e:	83 ec 08             	sub    $0x8,%esp
c01018a1:	50                   	push   %eax
c01018a2:	ff 75 10             	pushl  0x10(%ebp)
c01018a5:	e8 db e9 ff ff       	call   c0100285 <vcprintf>
c01018aa:	83 c4 10             	add    $0x10,%esp
    cprintf("\n");
c01018ad:	83 ec 0c             	sub    $0xc,%esp
c01018b0:	68 5f ce 10 c0       	push   $0xc010ce5f
c01018b5:	e8 f8 e9 ff ff       	call   c01002b2 <cprintf>
c01018ba:	83 c4 10             	add    $0x10,%esp
    va_end(ap);
}
c01018bd:	90                   	nop
c01018be:	c9                   	leave  
c01018bf:	c3                   	ret    

c01018c0 <is_kernel_panic>:

bool
is_kernel_panic(void) {
c01018c0:	f3 0f 1e fb          	endbr32 
c01018c4:	55                   	push   %ebp
c01018c5:	89 e5                	mov    %esp,%ebp
    return is_panic;
c01018c7:	a1 20 54 1b c0       	mov    0xc01b5420,%eax
}
c01018cc:	5d                   	pop    %ebp
c01018cd:	c3                   	ret    

c01018ce <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01018ce:	f3 0f 1e fb          	endbr32 
c01018d2:	55                   	push   %ebp
c01018d3:	89 e5                	mov    %esp,%ebp
c01018d5:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01018d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01018db:	8b 00                	mov    (%eax),%eax
c01018dd:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01018e0:	8b 45 10             	mov    0x10(%ebp),%eax
c01018e3:	8b 00                	mov    (%eax),%eax
c01018e5:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01018e8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c01018ef:	e9 d2 00 00 00       	jmp    c01019c6 <stab_binsearch+0xf8>
        int true_m = (l + r) / 2, m = true_m;
c01018f4:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01018f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01018fa:	01 d0                	add    %edx,%eax
c01018fc:	89 c2                	mov    %eax,%edx
c01018fe:	c1 ea 1f             	shr    $0x1f,%edx
c0101901:	01 d0                	add    %edx,%eax
c0101903:	d1 f8                	sar    %eax
c0101905:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0101908:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010190b:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c010190e:	eb 04                	jmp    c0101914 <stab_binsearch+0x46>
            m --;
c0101910:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
        while (m >= l && stabs[m].n_type != type) {
c0101914:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101917:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010191a:	7c 1f                	jl     c010193b <stab_binsearch+0x6d>
c010191c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010191f:	89 d0                	mov    %edx,%eax
c0101921:	01 c0                	add    %eax,%eax
c0101923:	01 d0                	add    %edx,%eax
c0101925:	c1 e0 02             	shl    $0x2,%eax
c0101928:	89 c2                	mov    %eax,%edx
c010192a:	8b 45 08             	mov    0x8(%ebp),%eax
c010192d:	01 d0                	add    %edx,%eax
c010192f:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0101933:	0f b6 c0             	movzbl %al,%eax
c0101936:	39 45 14             	cmp    %eax,0x14(%ebp)
c0101939:	75 d5                	jne    c0101910 <stab_binsearch+0x42>
        }
        if (m < l) {    // no match in [l, m]
c010193b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010193e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0101941:	7d 0b                	jge    c010194e <stab_binsearch+0x80>
            l = true_m + 1;
c0101943:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101946:	83 c0 01             	add    $0x1,%eax
c0101949:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c010194c:	eb 78                	jmp    c01019c6 <stab_binsearch+0xf8>
        }

        // actual binary search
        any_matches = 1;
c010194e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c0101955:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0101958:	89 d0                	mov    %edx,%eax
c010195a:	01 c0                	add    %eax,%eax
c010195c:	01 d0                	add    %edx,%eax
c010195e:	c1 e0 02             	shl    $0x2,%eax
c0101961:	89 c2                	mov    %eax,%edx
c0101963:	8b 45 08             	mov    0x8(%ebp),%eax
c0101966:	01 d0                	add    %edx,%eax
c0101968:	8b 40 08             	mov    0x8(%eax),%eax
c010196b:	39 45 18             	cmp    %eax,0x18(%ebp)
c010196e:	76 13                	jbe    c0101983 <stab_binsearch+0xb5>
            *region_left = m;
c0101970:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101973:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0101976:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c0101978:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010197b:	83 c0 01             	add    $0x1,%eax
c010197e:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0101981:	eb 43                	jmp    c01019c6 <stab_binsearch+0xf8>
        } else if (stabs[m].n_value > addr) {
c0101983:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0101986:	89 d0                	mov    %edx,%eax
c0101988:	01 c0                	add    %eax,%eax
c010198a:	01 d0                	add    %edx,%eax
c010198c:	c1 e0 02             	shl    $0x2,%eax
c010198f:	89 c2                	mov    %eax,%edx
c0101991:	8b 45 08             	mov    0x8(%ebp),%eax
c0101994:	01 d0                	add    %edx,%eax
c0101996:	8b 40 08             	mov    0x8(%eax),%eax
c0101999:	39 45 18             	cmp    %eax,0x18(%ebp)
c010199c:	73 16                	jae    c01019b4 <stab_binsearch+0xe6>
            *region_right = m - 1;
c010199e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01019a1:	8d 50 ff             	lea    -0x1(%eax),%edx
c01019a4:	8b 45 10             	mov    0x10(%ebp),%eax
c01019a7:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01019a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01019ac:	83 e8 01             	sub    $0x1,%eax
c01019af:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01019b2:	eb 12                	jmp    c01019c6 <stab_binsearch+0xf8>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01019b4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01019b7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01019ba:	89 10                	mov    %edx,(%eax)
            l = m;
c01019bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01019bf:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01019c2:	83 45 18 01          	addl   $0x1,0x18(%ebp)
    while (l <= r) {
c01019c6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01019c9:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01019cc:	0f 8e 22 ff ff ff    	jle    c01018f4 <stab_binsearch+0x26>
        }
    }

    if (!any_matches) {
c01019d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01019d6:	75 0f                	jne    c01019e7 <stab_binsearch+0x119>
        *region_right = *region_left - 1;
c01019d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01019db:	8b 00                	mov    (%eax),%eax
c01019dd:	8d 50 ff             	lea    -0x1(%eax),%edx
c01019e0:	8b 45 10             	mov    0x10(%ebp),%eax
c01019e3:	89 10                	mov    %edx,(%eax)
        l = *region_right;
        for (; l > *region_left && stabs[l].n_type != type; l --)
            /* do nothing */;
        *region_left = l;
    }
}
c01019e5:	eb 3f                	jmp    c0101a26 <stab_binsearch+0x158>
        l = *region_right;
c01019e7:	8b 45 10             	mov    0x10(%ebp),%eax
c01019ea:	8b 00                	mov    (%eax),%eax
c01019ec:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c01019ef:	eb 04                	jmp    c01019f5 <stab_binsearch+0x127>
c01019f1:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c01019f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01019f8:	8b 00                	mov    (%eax),%eax
c01019fa:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c01019fd:	7e 1f                	jle    c0101a1e <stab_binsearch+0x150>
c01019ff:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0101a02:	89 d0                	mov    %edx,%eax
c0101a04:	01 c0                	add    %eax,%eax
c0101a06:	01 d0                	add    %edx,%eax
c0101a08:	c1 e0 02             	shl    $0x2,%eax
c0101a0b:	89 c2                	mov    %eax,%edx
c0101a0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0101a10:	01 d0                	add    %edx,%eax
c0101a12:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0101a16:	0f b6 c0             	movzbl %al,%eax
c0101a19:	39 45 14             	cmp    %eax,0x14(%ebp)
c0101a1c:	75 d3                	jne    c01019f1 <stab_binsearch+0x123>
        *region_left = l;
c0101a1e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101a21:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0101a24:	89 10                	mov    %edx,(%eax)
}
c0101a26:	90                   	nop
c0101a27:	c9                   	leave  
c0101a28:	c3                   	ret    

c0101a29 <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c0101a29:	f3 0f 1e fb          	endbr32 
c0101a2d:	55                   	push   %ebp
c0101a2e:	89 e5                	mov    %esp,%ebp
c0101a30:	83 ec 38             	sub    $0x38,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c0101a33:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101a36:	c7 00 94 ce 10 c0    	movl   $0xc010ce94,(%eax)
    info->eip_line = 0;
c0101a3c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101a3f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0101a46:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101a49:	c7 40 08 94 ce 10 c0 	movl   $0xc010ce94,0x8(%eax)
    info->eip_fn_namelen = 9;
c0101a50:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101a53:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c0101a5a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101a5d:	8b 55 08             	mov    0x8(%ebp),%edx
c0101a60:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0101a63:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101a66:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c0101a6d:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c0101a74:	76 21                	jbe    c0101a97 <debuginfo_eip+0x6e>
        stabs = __STAB_BEGIN__;
c0101a76:	c7 45 f4 00 f7 10 c0 	movl   $0xc010f700,-0xc(%ebp)
        stab_end = __STAB_END__;
c0101a7d:	c7 45 f0 58 9d 12 c0 	movl   $0xc0129d58,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c0101a84:	c7 45 ec 59 9d 12 c0 	movl   $0xc0129d59,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c0101a8b:	c7 45 e8 56 f0 12 c0 	movl   $0xc012f056,-0x18(%ebp)
c0101a92:	e9 bf 00 00 00       	jmp    c0101b56 <debuginfo_eip+0x12d>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c0101a97:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c0101a9e:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c0101aa3:	85 c0                	test   %eax,%eax
c0101aa5:	74 11                	je     c0101ab8 <debuginfo_eip+0x8f>
c0101aa7:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c0101aac:	8b 40 18             	mov    0x18(%eax),%eax
c0101aaf:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0101ab2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0101ab6:	75 0a                	jne    c0101ac2 <debuginfo_eip+0x99>
            return -1;
c0101ab8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101abd:	e9 3e 03 00 00       	jmp    c0101e00 <debuginfo_eip+0x3d7>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c0101ac2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101ac5:	6a 00                	push   $0x0
c0101ac7:	6a 10                	push   $0x10
c0101ac9:	50                   	push   %eax
c0101aca:	ff 75 e0             	pushl  -0x20(%ebp)
c0101acd:	e8 fb 5a 00 00       	call   c01075cd <user_mem_check>
c0101ad2:	83 c4 10             	add    $0x10,%esp
c0101ad5:	85 c0                	test   %eax,%eax
c0101ad7:	75 0a                	jne    c0101ae3 <debuginfo_eip+0xba>
            return -1;
c0101ad9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101ade:	e9 1d 03 00 00       	jmp    c0101e00 <debuginfo_eip+0x3d7>
        }

        stabs = usd->stabs;
c0101ae3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101ae6:	8b 00                	mov    (%eax),%eax
c0101ae8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c0101aeb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101aee:	8b 40 04             	mov    0x4(%eax),%eax
c0101af1:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c0101af4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101af7:	8b 40 08             	mov    0x8(%eax),%eax
c0101afa:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c0101afd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101b00:	8b 40 0c             	mov    0xc(%eax),%eax
c0101b03:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0101b06:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0101b09:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101b0c:	29 c2                	sub    %eax,%edx
c0101b0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101b11:	6a 00                	push   $0x0
c0101b13:	52                   	push   %edx
c0101b14:	50                   	push   %eax
c0101b15:	ff 75 e0             	pushl  -0x20(%ebp)
c0101b18:	e8 b0 5a 00 00       	call   c01075cd <user_mem_check>
c0101b1d:	83 c4 10             	add    $0x10,%esp
c0101b20:	85 c0                	test   %eax,%eax
c0101b22:	75 0a                	jne    c0101b2e <debuginfo_eip+0x105>
            return -1;
c0101b24:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101b29:	e9 d2 02 00 00       	jmp    c0101e00 <debuginfo_eip+0x3d7>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c0101b2e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0101b31:	2b 45 ec             	sub    -0x14(%ebp),%eax
c0101b34:	89 c2                	mov    %eax,%edx
c0101b36:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b39:	6a 00                	push   $0x0
c0101b3b:	52                   	push   %edx
c0101b3c:	50                   	push   %eax
c0101b3d:	ff 75 e0             	pushl  -0x20(%ebp)
c0101b40:	e8 88 5a 00 00       	call   c01075cd <user_mem_check>
c0101b45:	83 c4 10             	add    $0x10,%esp
c0101b48:	85 c0                	test   %eax,%eax
c0101b4a:	75 0a                	jne    c0101b56 <debuginfo_eip+0x12d>
            return -1;
c0101b4c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101b51:	e9 aa 02 00 00       	jmp    c0101e00 <debuginfo_eip+0x3d7>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c0101b56:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0101b59:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0101b5c:	76 0d                	jbe    c0101b6b <debuginfo_eip+0x142>
c0101b5e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0101b61:	83 e8 01             	sub    $0x1,%eax
c0101b64:	0f b6 00             	movzbl (%eax),%eax
c0101b67:	84 c0                	test   %al,%al
c0101b69:	74 0a                	je     c0101b75 <debuginfo_eip+0x14c>
        return -1;
c0101b6b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101b70:	e9 8b 02 00 00       	jmp    c0101e00 <debuginfo_eip+0x3d7>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c0101b75:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0101b7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101b7f:	2b 45 f4             	sub    -0xc(%ebp),%eax
c0101b82:	c1 f8 02             	sar    $0x2,%eax
c0101b85:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c0101b8b:	83 e8 01             	sub    $0x1,%eax
c0101b8e:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c0101b91:	83 ec 0c             	sub    $0xc,%esp
c0101b94:	ff 75 08             	pushl  0x8(%ebp)
c0101b97:	6a 64                	push   $0x64
c0101b99:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0101b9c:	50                   	push   %eax
c0101b9d:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0101ba0:	50                   	push   %eax
c0101ba1:	ff 75 f4             	pushl  -0xc(%ebp)
c0101ba4:	e8 25 fd ff ff       	call   c01018ce <stab_binsearch>
c0101ba9:	83 c4 20             	add    $0x20,%esp
    if (lfile == 0)
c0101bac:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101baf:	85 c0                	test   %eax,%eax
c0101bb1:	75 0a                	jne    c0101bbd <debuginfo_eip+0x194>
        return -1;
c0101bb3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101bb8:	e9 43 02 00 00       	jmp    c0101e00 <debuginfo_eip+0x3d7>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c0101bbd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101bc0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0101bc3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101bc6:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c0101bc9:	83 ec 0c             	sub    $0xc,%esp
c0101bcc:	ff 75 08             	pushl  0x8(%ebp)
c0101bcf:	6a 24                	push   $0x24
c0101bd1:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0101bd4:	50                   	push   %eax
c0101bd5:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0101bd8:	50                   	push   %eax
c0101bd9:	ff 75 f4             	pushl  -0xc(%ebp)
c0101bdc:	e8 ed fc ff ff       	call   c01018ce <stab_binsearch>
c0101be1:	83 c4 20             	add    $0x20,%esp

    if (lfun <= rfun) {
c0101be4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0101be7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0101bea:	39 c2                	cmp    %eax,%edx
c0101bec:	7f 78                	jg     c0101c66 <debuginfo_eip+0x23d>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c0101bee:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101bf1:	89 c2                	mov    %eax,%edx
c0101bf3:	89 d0                	mov    %edx,%eax
c0101bf5:	01 c0                	add    %eax,%eax
c0101bf7:	01 d0                	add    %edx,%eax
c0101bf9:	c1 e0 02             	shl    $0x2,%eax
c0101bfc:	89 c2                	mov    %eax,%edx
c0101bfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101c01:	01 d0                	add    %edx,%eax
c0101c03:	8b 10                	mov    (%eax),%edx
c0101c05:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0101c08:	2b 45 ec             	sub    -0x14(%ebp),%eax
c0101c0b:	39 c2                	cmp    %eax,%edx
c0101c0d:	73 22                	jae    c0101c31 <debuginfo_eip+0x208>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c0101c0f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101c12:	89 c2                	mov    %eax,%edx
c0101c14:	89 d0                	mov    %edx,%eax
c0101c16:	01 c0                	add    %eax,%eax
c0101c18:	01 d0                	add    %edx,%eax
c0101c1a:	c1 e0 02             	shl    $0x2,%eax
c0101c1d:	89 c2                	mov    %eax,%edx
c0101c1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101c22:	01 d0                	add    %edx,%eax
c0101c24:	8b 10                	mov    (%eax),%edx
c0101c26:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101c29:	01 c2                	add    %eax,%edx
c0101c2b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c2e:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c0101c31:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101c34:	89 c2                	mov    %eax,%edx
c0101c36:	89 d0                	mov    %edx,%eax
c0101c38:	01 c0                	add    %eax,%eax
c0101c3a:	01 d0                	add    %edx,%eax
c0101c3c:	c1 e0 02             	shl    $0x2,%eax
c0101c3f:	89 c2                	mov    %eax,%edx
c0101c41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101c44:	01 d0                	add    %edx,%eax
c0101c46:	8b 50 08             	mov    0x8(%eax),%edx
c0101c49:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c4c:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c0101c4f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c52:	8b 40 10             	mov    0x10(%eax),%eax
c0101c55:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c0101c58:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101c5b:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c0101c5e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0101c61:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0101c64:	eb 15                	jmp    c0101c7b <debuginfo_eip+0x252>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c0101c66:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c69:	8b 55 08             	mov    0x8(%ebp),%edx
c0101c6c:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c0101c6f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101c72:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c0101c75:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101c78:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c0101c7b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c7e:	8b 40 08             	mov    0x8(%eax),%eax
c0101c81:	83 ec 08             	sub    $0x8,%esp
c0101c84:	6a 3a                	push   $0x3a
c0101c86:	50                   	push   %eax
c0101c87:	e8 42 a4 00 00       	call   c010c0ce <strfind>
c0101c8c:	83 c4 10             	add    $0x10,%esp
c0101c8f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101c92:	8b 52 08             	mov    0x8(%edx),%edx
c0101c95:	29 d0                	sub    %edx,%eax
c0101c97:	89 c2                	mov    %eax,%edx
c0101c99:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c9c:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c0101c9f:	83 ec 0c             	sub    $0xc,%esp
c0101ca2:	ff 75 08             	pushl  0x8(%ebp)
c0101ca5:	6a 44                	push   $0x44
c0101ca7:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0101caa:	50                   	push   %eax
c0101cab:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0101cae:	50                   	push   %eax
c0101caf:	ff 75 f4             	pushl  -0xc(%ebp)
c0101cb2:	e8 17 fc ff ff       	call   c01018ce <stab_binsearch>
c0101cb7:	83 c4 20             	add    $0x20,%esp
    if (lline <= rline) {
c0101cba:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101cbd:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101cc0:	39 c2                	cmp    %eax,%edx
c0101cc2:	7f 24                	jg     c0101ce8 <debuginfo_eip+0x2bf>
        info->eip_line = stabs[rline].n_desc;
c0101cc4:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101cc7:	89 c2                	mov    %eax,%edx
c0101cc9:	89 d0                	mov    %edx,%eax
c0101ccb:	01 c0                	add    %eax,%eax
c0101ccd:	01 d0                	add    %edx,%eax
c0101ccf:	c1 e0 02             	shl    $0x2,%eax
c0101cd2:	89 c2                	mov    %eax,%edx
c0101cd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101cd7:	01 d0                	add    %edx,%eax
c0101cd9:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0101cdd:	0f b7 d0             	movzwl %ax,%edx
c0101ce0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101ce3:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0101ce6:	eb 13                	jmp    c0101cfb <debuginfo_eip+0x2d2>
        return -1;
c0101ce8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101ced:	e9 0e 01 00 00       	jmp    c0101e00 <debuginfo_eip+0x3d7>
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c0101cf2:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101cf5:	83 e8 01             	sub    $0x1,%eax
c0101cf8:	89 45 cc             	mov    %eax,-0x34(%ebp)
    while (lline >= lfile
c0101cfb:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101cfe:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101d01:	39 c2                	cmp    %eax,%edx
c0101d03:	7c 56                	jl     c0101d5b <debuginfo_eip+0x332>
           && stabs[lline].n_type != N_SOL
c0101d05:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101d08:	89 c2                	mov    %eax,%edx
c0101d0a:	89 d0                	mov    %edx,%eax
c0101d0c:	01 c0                	add    %eax,%eax
c0101d0e:	01 d0                	add    %edx,%eax
c0101d10:	c1 e0 02             	shl    $0x2,%eax
c0101d13:	89 c2                	mov    %eax,%edx
c0101d15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101d18:	01 d0                	add    %edx,%eax
c0101d1a:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0101d1e:	3c 84                	cmp    $0x84,%al
c0101d20:	74 39                	je     c0101d5b <debuginfo_eip+0x332>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c0101d22:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101d25:	89 c2                	mov    %eax,%edx
c0101d27:	89 d0                	mov    %edx,%eax
c0101d29:	01 c0                	add    %eax,%eax
c0101d2b:	01 d0                	add    %edx,%eax
c0101d2d:	c1 e0 02             	shl    $0x2,%eax
c0101d30:	89 c2                	mov    %eax,%edx
c0101d32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101d35:	01 d0                	add    %edx,%eax
c0101d37:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0101d3b:	3c 64                	cmp    $0x64,%al
c0101d3d:	75 b3                	jne    c0101cf2 <debuginfo_eip+0x2c9>
c0101d3f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101d42:	89 c2                	mov    %eax,%edx
c0101d44:	89 d0                	mov    %edx,%eax
c0101d46:	01 c0                	add    %eax,%eax
c0101d48:	01 d0                	add    %edx,%eax
c0101d4a:	c1 e0 02             	shl    $0x2,%eax
c0101d4d:	89 c2                	mov    %eax,%edx
c0101d4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101d52:	01 d0                	add    %edx,%eax
c0101d54:	8b 40 08             	mov    0x8(%eax),%eax
c0101d57:	85 c0                	test   %eax,%eax
c0101d59:	74 97                	je     c0101cf2 <debuginfo_eip+0x2c9>
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c0101d5b:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101d5e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101d61:	39 c2                	cmp    %eax,%edx
c0101d63:	7c 42                	jl     c0101da7 <debuginfo_eip+0x37e>
c0101d65:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101d68:	89 c2                	mov    %eax,%edx
c0101d6a:	89 d0                	mov    %edx,%eax
c0101d6c:	01 c0                	add    %eax,%eax
c0101d6e:	01 d0                	add    %edx,%eax
c0101d70:	c1 e0 02             	shl    $0x2,%eax
c0101d73:	89 c2                	mov    %eax,%edx
c0101d75:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101d78:	01 d0                	add    %edx,%eax
c0101d7a:	8b 10                	mov    (%eax),%edx
c0101d7c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0101d7f:	2b 45 ec             	sub    -0x14(%ebp),%eax
c0101d82:	39 c2                	cmp    %eax,%edx
c0101d84:	73 21                	jae    c0101da7 <debuginfo_eip+0x37e>
        info->eip_file = stabstr + stabs[lline].n_strx;
c0101d86:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101d89:	89 c2                	mov    %eax,%edx
c0101d8b:	89 d0                	mov    %edx,%eax
c0101d8d:	01 c0                	add    %eax,%eax
c0101d8f:	01 d0                	add    %edx,%eax
c0101d91:	c1 e0 02             	shl    $0x2,%eax
c0101d94:	89 c2                	mov    %eax,%edx
c0101d96:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101d99:	01 d0                	add    %edx,%eax
c0101d9b:	8b 10                	mov    (%eax),%edx
c0101d9d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101da0:	01 c2                	add    %eax,%edx
c0101da2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101da5:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0101da7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0101daa:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0101dad:	39 c2                	cmp    %eax,%edx
c0101daf:	7d 4a                	jge    c0101dfb <debuginfo_eip+0x3d2>
        for (lline = lfun + 1;
c0101db1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101db4:	83 c0 01             	add    $0x1,%eax
c0101db7:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101dba:	eb 18                	jmp    c0101dd4 <debuginfo_eip+0x3ab>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c0101dbc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101dbf:	8b 40 14             	mov    0x14(%eax),%eax
c0101dc2:	8d 50 01             	lea    0x1(%eax),%edx
c0101dc5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101dc8:	89 50 14             	mov    %edx,0x14(%eax)
             lline ++) {
c0101dcb:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101dce:	83 c0 01             	add    $0x1,%eax
c0101dd1:	89 45 cc             	mov    %eax,-0x34(%ebp)
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0101dd4:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101dd7:	8b 45 d0             	mov    -0x30(%ebp),%eax
        for (lline = lfun + 1;
c0101dda:	39 c2                	cmp    %eax,%edx
c0101ddc:	7d 1d                	jge    c0101dfb <debuginfo_eip+0x3d2>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0101dde:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101de1:	89 c2                	mov    %eax,%edx
c0101de3:	89 d0                	mov    %edx,%eax
c0101de5:	01 c0                	add    %eax,%eax
c0101de7:	01 d0                	add    %edx,%eax
c0101de9:	c1 e0 02             	shl    $0x2,%eax
c0101dec:	89 c2                	mov    %eax,%edx
c0101dee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101df1:	01 d0                	add    %edx,%eax
c0101df3:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0101df7:	3c a0                	cmp    $0xa0,%al
c0101df9:	74 c1                	je     c0101dbc <debuginfo_eip+0x393>
        }
    }
    return 0;
c0101dfb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101e00:	c9                   	leave  
c0101e01:	c3                   	ret    

c0101e02 <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0101e02:	f3 0f 1e fb          	endbr32 
c0101e06:	55                   	push   %ebp
c0101e07:	89 e5                	mov    %esp,%ebp
c0101e09:	83 ec 08             	sub    $0x8,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0101e0c:	83 ec 0c             	sub    $0xc,%esp
c0101e0f:	68 9e ce 10 c0       	push   $0xc010ce9e
c0101e14:	e8 99 e4 ff ff       	call   c01002b2 <cprintf>
c0101e19:	83 c4 10             	add    $0x10,%esp
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0101e1c:	83 ec 08             	sub    $0x8,%esp
c0101e1f:	68 36 00 10 c0       	push   $0xc0100036
c0101e24:	68 b7 ce 10 c0       	push   $0xc010ceb7
c0101e29:	e8 84 e4 ff ff       	call   c01002b2 <cprintf>
c0101e2e:	83 c4 10             	add    $0x10,%esp
    cprintf("  etext  0x%08x (phys)\n", etext);
c0101e31:	83 ec 08             	sub    $0x8,%esp
c0101e34:	68 2c cb 10 c0       	push   $0xc010cb2c
c0101e39:	68 cf ce 10 c0       	push   $0xc010cecf
c0101e3e:	e8 6f e4 ff ff       	call   c01002b2 <cprintf>
c0101e43:	83 c4 10             	add    $0x10,%esp
    cprintf("  edata  0x%08x (phys)\n", edata);
c0101e46:	83 ec 08             	sub    $0x8,%esp
c0101e49:	68 00 50 1b c0       	push   $0xc01b5000
c0101e4e:	68 e7 ce 10 c0       	push   $0xc010cee7
c0101e53:	e8 5a e4 ff ff       	call   c01002b2 <cprintf>
c0101e58:	83 c4 10             	add    $0x10,%esp
    cprintf("  end    0x%08x (phys)\n", end);
c0101e5b:	83 ec 08             	sub    $0x8,%esp
c0101e5e:	68 60 81 1b c0       	push   $0xc01b8160
c0101e63:	68 ff ce 10 c0       	push   $0xc010ceff
c0101e68:	e8 45 e4 ff ff       	call   c01002b2 <cprintf>
c0101e6d:	83 c4 10             	add    $0x10,%esp
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0101e70:	b8 60 81 1b c0       	mov    $0xc01b8160,%eax
c0101e75:	2d 36 00 10 c0       	sub    $0xc0100036,%eax
c0101e7a:	05 ff 03 00 00       	add    $0x3ff,%eax
c0101e7f:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0101e85:	85 c0                	test   %eax,%eax
c0101e87:	0f 48 c2             	cmovs  %edx,%eax
c0101e8a:	c1 f8 0a             	sar    $0xa,%eax
c0101e8d:	83 ec 08             	sub    $0x8,%esp
c0101e90:	50                   	push   %eax
c0101e91:	68 18 cf 10 c0       	push   $0xc010cf18
c0101e96:	e8 17 e4 ff ff       	call   c01002b2 <cprintf>
c0101e9b:	83 c4 10             	add    $0x10,%esp
}
c0101e9e:	90                   	nop
c0101e9f:	c9                   	leave  
c0101ea0:	c3                   	ret    

c0101ea1 <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0101ea1:	f3 0f 1e fb          	endbr32 
c0101ea5:	55                   	push   %ebp
c0101ea6:	89 e5                	mov    %esp,%ebp
c0101ea8:	81 ec 28 01 00 00    	sub    $0x128,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0101eae:	83 ec 08             	sub    $0x8,%esp
c0101eb1:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0101eb4:	50                   	push   %eax
c0101eb5:	ff 75 08             	pushl  0x8(%ebp)
c0101eb8:	e8 6c fb ff ff       	call   c0101a29 <debuginfo_eip>
c0101ebd:	83 c4 10             	add    $0x10,%esp
c0101ec0:	85 c0                	test   %eax,%eax
c0101ec2:	74 15                	je     c0101ed9 <print_debuginfo+0x38>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0101ec4:	83 ec 08             	sub    $0x8,%esp
c0101ec7:	ff 75 08             	pushl  0x8(%ebp)
c0101eca:	68 42 cf 10 c0       	push   $0xc010cf42
c0101ecf:	e8 de e3 ff ff       	call   c01002b2 <cprintf>
c0101ed4:	83 c4 10             	add    $0x10,%esp
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
    }
}
c0101ed7:	eb 65                	jmp    c0101f3e <print_debuginfo+0x9d>
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0101ed9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101ee0:	eb 1c                	jmp    c0101efe <print_debuginfo+0x5d>
            fnname[j] = info.eip_fn_name[j];
c0101ee2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0101ee5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101ee8:	01 d0                	add    %edx,%eax
c0101eea:	0f b6 00             	movzbl (%eax),%eax
c0101eed:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0101ef3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101ef6:	01 ca                	add    %ecx,%edx
c0101ef8:	88 02                	mov    %al,(%edx)
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0101efa:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101efe:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0101f01:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0101f04:	7c dc                	jl     c0101ee2 <print_debuginfo+0x41>
        fnname[j] = '\0';
c0101f06:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0101f0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101f0f:	01 d0                	add    %edx,%eax
c0101f11:	c6 00 00             	movb   $0x0,(%eax)
                fnname, eip - info.eip_fn_addr);
c0101f14:	8b 45 ec             	mov    -0x14(%ebp),%eax
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0101f17:	8b 55 08             	mov    0x8(%ebp),%edx
c0101f1a:	89 d1                	mov    %edx,%ecx
c0101f1c:	29 c1                	sub    %eax,%ecx
c0101f1e:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0101f21:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101f24:	83 ec 0c             	sub    $0xc,%esp
c0101f27:	51                   	push   %ecx
c0101f28:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0101f2e:	51                   	push   %ecx
c0101f2f:	52                   	push   %edx
c0101f30:	50                   	push   %eax
c0101f31:	68 5e cf 10 c0       	push   $0xc010cf5e
c0101f36:	e8 77 e3 ff ff       	call   c01002b2 <cprintf>
c0101f3b:	83 c4 20             	add    $0x20,%esp
}
c0101f3e:	90                   	nop
c0101f3f:	c9                   	leave  
c0101f40:	c3                   	ret    

c0101f41 <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0101f41:	f3 0f 1e fb          	endbr32 
c0101f45:	55                   	push   %ebp
c0101f46:	89 e5                	mov    %esp,%ebp
c0101f48:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0101f4b:	8b 45 04             	mov    0x4(%ebp),%eax
c0101f4e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0101f51:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0101f54:	c9                   	leave  
c0101f55:	c3                   	ret    

c0101f56 <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0101f56:	f3 0f 1e fb          	endbr32 
c0101f5a:	55                   	push   %ebp
c0101f5b:	89 e5                	mov    %esp,%ebp
c0101f5d:	83 ec 28             	sub    $0x28,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0101f60:	89 e8                	mov    %ebp,%eax
c0101f62:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return ebp;
c0101f65:	8b 45 e0             	mov    -0x20(%ebp),%eax
      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp(), eip = read_eip();
c0101f68:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101f6b:	e8 d1 ff ff ff       	call   c0101f41 <read_eip>
c0101f70:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0101f73:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0101f7a:	e9 8d 00 00 00       	jmp    c010200c <print_stackframe+0xb6>
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
c0101f7f:	83 ec 04             	sub    $0x4,%esp
c0101f82:	ff 75 f0             	pushl  -0x10(%ebp)
c0101f85:	ff 75 f4             	pushl  -0xc(%ebp)
c0101f88:	68 70 cf 10 c0       	push   $0xc010cf70
c0101f8d:	e8 20 e3 ff ff       	call   c01002b2 <cprintf>
c0101f92:	83 c4 10             	add    $0x10,%esp
        uint32_t *args = (uint32_t *)ebp + 2;
c0101f95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101f98:	83 c0 08             	add    $0x8,%eax
c0101f9b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        for (j = 0; j < 4; j ++) {
c0101f9e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0101fa5:	eb 26                	jmp    c0101fcd <print_stackframe+0x77>
            cprintf("0x%08x ", args[j]);
c0101fa7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0101faa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101fb1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101fb4:	01 d0                	add    %edx,%eax
c0101fb6:	8b 00                	mov    (%eax),%eax
c0101fb8:	83 ec 08             	sub    $0x8,%esp
c0101fbb:	50                   	push   %eax
c0101fbc:	68 8c cf 10 c0       	push   $0xc010cf8c
c0101fc1:	e8 ec e2 ff ff       	call   c01002b2 <cprintf>
c0101fc6:	83 c4 10             	add    $0x10,%esp
        for (j = 0; j < 4; j ++) {
c0101fc9:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0101fcd:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0101fd1:	7e d4                	jle    c0101fa7 <print_stackframe+0x51>
        }
        cprintf("\n");
c0101fd3:	83 ec 0c             	sub    $0xc,%esp
c0101fd6:	68 94 cf 10 c0       	push   $0xc010cf94
c0101fdb:	e8 d2 e2 ff ff       	call   c01002b2 <cprintf>
c0101fe0:	83 c4 10             	add    $0x10,%esp
        print_debuginfo(eip - 1);
c0101fe3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101fe6:	83 e8 01             	sub    $0x1,%eax
c0101fe9:	83 ec 0c             	sub    $0xc,%esp
c0101fec:	50                   	push   %eax
c0101fed:	e8 af fe ff ff       	call   c0101ea1 <print_debuginfo>
c0101ff2:	83 c4 10             	add    $0x10,%esp
        eip = ((uint32_t *)ebp)[1];
c0101ff5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101ff8:	83 c0 04             	add    $0x4,%eax
c0101ffb:	8b 00                	mov    (%eax),%eax
c0101ffd:	89 45 f0             	mov    %eax,-0x10(%ebp)
        ebp = ((uint32_t *)ebp)[0];
c0102000:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102003:	8b 00                	mov    (%eax),%eax
c0102005:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0102008:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010200c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0102010:	74 0a                	je     c010201c <print_stackframe+0xc6>
c0102012:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0102016:	0f 8e 63 ff ff ff    	jle    c0101f7f <print_stackframe+0x29>
    }
}
c010201c:	90                   	nop
c010201d:	c9                   	leave  
c010201e:	c3                   	ret    

c010201f <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c010201f:	f3 0f 1e fb          	endbr32 
c0102023:	55                   	push   %ebp
c0102024:	89 e5                	mov    %esp,%ebp
c0102026:	83 ec 18             	sub    $0x18,%esp
    int argc = 0;
c0102029:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0102030:	eb 0c                	jmp    c010203e <parse+0x1f>
            *buf ++ = '\0';
c0102032:	8b 45 08             	mov    0x8(%ebp),%eax
c0102035:	8d 50 01             	lea    0x1(%eax),%edx
c0102038:	89 55 08             	mov    %edx,0x8(%ebp)
c010203b:	c6 00 00             	movb   $0x0,(%eax)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c010203e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102041:	0f b6 00             	movzbl (%eax),%eax
c0102044:	84 c0                	test   %al,%al
c0102046:	74 1e                	je     c0102066 <parse+0x47>
c0102048:	8b 45 08             	mov    0x8(%ebp),%eax
c010204b:	0f b6 00             	movzbl (%eax),%eax
c010204e:	0f be c0             	movsbl %al,%eax
c0102051:	83 ec 08             	sub    $0x8,%esp
c0102054:	50                   	push   %eax
c0102055:	68 18 d0 10 c0       	push   $0xc010d018
c010205a:	e8 38 a0 00 00       	call   c010c097 <strchr>
c010205f:	83 c4 10             	add    $0x10,%esp
c0102062:	85 c0                	test   %eax,%eax
c0102064:	75 cc                	jne    c0102032 <parse+0x13>
        }
        if (*buf == '\0') {
c0102066:	8b 45 08             	mov    0x8(%ebp),%eax
c0102069:	0f b6 00             	movzbl (%eax),%eax
c010206c:	84 c0                	test   %al,%al
c010206e:	74 65                	je     c01020d5 <parse+0xb6>
            break;
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0102070:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0102074:	75 12                	jne    c0102088 <parse+0x69>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0102076:	83 ec 08             	sub    $0x8,%esp
c0102079:	6a 10                	push   $0x10
c010207b:	68 1d d0 10 c0       	push   $0xc010d01d
c0102080:	e8 2d e2 ff ff       	call   c01002b2 <cprintf>
c0102085:	83 c4 10             	add    $0x10,%esp
        }
        argv[argc ++] = buf;
c0102088:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010208b:	8d 50 01             	lea    0x1(%eax),%edx
c010208e:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0102091:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0102098:	8b 45 0c             	mov    0xc(%ebp),%eax
c010209b:	01 c2                	add    %eax,%edx
c010209d:	8b 45 08             	mov    0x8(%ebp),%eax
c01020a0:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c01020a2:	eb 04                	jmp    c01020a8 <parse+0x89>
            buf ++;
c01020a4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c01020a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01020ab:	0f b6 00             	movzbl (%eax),%eax
c01020ae:	84 c0                	test   %al,%al
c01020b0:	74 8c                	je     c010203e <parse+0x1f>
c01020b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01020b5:	0f b6 00             	movzbl (%eax),%eax
c01020b8:	0f be c0             	movsbl %al,%eax
c01020bb:	83 ec 08             	sub    $0x8,%esp
c01020be:	50                   	push   %eax
c01020bf:	68 18 d0 10 c0       	push   $0xc010d018
c01020c4:	e8 ce 9f 00 00       	call   c010c097 <strchr>
c01020c9:	83 c4 10             	add    $0x10,%esp
c01020cc:	85 c0                	test   %eax,%eax
c01020ce:	74 d4                	je     c01020a4 <parse+0x85>
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c01020d0:	e9 69 ff ff ff       	jmp    c010203e <parse+0x1f>
            break;
c01020d5:	90                   	nop
        }
    }
    return argc;
c01020d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01020d9:	c9                   	leave  
c01020da:	c3                   	ret    

c01020db <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c01020db:	f3 0f 1e fb          	endbr32 
c01020df:	55                   	push   %ebp
c01020e0:	89 e5                	mov    %esp,%ebp
c01020e2:	83 ec 58             	sub    $0x58,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c01020e5:	83 ec 08             	sub    $0x8,%esp
c01020e8:	8d 45 b0             	lea    -0x50(%ebp),%eax
c01020eb:	50                   	push   %eax
c01020ec:	ff 75 08             	pushl  0x8(%ebp)
c01020ef:	e8 2b ff ff ff       	call   c010201f <parse>
c01020f4:	83 c4 10             	add    $0x10,%esp
c01020f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c01020fa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01020fe:	75 0a                	jne    c010210a <runcmd+0x2f>
        return 0;
c0102100:	b8 00 00 00 00       	mov    $0x0,%eax
c0102105:	e9 83 00 00 00       	jmp    c010218d <runcmd+0xb2>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c010210a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0102111:	eb 59                	jmp    c010216c <runcmd+0x91>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0102113:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0102116:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102119:	89 d0                	mov    %edx,%eax
c010211b:	01 c0                	add    %eax,%eax
c010211d:	01 d0                	add    %edx,%eax
c010211f:	c1 e0 02             	shl    $0x2,%eax
c0102122:	05 00 20 13 c0       	add    $0xc0132000,%eax
c0102127:	8b 00                	mov    (%eax),%eax
c0102129:	83 ec 08             	sub    $0x8,%esp
c010212c:	51                   	push   %ecx
c010212d:	50                   	push   %eax
c010212e:	e8 bd 9e 00 00       	call   c010bff0 <strcmp>
c0102133:	83 c4 10             	add    $0x10,%esp
c0102136:	85 c0                	test   %eax,%eax
c0102138:	75 2e                	jne    c0102168 <runcmd+0x8d>
            return commands[i].func(argc - 1, argv + 1, tf);
c010213a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010213d:	89 d0                	mov    %edx,%eax
c010213f:	01 c0                	add    %eax,%eax
c0102141:	01 d0                	add    %edx,%eax
c0102143:	c1 e0 02             	shl    $0x2,%eax
c0102146:	05 08 20 13 c0       	add    $0xc0132008,%eax
c010214b:	8b 10                	mov    (%eax),%edx
c010214d:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0102150:	83 c0 04             	add    $0x4,%eax
c0102153:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0102156:	83 e9 01             	sub    $0x1,%ecx
c0102159:	83 ec 04             	sub    $0x4,%esp
c010215c:	ff 75 0c             	pushl  0xc(%ebp)
c010215f:	50                   	push   %eax
c0102160:	51                   	push   %ecx
c0102161:	ff d2                	call   *%edx
c0102163:	83 c4 10             	add    $0x10,%esp
c0102166:	eb 25                	jmp    c010218d <runcmd+0xb2>
    for (i = 0; i < NCOMMANDS; i ++) {
c0102168:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010216c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010216f:	83 f8 02             	cmp    $0x2,%eax
c0102172:	76 9f                	jbe    c0102113 <runcmd+0x38>
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0102174:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0102177:	83 ec 08             	sub    $0x8,%esp
c010217a:	50                   	push   %eax
c010217b:	68 3b d0 10 c0       	push   $0xc010d03b
c0102180:	e8 2d e1 ff ff       	call   c01002b2 <cprintf>
c0102185:	83 c4 10             	add    $0x10,%esp
    return 0;
c0102188:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010218d:	c9                   	leave  
c010218e:	c3                   	ret    

c010218f <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c010218f:	f3 0f 1e fb          	endbr32 
c0102193:	55                   	push   %ebp
c0102194:	89 e5                	mov    %esp,%ebp
c0102196:	83 ec 18             	sub    $0x18,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0102199:	83 ec 0c             	sub    $0xc,%esp
c010219c:	68 54 d0 10 c0       	push   $0xc010d054
c01021a1:	e8 0c e1 ff ff       	call   c01002b2 <cprintf>
c01021a6:	83 c4 10             	add    $0x10,%esp
    cprintf("Type 'help' for a list of commands.\n");
c01021a9:	83 ec 0c             	sub    $0xc,%esp
c01021ac:	68 7c d0 10 c0       	push   $0xc010d07c
c01021b1:	e8 fc e0 ff ff       	call   c01002b2 <cprintf>
c01021b6:	83 c4 10             	add    $0x10,%esp

    if (tf != NULL) {
c01021b9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01021bd:	74 0e                	je     c01021cd <kmonitor+0x3e>
        print_trapframe(tf);
c01021bf:	83 ec 0c             	sub    $0xc,%esp
c01021c2:	ff 75 08             	pushl  0x8(%ebp)
c01021c5:	e8 44 16 00 00       	call   c010380e <print_trapframe>
c01021ca:	83 c4 10             	add    $0x10,%esp
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c01021cd:	83 ec 0c             	sub    $0xc,%esp
c01021d0:	68 a1 d0 10 c0       	push   $0xc010d0a1
c01021d5:	e8 4e f5 ff ff       	call   c0101728 <readline>
c01021da:	83 c4 10             	add    $0x10,%esp
c01021dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01021e0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01021e4:	74 e7                	je     c01021cd <kmonitor+0x3e>
            if (runcmd(buf, tf) < 0) {
c01021e6:	83 ec 08             	sub    $0x8,%esp
c01021e9:	ff 75 08             	pushl  0x8(%ebp)
c01021ec:	ff 75 f4             	pushl  -0xc(%ebp)
c01021ef:	e8 e7 fe ff ff       	call   c01020db <runcmd>
c01021f4:	83 c4 10             	add    $0x10,%esp
c01021f7:	85 c0                	test   %eax,%eax
c01021f9:	78 02                	js     c01021fd <kmonitor+0x6e>
        if ((buf = readline("K> ")) != NULL) {
c01021fb:	eb d0                	jmp    c01021cd <kmonitor+0x3e>
                break;
c01021fd:	90                   	nop
            }
        }
    }
}
c01021fe:	90                   	nop
c01021ff:	c9                   	leave  
c0102200:	c3                   	ret    

c0102201 <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0102201:	f3 0f 1e fb          	endbr32 
c0102205:	55                   	push   %ebp
c0102206:	89 e5                	mov    %esp,%ebp
c0102208:	83 ec 18             	sub    $0x18,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c010220b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0102212:	eb 3c                	jmp    c0102250 <mon_help+0x4f>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0102214:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102217:	89 d0                	mov    %edx,%eax
c0102219:	01 c0                	add    %eax,%eax
c010221b:	01 d0                	add    %edx,%eax
c010221d:	c1 e0 02             	shl    $0x2,%eax
c0102220:	05 04 20 13 c0       	add    $0xc0132004,%eax
c0102225:	8b 08                	mov    (%eax),%ecx
c0102227:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010222a:	89 d0                	mov    %edx,%eax
c010222c:	01 c0                	add    %eax,%eax
c010222e:	01 d0                	add    %edx,%eax
c0102230:	c1 e0 02             	shl    $0x2,%eax
c0102233:	05 00 20 13 c0       	add    $0xc0132000,%eax
c0102238:	8b 00                	mov    (%eax),%eax
c010223a:	83 ec 04             	sub    $0x4,%esp
c010223d:	51                   	push   %ecx
c010223e:	50                   	push   %eax
c010223f:	68 a5 d0 10 c0       	push   $0xc010d0a5
c0102244:	e8 69 e0 ff ff       	call   c01002b2 <cprintf>
c0102249:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < NCOMMANDS; i ++) {
c010224c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0102250:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102253:	83 f8 02             	cmp    $0x2,%eax
c0102256:	76 bc                	jbe    c0102214 <mon_help+0x13>
    }
    return 0;
c0102258:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010225d:	c9                   	leave  
c010225e:	c3                   	ret    

c010225f <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c010225f:	f3 0f 1e fb          	endbr32 
c0102263:	55                   	push   %ebp
c0102264:	89 e5                	mov    %esp,%ebp
c0102266:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0102269:	e8 94 fb ff ff       	call   c0101e02 <print_kerninfo>
    return 0;
c010226e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0102273:	c9                   	leave  
c0102274:	c3                   	ret    

c0102275 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0102275:	f3 0f 1e fb          	endbr32 
c0102279:	55                   	push   %ebp
c010227a:	89 e5                	mov    %esp,%ebp
c010227c:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c010227f:	e8 d2 fc ff ff       	call   c0101f56 <print_stackframe>
    return 0;
c0102284:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0102289:	c9                   	leave  
c010228a:	c3                   	ret    

c010228b <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c010228b:	f3 0f 1e fb          	endbr32 
c010228f:	55                   	push   %ebp
c0102290:	89 e5                	mov    %esp,%ebp
c0102292:	83 ec 14             	sub    $0x14,%esp
c0102295:	8b 45 08             	mov    0x8(%ebp),%eax
c0102298:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c010229c:	90                   	nop
c010229d:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01022a1:	83 c0 07             	add    $0x7,%eax
c01022a4:	0f b7 c0             	movzwl %ax,%eax
c01022a7:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01022ab:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01022af:	89 c2                	mov    %eax,%edx
c01022b1:	ec                   	in     (%dx),%al
c01022b2:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01022b5:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01022b9:	0f b6 c0             	movzbl %al,%eax
c01022bc:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01022bf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022c2:	25 80 00 00 00       	and    $0x80,%eax
c01022c7:	85 c0                	test   %eax,%eax
c01022c9:	75 d2                	jne    c010229d <ide_wait_ready+0x12>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c01022cb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01022cf:	74 11                	je     c01022e2 <ide_wait_ready+0x57>
c01022d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022d4:	83 e0 21             	and    $0x21,%eax
c01022d7:	85 c0                	test   %eax,%eax
c01022d9:	74 07                	je     c01022e2 <ide_wait_ready+0x57>
        return -1;
c01022db:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01022e0:	eb 05                	jmp    c01022e7 <ide_wait_ready+0x5c>
    }
    return 0;
c01022e2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01022e7:	c9                   	leave  
c01022e8:	c3                   	ret    

c01022e9 <ide_init>:

void
ide_init(void) {
c01022e9:	f3 0f 1e fb          	endbr32 
c01022ed:	55                   	push   %ebp
c01022ee:	89 e5                	mov    %esp,%ebp
c01022f0:	57                   	push   %edi
c01022f1:	53                   	push   %ebx
c01022f2:	81 ec 40 02 00 00    	sub    $0x240,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c01022f8:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c01022fe:	e9 6b 02 00 00       	jmp    c010256e <ide_init+0x285>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c0102303:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102307:	6b c0 38             	imul   $0x38,%eax,%eax
c010230a:	05 40 54 1b c0       	add    $0xc01b5440,%eax
c010230f:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0102312:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102316:	66 d1 e8             	shr    %ax
c0102319:	0f b7 c0             	movzwl %ax,%eax
c010231c:	0f b7 04 85 b0 d0 10 	movzwl -0x3fef2f50(,%eax,4),%eax
c0102323:	c0 
c0102324:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c0102328:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c010232c:	6a 00                	push   $0x0
c010232e:	50                   	push   %eax
c010232f:	e8 57 ff ff ff       	call   c010228b <ide_wait_ready>
c0102334:	83 c4 08             	add    $0x8,%esp

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0102337:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010233b:	c1 e0 04             	shl    $0x4,%eax
c010233e:	83 e0 10             	and    $0x10,%eax
c0102341:	83 c8 e0             	or     $0xffffffe0,%eax
c0102344:	0f b6 c0             	movzbl %al,%eax
c0102347:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010234b:	83 c2 06             	add    $0x6,%edx
c010234e:	0f b7 d2             	movzwl %dx,%edx
c0102351:	66 89 55 ca          	mov    %dx,-0x36(%ebp)
c0102355:	88 45 c9             	mov    %al,-0x37(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102358:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c010235c:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c0102360:	ee                   	out    %al,(%dx)
}
c0102361:	90                   	nop
        ide_wait_ready(iobase, 0);
c0102362:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0102366:	6a 00                	push   $0x0
c0102368:	50                   	push   %eax
c0102369:	e8 1d ff ff ff       	call   c010228b <ide_wait_ready>
c010236e:	83 c4 08             	add    $0x8,%esp

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c0102371:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0102375:	83 c0 07             	add    $0x7,%eax
c0102378:	0f b7 c0             	movzwl %ax,%eax
c010237b:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
c010237f:	c6 45 cd ec          	movb   $0xec,-0x33(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102383:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c0102387:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c010238b:	ee                   	out    %al,(%dx)
}
c010238c:	90                   	nop
        ide_wait_ready(iobase, 0);
c010238d:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0102391:	6a 00                	push   $0x0
c0102393:	50                   	push   %eax
c0102394:	e8 f2 fe ff ff       	call   c010228b <ide_wait_ready>
c0102399:	83 c4 08             	add    $0x8,%esp

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c010239c:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01023a0:	83 c0 07             	add    $0x7,%eax
c01023a3:	0f b7 c0             	movzwl %ax,%eax
c01023a6:	66 89 45 d2          	mov    %ax,-0x2e(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01023aa:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
c01023ae:	89 c2                	mov    %eax,%edx
c01023b0:	ec                   	in     (%dx),%al
c01023b1:	88 45 d1             	mov    %al,-0x2f(%ebp)
    return data;
c01023b4:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c01023b8:	84 c0                	test   %al,%al
c01023ba:	0f 84 a2 01 00 00    	je     c0102562 <ide_init+0x279>
c01023c0:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01023c4:	6a 01                	push   $0x1
c01023c6:	50                   	push   %eax
c01023c7:	e8 bf fe ff ff       	call   c010228b <ide_wait_ready>
c01023cc:	83 c4 08             	add    $0x8,%esp
c01023cf:	85 c0                	test   %eax,%eax
c01023d1:	0f 85 8b 01 00 00    	jne    c0102562 <ide_init+0x279>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c01023d7:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01023db:	6b c0 38             	imul   $0x38,%eax,%eax
c01023de:	05 40 54 1b c0       	add    $0xc01b5440,%eax
c01023e3:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c01023e6:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01023ea:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c01023ed:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c01023f3:	89 45 c0             	mov    %eax,-0x40(%ebp)
c01023f6:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
    asm volatile (
c01023fd:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0102400:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0102403:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0102406:	89 cb                	mov    %ecx,%ebx
c0102408:	89 df                	mov    %ebx,%edi
c010240a:	89 c1                	mov    %eax,%ecx
c010240c:	fc                   	cld    
c010240d:	f2 6d                	repnz insl (%dx),%es:(%edi)
c010240f:	89 c8                	mov    %ecx,%eax
c0102411:	89 fb                	mov    %edi,%ebx
c0102413:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c0102416:	89 45 bc             	mov    %eax,-0x44(%ebp)
}
c0102419:	90                   	nop

        unsigned char *ident = (unsigned char *)buffer;
c010241a:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0102420:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c0102423:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102426:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c010242c:	89 45 e0             	mov    %eax,-0x20(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c010242f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0102432:	25 00 00 00 04       	and    $0x4000000,%eax
c0102437:	85 c0                	test   %eax,%eax
c0102439:	74 0e                	je     c0102449 <ide_init+0x160>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c010243b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010243e:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c0102444:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0102447:	eb 09                	jmp    c0102452 <ide_init+0x169>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0102449:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010244c:	8b 40 78             	mov    0x78(%eax),%eax
c010244f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c0102452:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102456:	6b c0 38             	imul   $0x38,%eax,%eax
c0102459:	8d 90 44 54 1b c0    	lea    -0x3fe4abbc(%eax),%edx
c010245f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0102462:	89 02                	mov    %eax,(%edx)
        ide_devices[ideno].size = sectors;
c0102464:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102468:	6b c0 38             	imul   $0x38,%eax,%eax
c010246b:	8d 90 48 54 1b c0    	lea    -0x3fe4abb8(%eax),%edx
c0102471:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102474:	89 02                	mov    %eax,(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c0102476:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102479:	83 c0 62             	add    $0x62,%eax
c010247c:	0f b7 00             	movzwl (%eax),%eax
c010247f:	0f b7 c0             	movzwl %ax,%eax
c0102482:	25 00 02 00 00       	and    $0x200,%eax
c0102487:	85 c0                	test   %eax,%eax
c0102489:	75 16                	jne    c01024a1 <ide_init+0x1b8>
c010248b:	68 b8 d0 10 c0       	push   $0xc010d0b8
c0102490:	68 fb d0 10 c0       	push   $0xc010d0fb
c0102495:	6a 7d                	push   $0x7d
c0102497:	68 10 d1 10 c0       	push   $0xc010d110
c010249c:	e8 4d f3 ff ff       	call   c01017ee <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c01024a1:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01024a5:	6b c0 38             	imul   $0x38,%eax,%eax
c01024a8:	05 40 54 1b c0       	add    $0xc01b5440,%eax
c01024ad:	83 c0 0c             	add    $0xc,%eax
c01024b0:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01024b3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01024b6:	83 c0 36             	add    $0x36,%eax
c01024b9:	89 45 d8             	mov    %eax,-0x28(%ebp)
        unsigned int i, length = 40;
c01024bc:	c7 45 d4 28 00 00 00 	movl   $0x28,-0x2c(%ebp)
        for (i = 0; i < length; i += 2) {
c01024c3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01024ca:	eb 34                	jmp    c0102500 <ide_init+0x217>
            model[i] = data[i + 1], model[i + 1] = data[i];
c01024cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01024cf:	8d 50 01             	lea    0x1(%eax),%edx
c01024d2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01024d5:	01 d0                	add    %edx,%eax
c01024d7:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c01024da:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01024dd:	01 ca                	add    %ecx,%edx
c01024df:	0f b6 00             	movzbl (%eax),%eax
c01024e2:	88 02                	mov    %al,(%edx)
c01024e4:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01024e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01024ea:	01 d0                	add    %edx,%eax
c01024ec:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01024ef:	8d 4a 01             	lea    0x1(%edx),%ecx
c01024f2:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01024f5:	01 ca                	add    %ecx,%edx
c01024f7:	0f b6 00             	movzbl (%eax),%eax
c01024fa:	88 02                	mov    %al,(%edx)
        for (i = 0; i < length; i += 2) {
c01024fc:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0102500:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102503:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0102506:	72 c4                	jb     c01024cc <ide_init+0x1e3>
        }
        do {
            model[i] = '\0';
c0102508:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010250b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010250e:	01 d0                	add    %edx,%eax
c0102510:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0102513:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102516:	8d 50 ff             	lea    -0x1(%eax),%edx
c0102519:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010251c:	85 c0                	test   %eax,%eax
c010251e:	74 0f                	je     c010252f <ide_init+0x246>
c0102520:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0102523:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102526:	01 d0                	add    %edx,%eax
c0102528:	0f b6 00             	movzbl (%eax),%eax
c010252b:	3c 20                	cmp    $0x20,%al
c010252d:	74 d9                	je     c0102508 <ide_init+0x21f>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c010252f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102533:	6b c0 38             	imul   $0x38,%eax,%eax
c0102536:	05 40 54 1b c0       	add    $0xc01b5440,%eax
c010253b:	8d 48 0c             	lea    0xc(%eax),%ecx
c010253e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102542:	6b c0 38             	imul   $0x38,%eax,%eax
c0102545:	05 48 54 1b c0       	add    $0xc01b5448,%eax
c010254a:	8b 10                	mov    (%eax),%edx
c010254c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102550:	51                   	push   %ecx
c0102551:	52                   	push   %edx
c0102552:	50                   	push   %eax
c0102553:	68 22 d1 10 c0       	push   $0xc010d122
c0102558:	e8 55 dd ff ff       	call   c01002b2 <cprintf>
c010255d:	83 c4 10             	add    $0x10,%esp
c0102560:	eb 01                	jmp    c0102563 <ide_init+0x27a>
            continue ;
c0102562:	90                   	nop
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0102563:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102567:	83 c0 01             	add    $0x1,%eax
c010256a:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c010256e:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c0102573:	0f 86 8a fd ff ff    	jbe    c0102303 <ide_init+0x1a>
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c0102579:	83 ec 0c             	sub    $0xc,%esp
c010257c:	6a 0e                	push   $0xe
c010257e:	e8 f0 0e 00 00       	call   c0103473 <pic_enable>
c0102583:	83 c4 10             	add    $0x10,%esp
    pic_enable(IRQ_IDE2);
c0102586:	83 ec 0c             	sub    $0xc,%esp
c0102589:	6a 0f                	push   $0xf
c010258b:	e8 e3 0e 00 00       	call   c0103473 <pic_enable>
c0102590:	83 c4 10             	add    $0x10,%esp
}
c0102593:	90                   	nop
c0102594:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0102597:	5b                   	pop    %ebx
c0102598:	5f                   	pop    %edi
c0102599:	5d                   	pop    %ebp
c010259a:	c3                   	ret    

c010259b <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c010259b:	f3 0f 1e fb          	endbr32 
c010259f:	55                   	push   %ebp
c01025a0:	89 e5                	mov    %esp,%ebp
c01025a2:	83 ec 04             	sub    $0x4,%esp
c01025a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01025a8:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c01025ac:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c01025b1:	77 1a                	ja     c01025cd <ide_device_valid+0x32>
c01025b3:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c01025b7:	6b c0 38             	imul   $0x38,%eax,%eax
c01025ba:	05 40 54 1b c0       	add    $0xc01b5440,%eax
c01025bf:	0f b6 00             	movzbl (%eax),%eax
c01025c2:	84 c0                	test   %al,%al
c01025c4:	74 07                	je     c01025cd <ide_device_valid+0x32>
c01025c6:	b8 01 00 00 00       	mov    $0x1,%eax
c01025cb:	eb 05                	jmp    c01025d2 <ide_device_valid+0x37>
c01025cd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01025d2:	c9                   	leave  
c01025d3:	c3                   	ret    

c01025d4 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c01025d4:	f3 0f 1e fb          	endbr32 
c01025d8:	55                   	push   %ebp
c01025d9:	89 e5                	mov    %esp,%ebp
c01025db:	83 ec 04             	sub    $0x4,%esp
c01025de:	8b 45 08             	mov    0x8(%ebp),%eax
c01025e1:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c01025e5:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c01025e9:	50                   	push   %eax
c01025ea:	e8 ac ff ff ff       	call   c010259b <ide_device_valid>
c01025ef:	83 c4 04             	add    $0x4,%esp
c01025f2:	85 c0                	test   %eax,%eax
c01025f4:	74 10                	je     c0102606 <ide_device_size+0x32>
        return ide_devices[ideno].size;
c01025f6:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c01025fa:	6b c0 38             	imul   $0x38,%eax,%eax
c01025fd:	05 48 54 1b c0       	add    $0xc01b5448,%eax
c0102602:	8b 00                	mov    (%eax),%eax
c0102604:	eb 05                	jmp    c010260b <ide_device_size+0x37>
    }
    return 0;
c0102606:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010260b:	c9                   	leave  
c010260c:	c3                   	ret    

c010260d <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c010260d:	f3 0f 1e fb          	endbr32 
c0102611:	55                   	push   %ebp
c0102612:	89 e5                	mov    %esp,%ebp
c0102614:	57                   	push   %edi
c0102615:	53                   	push   %ebx
c0102616:	83 ec 40             	sub    $0x40,%esp
c0102619:	8b 45 08             	mov    0x8(%ebp),%eax
c010261c:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0102620:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0102627:	77 1a                	ja     c0102643 <ide_read_secs+0x36>
c0102629:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c010262e:	77 13                	ja     c0102643 <ide_read_secs+0x36>
c0102630:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0102634:	6b c0 38             	imul   $0x38,%eax,%eax
c0102637:	05 40 54 1b c0       	add    $0xc01b5440,%eax
c010263c:	0f b6 00             	movzbl (%eax),%eax
c010263f:	84 c0                	test   %al,%al
c0102641:	75 19                	jne    c010265c <ide_read_secs+0x4f>
c0102643:	68 40 d1 10 c0       	push   $0xc010d140
c0102648:	68 fb d0 10 c0       	push   $0xc010d0fb
c010264d:	68 9f 00 00 00       	push   $0x9f
c0102652:	68 10 d1 10 c0       	push   $0xc010d110
c0102657:	e8 92 f1 ff ff       	call   c01017ee <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c010265c:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0102663:	77 0f                	ja     c0102674 <ide_read_secs+0x67>
c0102665:	8b 55 0c             	mov    0xc(%ebp),%edx
c0102668:	8b 45 14             	mov    0x14(%ebp),%eax
c010266b:	01 d0                	add    %edx,%eax
c010266d:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0102672:	76 19                	jbe    c010268d <ide_read_secs+0x80>
c0102674:	68 68 d1 10 c0       	push   $0xc010d168
c0102679:	68 fb d0 10 c0       	push   $0xc010d0fb
c010267e:	68 a0 00 00 00       	push   $0xa0
c0102683:	68 10 d1 10 c0       	push   $0xc010d110
c0102688:	e8 61 f1 ff ff       	call   c01017ee <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c010268d:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0102691:	66 d1 e8             	shr    %ax
c0102694:	0f b7 c0             	movzwl %ax,%eax
c0102697:	0f b7 04 85 b0 d0 10 	movzwl -0x3fef2f50(,%eax,4),%eax
c010269e:	c0 
c010269f:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01026a3:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01026a7:	66 d1 e8             	shr    %ax
c01026aa:	0f b7 c0             	movzwl %ax,%eax
c01026ad:	0f b7 04 85 b2 d0 10 	movzwl -0x3fef2f4e(,%eax,4),%eax
c01026b4:	c0 
c01026b5:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c01026b9:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01026bd:	83 ec 08             	sub    $0x8,%esp
c01026c0:	6a 00                	push   $0x0
c01026c2:	50                   	push   %eax
c01026c3:	e8 c3 fb ff ff       	call   c010228b <ide_wait_ready>
c01026c8:	83 c4 10             	add    $0x10,%esp

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c01026cb:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01026cf:	83 c0 02             	add    $0x2,%eax
c01026d2:	0f b7 c0             	movzwl %ax,%eax
c01026d5:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c01026d9:	c6 45 d5 00          	movb   $0x0,-0x2b(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01026dd:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c01026e1:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01026e5:	ee                   	out    %al,(%dx)
}
c01026e6:	90                   	nop
    outb(iobase + ISA_SECCNT, nsecs);
c01026e7:	8b 45 14             	mov    0x14(%ebp),%eax
c01026ea:	0f b6 c0             	movzbl %al,%eax
c01026ed:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01026f1:	83 c2 02             	add    $0x2,%edx
c01026f4:	0f b7 d2             	movzwl %dx,%edx
c01026f7:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c01026fb:	88 45 d9             	mov    %al,-0x27(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01026fe:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0102702:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0102706:	ee                   	out    %al,(%dx)
}
c0102707:	90                   	nop
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0102708:	8b 45 0c             	mov    0xc(%ebp),%eax
c010270b:	0f b6 c0             	movzbl %al,%eax
c010270e:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102712:	83 c2 03             	add    $0x3,%edx
c0102715:	0f b7 d2             	movzwl %dx,%edx
c0102718:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c010271c:	88 45 dd             	mov    %al,-0x23(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010271f:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102723:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102727:	ee                   	out    %al,(%dx)
}
c0102728:	90                   	nop
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0102729:	8b 45 0c             	mov    0xc(%ebp),%eax
c010272c:	c1 e8 08             	shr    $0x8,%eax
c010272f:	0f b6 c0             	movzbl %al,%eax
c0102732:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102736:	83 c2 04             	add    $0x4,%edx
c0102739:	0f b7 d2             	movzwl %dx,%edx
c010273c:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0102740:	88 45 e1             	mov    %al,-0x1f(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102743:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102747:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c010274b:	ee                   	out    %al,(%dx)
}
c010274c:	90                   	nop
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c010274d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102750:	c1 e8 10             	shr    $0x10,%eax
c0102753:	0f b6 c0             	movzbl %al,%eax
c0102756:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010275a:	83 c2 05             	add    $0x5,%edx
c010275d:	0f b7 d2             	movzwl %dx,%edx
c0102760:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0102764:	88 45 e5             	mov    %al,-0x1b(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102767:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c010276b:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010276f:	ee                   	out    %al,(%dx)
}
c0102770:	90                   	nop
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0102771:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0102775:	c1 e0 04             	shl    $0x4,%eax
c0102778:	83 e0 10             	and    $0x10,%eax
c010277b:	89 c2                	mov    %eax,%edx
c010277d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102780:	c1 e8 18             	shr    $0x18,%eax
c0102783:	83 e0 0f             	and    $0xf,%eax
c0102786:	09 d0                	or     %edx,%eax
c0102788:	83 c8 e0             	or     $0xffffffe0,%eax
c010278b:	0f b6 c0             	movzbl %al,%eax
c010278e:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102792:	83 c2 06             	add    $0x6,%edx
c0102795:	0f b7 d2             	movzwl %dx,%edx
c0102798:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c010279c:	88 45 e9             	mov    %al,-0x17(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010279f:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01027a3:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01027a7:	ee                   	out    %al,(%dx)
}
c01027a8:	90                   	nop
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c01027a9:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01027ad:	83 c0 07             	add    $0x7,%eax
c01027b0:	0f b7 c0             	movzwl %ax,%eax
c01027b3:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c01027b7:	c6 45 ed 20          	movb   $0x20,-0x13(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01027bb:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01027bf:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01027c3:	ee                   	out    %al,(%dx)
}
c01027c4:	90                   	nop

    int ret = 0;
c01027c5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c01027cc:	eb 57                	jmp    c0102825 <ide_read_secs+0x218>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c01027ce:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01027d2:	83 ec 08             	sub    $0x8,%esp
c01027d5:	6a 01                	push   $0x1
c01027d7:	50                   	push   %eax
c01027d8:	e8 ae fa ff ff       	call   c010228b <ide_wait_ready>
c01027dd:	83 c4 10             	add    $0x10,%esp
c01027e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01027e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01027e7:	75 44                	jne    c010282d <ide_read_secs+0x220>
            goto out;
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c01027e9:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01027ed:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01027f0:	8b 45 10             	mov    0x10(%ebp),%eax
c01027f3:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01027f6:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile (
c01027fd:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0102800:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0102803:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0102806:	89 cb                	mov    %ecx,%ebx
c0102808:	89 df                	mov    %ebx,%edi
c010280a:	89 c1                	mov    %eax,%ecx
c010280c:	fc                   	cld    
c010280d:	f2 6d                	repnz insl (%dx),%es:(%edi)
c010280f:	89 c8                	mov    %ecx,%eax
c0102811:	89 fb                	mov    %edi,%ebx
c0102813:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0102816:	89 45 c8             	mov    %eax,-0x38(%ebp)
}
c0102819:	90                   	nop
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c010281a:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c010281e:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0102825:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0102829:	75 a3                	jne    c01027ce <ide_read_secs+0x1c1>
    }

out:
c010282b:	eb 01                	jmp    c010282e <ide_read_secs+0x221>
            goto out;
c010282d:	90                   	nop
    return ret;
c010282e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0102831:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0102834:	5b                   	pop    %ebx
c0102835:	5f                   	pop    %edi
c0102836:	5d                   	pop    %ebp
c0102837:	c3                   	ret    

c0102838 <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0102838:	f3 0f 1e fb          	endbr32 
c010283c:	55                   	push   %ebp
c010283d:	89 e5                	mov    %esp,%ebp
c010283f:	56                   	push   %esi
c0102840:	53                   	push   %ebx
c0102841:	83 ec 40             	sub    $0x40,%esp
c0102844:	8b 45 08             	mov    0x8(%ebp),%eax
c0102847:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c010284b:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0102852:	77 1a                	ja     c010286e <ide_write_secs+0x36>
c0102854:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0102859:	77 13                	ja     c010286e <ide_write_secs+0x36>
c010285b:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010285f:	6b c0 38             	imul   $0x38,%eax,%eax
c0102862:	05 40 54 1b c0       	add    $0xc01b5440,%eax
c0102867:	0f b6 00             	movzbl (%eax),%eax
c010286a:	84 c0                	test   %al,%al
c010286c:	75 19                	jne    c0102887 <ide_write_secs+0x4f>
c010286e:	68 40 d1 10 c0       	push   $0xc010d140
c0102873:	68 fb d0 10 c0       	push   $0xc010d0fb
c0102878:	68 bc 00 00 00       	push   $0xbc
c010287d:	68 10 d1 10 c0       	push   $0xc010d110
c0102882:	e8 67 ef ff ff       	call   c01017ee <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0102887:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c010288e:	77 0f                	ja     c010289f <ide_write_secs+0x67>
c0102890:	8b 55 0c             	mov    0xc(%ebp),%edx
c0102893:	8b 45 14             	mov    0x14(%ebp),%eax
c0102896:	01 d0                	add    %edx,%eax
c0102898:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c010289d:	76 19                	jbe    c01028b8 <ide_write_secs+0x80>
c010289f:	68 68 d1 10 c0       	push   $0xc010d168
c01028a4:	68 fb d0 10 c0       	push   $0xc010d0fb
c01028a9:	68 bd 00 00 00       	push   $0xbd
c01028ae:	68 10 d1 10 c0       	push   $0xc010d110
c01028b3:	e8 36 ef ff ff       	call   c01017ee <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c01028b8:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01028bc:	66 d1 e8             	shr    %ax
c01028bf:	0f b7 c0             	movzwl %ax,%eax
c01028c2:	0f b7 04 85 b0 d0 10 	movzwl -0x3fef2f50(,%eax,4),%eax
c01028c9:	c0 
c01028ca:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01028ce:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01028d2:	66 d1 e8             	shr    %ax
c01028d5:	0f b7 c0             	movzwl %ax,%eax
c01028d8:	0f b7 04 85 b2 d0 10 	movzwl -0x3fef2f4e(,%eax,4),%eax
c01028df:	c0 
c01028e0:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c01028e4:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01028e8:	83 ec 08             	sub    $0x8,%esp
c01028eb:	6a 00                	push   $0x0
c01028ed:	50                   	push   %eax
c01028ee:	e8 98 f9 ff ff       	call   c010228b <ide_wait_ready>
c01028f3:	83 c4 10             	add    $0x10,%esp

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c01028f6:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01028fa:	83 c0 02             	add    $0x2,%eax
c01028fd:	0f b7 c0             	movzwl %ax,%eax
c0102900:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0102904:	c6 45 d5 00          	movb   $0x0,-0x2b(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102908:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c010290c:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0102910:	ee                   	out    %al,(%dx)
}
c0102911:	90                   	nop
    outb(iobase + ISA_SECCNT, nsecs);
c0102912:	8b 45 14             	mov    0x14(%ebp),%eax
c0102915:	0f b6 c0             	movzbl %al,%eax
c0102918:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010291c:	83 c2 02             	add    $0x2,%edx
c010291f:	0f b7 d2             	movzwl %dx,%edx
c0102922:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0102926:	88 45 d9             	mov    %al,-0x27(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102929:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c010292d:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0102931:	ee                   	out    %al,(%dx)
}
c0102932:	90                   	nop
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0102933:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102936:	0f b6 c0             	movzbl %al,%eax
c0102939:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010293d:	83 c2 03             	add    $0x3,%edx
c0102940:	0f b7 d2             	movzwl %dx,%edx
c0102943:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0102947:	88 45 dd             	mov    %al,-0x23(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010294a:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010294e:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102952:	ee                   	out    %al,(%dx)
}
c0102953:	90                   	nop
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0102954:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102957:	c1 e8 08             	shr    $0x8,%eax
c010295a:	0f b6 c0             	movzbl %al,%eax
c010295d:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102961:	83 c2 04             	add    $0x4,%edx
c0102964:	0f b7 d2             	movzwl %dx,%edx
c0102967:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c010296b:	88 45 e1             	mov    %al,-0x1f(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010296e:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102972:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0102976:	ee                   	out    %al,(%dx)
}
c0102977:	90                   	nop
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0102978:	8b 45 0c             	mov    0xc(%ebp),%eax
c010297b:	c1 e8 10             	shr    $0x10,%eax
c010297e:	0f b6 c0             	movzbl %al,%eax
c0102981:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102985:	83 c2 05             	add    $0x5,%edx
c0102988:	0f b7 d2             	movzwl %dx,%edx
c010298b:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c010298f:	88 45 e5             	mov    %al,-0x1b(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102992:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102996:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010299a:	ee                   	out    %al,(%dx)
}
c010299b:	90                   	nop
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c010299c:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01029a0:	c1 e0 04             	shl    $0x4,%eax
c01029a3:	83 e0 10             	and    $0x10,%eax
c01029a6:	89 c2                	mov    %eax,%edx
c01029a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01029ab:	c1 e8 18             	shr    $0x18,%eax
c01029ae:	83 e0 0f             	and    $0xf,%eax
c01029b1:	09 d0                	or     %edx,%eax
c01029b3:	83 c8 e0             	or     $0xffffffe0,%eax
c01029b6:	0f b6 c0             	movzbl %al,%eax
c01029b9:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01029bd:	83 c2 06             	add    $0x6,%edx
c01029c0:	0f b7 d2             	movzwl %dx,%edx
c01029c3:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c01029c7:	88 45 e9             	mov    %al,-0x17(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01029ca:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01029ce:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01029d2:	ee                   	out    %al,(%dx)
}
c01029d3:	90                   	nop
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c01029d4:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01029d8:	83 c0 07             	add    $0x7,%eax
c01029db:	0f b7 c0             	movzwl %ax,%eax
c01029de:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c01029e2:	c6 45 ed 30          	movb   $0x30,-0x13(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01029e6:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01029ea:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01029ee:	ee                   	out    %al,(%dx)
}
c01029ef:	90                   	nop

    int ret = 0;
c01029f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c01029f7:	eb 57                	jmp    c0102a50 <ide_write_secs+0x218>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c01029f9:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01029fd:	83 ec 08             	sub    $0x8,%esp
c0102a00:	6a 01                	push   $0x1
c0102a02:	50                   	push   %eax
c0102a03:	e8 83 f8 ff ff       	call   c010228b <ide_wait_ready>
c0102a08:	83 c4 10             	add    $0x10,%esp
c0102a0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102a0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0102a12:	75 44                	jne    c0102a58 <ide_write_secs+0x220>
            goto out;
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c0102a14:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102a18:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0102a1b:	8b 45 10             	mov    0x10(%ebp),%eax
c0102a1e:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0102a21:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile (
c0102a28:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0102a2b:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0102a2e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0102a31:	89 cb                	mov    %ecx,%ebx
c0102a33:	89 de                	mov    %ebx,%esi
c0102a35:	89 c1                	mov    %eax,%ecx
c0102a37:	fc                   	cld    
c0102a38:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c0102a3a:	89 c8                	mov    %ecx,%eax
c0102a3c:	89 f3                	mov    %esi,%ebx
c0102a3e:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0102a41:	89 45 c8             	mov    %eax,-0x38(%ebp)
}
c0102a44:	90                   	nop
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0102a45:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0102a49:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0102a50:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0102a54:	75 a3                	jne    c01029f9 <ide_write_secs+0x1c1>
    }

out:
c0102a56:	eb 01                	jmp    c0102a59 <ide_write_secs+0x221>
            goto out;
c0102a58:	90                   	nop
    return ret;
c0102a59:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0102a5c:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0102a5f:	5b                   	pop    %ebx
c0102a60:	5e                   	pop    %esi
c0102a61:	5d                   	pop    %ebp
c0102a62:	c3                   	ret    

c0102a63 <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0102a63:	f3 0f 1e fb          	endbr32 
c0102a67:	55                   	push   %ebp
c0102a68:	89 e5                	mov    %esp,%ebp
c0102a6a:	83 ec 18             	sub    $0x18,%esp
c0102a6d:	66 c7 45 ee 43 00    	movw   $0x43,-0x12(%ebp)
c0102a73:	c6 45 ed 34          	movb   $0x34,-0x13(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102a77:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102a7b:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102a7f:	ee                   	out    %al,(%dx)
}
c0102a80:	90                   	nop
c0102a81:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c0102a87:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102a8b:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0102a8f:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102a93:	ee                   	out    %al,(%dx)
}
c0102a94:	90                   	nop
c0102a95:	66 c7 45 f6 40 00    	movw   $0x40,-0xa(%ebp)
c0102a9b:	c6 45 f5 2e          	movb   $0x2e,-0xb(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102a9f:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0102aa3:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0102aa7:	ee                   	out    %al,(%dx)
}
c0102aa8:	90                   	nop
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0102aa9:	c7 05 54 80 1b c0 00 	movl   $0x0,0xc01b8054
c0102ab0:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c0102ab3:	83 ec 0c             	sub    $0xc,%esp
c0102ab6:	68 a2 d1 10 c0       	push   $0xc010d1a2
c0102abb:	e8 f2 d7 ff ff       	call   c01002b2 <cprintf>
c0102ac0:	83 c4 10             	add    $0x10,%esp
    pic_enable(IRQ_TIMER);
c0102ac3:	83 ec 0c             	sub    $0xc,%esp
c0102ac6:	6a 00                	push   $0x0
c0102ac8:	e8 a6 09 00 00       	call   c0103473 <pic_enable>
c0102acd:	83 c4 10             	add    $0x10,%esp
}
c0102ad0:	90                   	nop
c0102ad1:	c9                   	leave  
c0102ad2:	c3                   	ret    

c0102ad3 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0102ad3:	55                   	push   %ebp
c0102ad4:	89 e5                	mov    %esp,%ebp
c0102ad6:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0102ad9:	9c                   	pushf  
c0102ada:	58                   	pop    %eax
c0102adb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0102ade:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0102ae1:	25 00 02 00 00       	and    $0x200,%eax
c0102ae6:	85 c0                	test   %eax,%eax
c0102ae8:	74 0c                	je     c0102af6 <__intr_save+0x23>
        intr_disable();
c0102aea:	e8 10 0b 00 00       	call   c01035ff <intr_disable>
        return 1;
c0102aef:	b8 01 00 00 00       	mov    $0x1,%eax
c0102af4:	eb 05                	jmp    c0102afb <__intr_save+0x28>
    }
    return 0;
c0102af6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0102afb:	c9                   	leave  
c0102afc:	c3                   	ret    

c0102afd <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0102afd:	55                   	push   %ebp
c0102afe:	89 e5                	mov    %esp,%ebp
c0102b00:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0102b03:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0102b07:	74 05                	je     c0102b0e <__intr_restore+0x11>
        intr_enable();
c0102b09:	e8 e5 0a 00 00       	call   c01035f3 <intr_enable>
    }
}
c0102b0e:	90                   	nop
c0102b0f:	c9                   	leave  
c0102b10:	c3                   	ret    

c0102b11 <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c0102b11:	f3 0f 1e fb          	endbr32 
c0102b15:	55                   	push   %ebp
c0102b16:	89 e5                	mov    %esp,%ebp
c0102b18:	83 ec 10             	sub    $0x10,%esp
c0102b1b:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102b21:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102b25:	89 c2                	mov    %eax,%edx
c0102b27:	ec                   	in     (%dx),%al
c0102b28:	88 45 f1             	mov    %al,-0xf(%ebp)
c0102b2b:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
c0102b31:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102b35:	89 c2                	mov    %eax,%edx
c0102b37:	ec                   	in     (%dx),%al
c0102b38:	88 45 f5             	mov    %al,-0xb(%ebp)
c0102b3b:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c0102b41:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0102b45:	89 c2                	mov    %eax,%edx
c0102b47:	ec                   	in     (%dx),%al
c0102b48:	88 45 f9             	mov    %al,-0x7(%ebp)
c0102b4b:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
c0102b51:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0102b55:	89 c2                	mov    %eax,%edx
c0102b57:	ec                   	in     (%dx),%al
c0102b58:	88 45 fd             	mov    %al,-0x3(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0102b5b:	90                   	nop
c0102b5c:	c9                   	leave  
c0102b5d:	c3                   	ret    

c0102b5e <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c0102b5e:	f3 0f 1e fb          	endbr32 
c0102b62:	55                   	push   %ebp
c0102b63:	89 e5                	mov    %esp,%ebp
c0102b65:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c0102b68:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c0102b6f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102b72:	0f b7 00             	movzwl (%eax),%eax
c0102b75:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c0102b79:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102b7c:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c0102b81:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102b84:	0f b7 00             	movzwl (%eax),%eax
c0102b87:	66 3d 5a a5          	cmp    $0xa55a,%ax
c0102b8b:	74 12                	je     c0102b9f <cga_init+0x41>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c0102b8d:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c0102b94:	66 c7 05 26 55 1b c0 	movw   $0x3b4,0xc01b5526
c0102b9b:	b4 03 
c0102b9d:	eb 13                	jmp    c0102bb2 <cga_init+0x54>
    } else {
        *cp = was;
c0102b9f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102ba2:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0102ba6:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c0102ba9:	66 c7 05 26 55 1b c0 	movw   $0x3d4,0xc01b5526
c0102bb0:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c0102bb2:	0f b7 05 26 55 1b c0 	movzwl 0xc01b5526,%eax
c0102bb9:	0f b7 c0             	movzwl %ax,%eax
c0102bbc:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
c0102bc0:	c6 45 e5 0e          	movb   $0xe,-0x1b(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102bc4:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102bc8:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102bcc:	ee                   	out    %al,(%dx)
}
c0102bcd:	90                   	nop
    pos = inb(addr_6845 + 1) << 8;
c0102bce:	0f b7 05 26 55 1b c0 	movzwl 0xc01b5526,%eax
c0102bd5:	83 c0 01             	add    $0x1,%eax
c0102bd8:	0f b7 c0             	movzwl %ax,%eax
c0102bdb:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102bdf:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0102be3:	89 c2                	mov    %eax,%edx
c0102be5:	ec                   	in     (%dx),%al
c0102be6:	88 45 e9             	mov    %al,-0x17(%ebp)
    return data;
c0102be9:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0102bed:	0f b6 c0             	movzbl %al,%eax
c0102bf0:	c1 e0 08             	shl    $0x8,%eax
c0102bf3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c0102bf6:	0f b7 05 26 55 1b c0 	movzwl 0xc01b5526,%eax
c0102bfd:	0f b7 c0             	movzwl %ax,%eax
c0102c00:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0102c04:	c6 45 ed 0f          	movb   $0xf,-0x13(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102c08:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102c0c:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102c10:	ee                   	out    %al,(%dx)
}
c0102c11:	90                   	nop
    pos |= inb(addr_6845 + 1);
c0102c12:	0f b7 05 26 55 1b c0 	movzwl 0xc01b5526,%eax
c0102c19:	83 c0 01             	add    $0x1,%eax
c0102c1c:	0f b7 c0             	movzwl %ax,%eax
c0102c1f:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102c23:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102c27:	89 c2                	mov    %eax,%edx
c0102c29:	ec                   	in     (%dx),%al
c0102c2a:	88 45 f1             	mov    %al,-0xf(%ebp)
    return data;
c0102c2d:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0102c31:	0f b6 c0             	movzbl %al,%eax
c0102c34:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c0102c37:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102c3a:	a3 20 55 1b c0       	mov    %eax,0xc01b5520
    crt_pos = pos;
c0102c3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102c42:	66 a3 24 55 1b c0    	mov    %ax,0xc01b5524
}
c0102c48:	90                   	nop
c0102c49:	c9                   	leave  
c0102c4a:	c3                   	ret    

c0102c4b <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c0102c4b:	f3 0f 1e fb          	endbr32 
c0102c4f:	55                   	push   %ebp
c0102c50:	89 e5                	mov    %esp,%ebp
c0102c52:	83 ec 38             	sub    $0x38,%esp
c0102c55:	66 c7 45 d2 fa 03    	movw   $0x3fa,-0x2e(%ebp)
c0102c5b:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102c5f:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c0102c63:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c0102c67:	ee                   	out    %al,(%dx)
}
c0102c68:	90                   	nop
c0102c69:	66 c7 45 d6 fb 03    	movw   $0x3fb,-0x2a(%ebp)
c0102c6f:	c6 45 d5 80          	movb   $0x80,-0x2b(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102c73:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0102c77:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0102c7b:	ee                   	out    %al,(%dx)
}
c0102c7c:	90                   	nop
c0102c7d:	66 c7 45 da f8 03    	movw   $0x3f8,-0x26(%ebp)
c0102c83:	c6 45 d9 0c          	movb   $0xc,-0x27(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102c87:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0102c8b:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0102c8f:	ee                   	out    %al,(%dx)
}
c0102c90:	90                   	nop
c0102c91:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
c0102c97:	c6 45 dd 00          	movb   $0x0,-0x23(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102c9b:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102c9f:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102ca3:	ee                   	out    %al,(%dx)
}
c0102ca4:	90                   	nop
c0102ca5:	66 c7 45 e2 fb 03    	movw   $0x3fb,-0x1e(%ebp)
c0102cab:	c6 45 e1 03          	movb   $0x3,-0x1f(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102caf:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102cb3:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0102cb7:	ee                   	out    %al,(%dx)
}
c0102cb8:	90                   	nop
c0102cb9:	66 c7 45 e6 fc 03    	movw   $0x3fc,-0x1a(%ebp)
c0102cbf:	c6 45 e5 00          	movb   $0x0,-0x1b(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102cc3:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102cc7:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102ccb:	ee                   	out    %al,(%dx)
}
c0102ccc:	90                   	nop
c0102ccd:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c0102cd3:	c6 45 e9 01          	movb   $0x1,-0x17(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102cd7:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0102cdb:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102cdf:	ee                   	out    %al,(%dx)
}
c0102ce0:	90                   	nop
c0102ce1:	66 c7 45 ee fd 03    	movw   $0x3fd,-0x12(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102ce7:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c0102ceb:	89 c2                	mov    %eax,%edx
c0102ced:	ec                   	in     (%dx),%al
c0102cee:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c0102cf1:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c0102cf5:	3c ff                	cmp    $0xff,%al
c0102cf7:	0f 95 c0             	setne  %al
c0102cfa:	0f b6 c0             	movzbl %al,%eax
c0102cfd:	a3 28 55 1b c0       	mov    %eax,0xc01b5528
c0102d02:	66 c7 45 f2 fa 03    	movw   $0x3fa,-0xe(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102d08:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102d0c:	89 c2                	mov    %eax,%edx
c0102d0e:	ec                   	in     (%dx),%al
c0102d0f:	88 45 f1             	mov    %al,-0xf(%ebp)
c0102d12:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
c0102d18:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102d1c:	89 c2                	mov    %eax,%edx
c0102d1e:	ec                   	in     (%dx),%al
c0102d1f:	88 45 f5             	mov    %al,-0xb(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c0102d22:	a1 28 55 1b c0       	mov    0xc01b5528,%eax
c0102d27:	85 c0                	test   %eax,%eax
c0102d29:	74 0d                	je     c0102d38 <serial_init+0xed>
        pic_enable(IRQ_COM1);
c0102d2b:	83 ec 0c             	sub    $0xc,%esp
c0102d2e:	6a 04                	push   $0x4
c0102d30:	e8 3e 07 00 00       	call   c0103473 <pic_enable>
c0102d35:	83 c4 10             	add    $0x10,%esp
    }
}
c0102d38:	90                   	nop
c0102d39:	c9                   	leave  
c0102d3a:	c3                   	ret    

c0102d3b <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c0102d3b:	f3 0f 1e fb          	endbr32 
c0102d3f:	55                   	push   %ebp
c0102d40:	89 e5                	mov    %esp,%ebp
c0102d42:	83 ec 20             	sub    $0x20,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0102d45:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102d4c:	eb 09                	jmp    c0102d57 <lpt_putc_sub+0x1c>
        delay();
c0102d4e:	e8 be fd ff ff       	call   c0102b11 <delay>
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0102d53:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102d57:	66 c7 45 fa 79 03    	movw   $0x379,-0x6(%ebp)
c0102d5d:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0102d61:	89 c2                	mov    %eax,%edx
c0102d63:	ec                   	in     (%dx),%al
c0102d64:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0102d67:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0102d6b:	84 c0                	test   %al,%al
c0102d6d:	78 09                	js     c0102d78 <lpt_putc_sub+0x3d>
c0102d6f:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0102d76:	7e d6                	jle    c0102d4e <lpt_putc_sub+0x13>
    }
    outb(LPTPORT + 0, c);
c0102d78:	8b 45 08             	mov    0x8(%ebp),%eax
c0102d7b:	0f b6 c0             	movzbl %al,%eax
c0102d7e:	66 c7 45 ee 78 03    	movw   $0x378,-0x12(%ebp)
c0102d84:	88 45 ed             	mov    %al,-0x13(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102d87:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102d8b:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102d8f:	ee                   	out    %al,(%dx)
}
c0102d90:	90                   	nop
c0102d91:	66 c7 45 f2 7a 03    	movw   $0x37a,-0xe(%ebp)
c0102d97:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102d9b:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0102d9f:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102da3:	ee                   	out    %al,(%dx)
}
c0102da4:	90                   	nop
c0102da5:	66 c7 45 f6 7a 03    	movw   $0x37a,-0xa(%ebp)
c0102dab:	c6 45 f5 08          	movb   $0x8,-0xb(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102daf:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0102db3:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0102db7:	ee                   	out    %al,(%dx)
}
c0102db8:	90                   	nop
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c0102db9:	90                   	nop
c0102dba:	c9                   	leave  
c0102dbb:	c3                   	ret    

c0102dbc <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c0102dbc:	f3 0f 1e fb          	endbr32 
c0102dc0:	55                   	push   %ebp
c0102dc1:	89 e5                	mov    %esp,%ebp
    if (c != '\b') {
c0102dc3:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0102dc7:	74 0d                	je     c0102dd6 <lpt_putc+0x1a>
        lpt_putc_sub(c);
c0102dc9:	ff 75 08             	pushl  0x8(%ebp)
c0102dcc:	e8 6a ff ff ff       	call   c0102d3b <lpt_putc_sub>
c0102dd1:	83 c4 04             	add    $0x4,%esp
    else {
        lpt_putc_sub('\b');
        lpt_putc_sub(' ');
        lpt_putc_sub('\b');
    }
}
c0102dd4:	eb 1e                	jmp    c0102df4 <lpt_putc+0x38>
        lpt_putc_sub('\b');
c0102dd6:	6a 08                	push   $0x8
c0102dd8:	e8 5e ff ff ff       	call   c0102d3b <lpt_putc_sub>
c0102ddd:	83 c4 04             	add    $0x4,%esp
        lpt_putc_sub(' ');
c0102de0:	6a 20                	push   $0x20
c0102de2:	e8 54 ff ff ff       	call   c0102d3b <lpt_putc_sub>
c0102de7:	83 c4 04             	add    $0x4,%esp
        lpt_putc_sub('\b');
c0102dea:	6a 08                	push   $0x8
c0102dec:	e8 4a ff ff ff       	call   c0102d3b <lpt_putc_sub>
c0102df1:	83 c4 04             	add    $0x4,%esp
}
c0102df4:	90                   	nop
c0102df5:	c9                   	leave  
c0102df6:	c3                   	ret    

c0102df7 <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c0102df7:	f3 0f 1e fb          	endbr32 
c0102dfb:	55                   	push   %ebp
c0102dfc:	89 e5                	mov    %esp,%ebp
c0102dfe:	53                   	push   %ebx
c0102dff:	83 ec 24             	sub    $0x24,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c0102e02:	8b 45 08             	mov    0x8(%ebp),%eax
c0102e05:	b0 00                	mov    $0x0,%al
c0102e07:	85 c0                	test   %eax,%eax
c0102e09:	75 07                	jne    c0102e12 <cga_putc+0x1b>
        c |= 0x0700;
c0102e0b:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c0102e12:	8b 45 08             	mov    0x8(%ebp),%eax
c0102e15:	0f b6 c0             	movzbl %al,%eax
c0102e18:	83 f8 0d             	cmp    $0xd,%eax
c0102e1b:	74 6c                	je     c0102e89 <cga_putc+0x92>
c0102e1d:	83 f8 0d             	cmp    $0xd,%eax
c0102e20:	0f 8f 9d 00 00 00    	jg     c0102ec3 <cga_putc+0xcc>
c0102e26:	83 f8 08             	cmp    $0x8,%eax
c0102e29:	74 0a                	je     c0102e35 <cga_putc+0x3e>
c0102e2b:	83 f8 0a             	cmp    $0xa,%eax
c0102e2e:	74 49                	je     c0102e79 <cga_putc+0x82>
c0102e30:	e9 8e 00 00 00       	jmp    c0102ec3 <cga_putc+0xcc>
    case '\b':
        if (crt_pos > 0) {
c0102e35:	0f b7 05 24 55 1b c0 	movzwl 0xc01b5524,%eax
c0102e3c:	66 85 c0             	test   %ax,%ax
c0102e3f:	0f 84 a4 00 00 00    	je     c0102ee9 <cga_putc+0xf2>
            crt_pos --;
c0102e45:	0f b7 05 24 55 1b c0 	movzwl 0xc01b5524,%eax
c0102e4c:	83 e8 01             	sub    $0x1,%eax
c0102e4f:	66 a3 24 55 1b c0    	mov    %ax,0xc01b5524
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c0102e55:	8b 45 08             	mov    0x8(%ebp),%eax
c0102e58:	b0 00                	mov    $0x0,%al
c0102e5a:	83 c8 20             	or     $0x20,%eax
c0102e5d:	89 c1                	mov    %eax,%ecx
c0102e5f:	a1 20 55 1b c0       	mov    0xc01b5520,%eax
c0102e64:	0f b7 15 24 55 1b c0 	movzwl 0xc01b5524,%edx
c0102e6b:	0f b7 d2             	movzwl %dx,%edx
c0102e6e:	01 d2                	add    %edx,%edx
c0102e70:	01 d0                	add    %edx,%eax
c0102e72:	89 ca                	mov    %ecx,%edx
c0102e74:	66 89 10             	mov    %dx,(%eax)
        }
        break;
c0102e77:	eb 70                	jmp    c0102ee9 <cga_putc+0xf2>
    case '\n':
        crt_pos += CRT_COLS;
c0102e79:	0f b7 05 24 55 1b c0 	movzwl 0xc01b5524,%eax
c0102e80:	83 c0 50             	add    $0x50,%eax
c0102e83:	66 a3 24 55 1b c0    	mov    %ax,0xc01b5524
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c0102e89:	0f b7 1d 24 55 1b c0 	movzwl 0xc01b5524,%ebx
c0102e90:	0f b7 0d 24 55 1b c0 	movzwl 0xc01b5524,%ecx
c0102e97:	0f b7 c1             	movzwl %cx,%eax
c0102e9a:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c0102ea0:	c1 e8 10             	shr    $0x10,%eax
c0102ea3:	89 c2                	mov    %eax,%edx
c0102ea5:	66 c1 ea 06          	shr    $0x6,%dx
c0102ea9:	89 d0                	mov    %edx,%eax
c0102eab:	c1 e0 02             	shl    $0x2,%eax
c0102eae:	01 d0                	add    %edx,%eax
c0102eb0:	c1 e0 04             	shl    $0x4,%eax
c0102eb3:	29 c1                	sub    %eax,%ecx
c0102eb5:	89 ca                	mov    %ecx,%edx
c0102eb7:	89 d8                	mov    %ebx,%eax
c0102eb9:	29 d0                	sub    %edx,%eax
c0102ebb:	66 a3 24 55 1b c0    	mov    %ax,0xc01b5524
        break;
c0102ec1:	eb 27                	jmp    c0102eea <cga_putc+0xf3>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c0102ec3:	8b 0d 20 55 1b c0    	mov    0xc01b5520,%ecx
c0102ec9:	0f b7 05 24 55 1b c0 	movzwl 0xc01b5524,%eax
c0102ed0:	8d 50 01             	lea    0x1(%eax),%edx
c0102ed3:	66 89 15 24 55 1b c0 	mov    %dx,0xc01b5524
c0102eda:	0f b7 c0             	movzwl %ax,%eax
c0102edd:	01 c0                	add    %eax,%eax
c0102edf:	01 c8                	add    %ecx,%eax
c0102ee1:	8b 55 08             	mov    0x8(%ebp),%edx
c0102ee4:	66 89 10             	mov    %dx,(%eax)
        break;
c0102ee7:	eb 01                	jmp    c0102eea <cga_putc+0xf3>
        break;
c0102ee9:	90                   	nop
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c0102eea:	0f b7 05 24 55 1b c0 	movzwl 0xc01b5524,%eax
c0102ef1:	66 3d cf 07          	cmp    $0x7cf,%ax
c0102ef5:	76 59                	jbe    c0102f50 <cga_putc+0x159>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c0102ef7:	a1 20 55 1b c0       	mov    0xc01b5520,%eax
c0102efc:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c0102f02:	a1 20 55 1b c0       	mov    0xc01b5520,%eax
c0102f07:	83 ec 04             	sub    $0x4,%esp
c0102f0a:	68 00 0f 00 00       	push   $0xf00
c0102f0f:	52                   	push   %edx
c0102f10:	50                   	push   %eax
c0102f11:	e8 8f 93 00 00       	call   c010c2a5 <memmove>
c0102f16:	83 c4 10             	add    $0x10,%esp
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0102f19:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c0102f20:	eb 15                	jmp    c0102f37 <cga_putc+0x140>
            crt_buf[i] = 0x0700 | ' ';
c0102f22:	a1 20 55 1b c0       	mov    0xc01b5520,%eax
c0102f27:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102f2a:	01 d2                	add    %edx,%edx
c0102f2c:	01 d0                	add    %edx,%eax
c0102f2e:	66 c7 00 20 07       	movw   $0x720,(%eax)
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0102f33:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0102f37:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c0102f3e:	7e e2                	jle    c0102f22 <cga_putc+0x12b>
        }
        crt_pos -= CRT_COLS;
c0102f40:	0f b7 05 24 55 1b c0 	movzwl 0xc01b5524,%eax
c0102f47:	83 e8 50             	sub    $0x50,%eax
c0102f4a:	66 a3 24 55 1b c0    	mov    %ax,0xc01b5524
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c0102f50:	0f b7 05 26 55 1b c0 	movzwl 0xc01b5526,%eax
c0102f57:	0f b7 c0             	movzwl %ax,%eax
c0102f5a:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
c0102f5e:	c6 45 e5 0e          	movb   $0xe,-0x1b(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102f62:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102f66:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102f6a:	ee                   	out    %al,(%dx)
}
c0102f6b:	90                   	nop
    outb(addr_6845 + 1, crt_pos >> 8);
c0102f6c:	0f b7 05 24 55 1b c0 	movzwl 0xc01b5524,%eax
c0102f73:	66 c1 e8 08          	shr    $0x8,%ax
c0102f77:	0f b6 c0             	movzbl %al,%eax
c0102f7a:	0f b7 15 26 55 1b c0 	movzwl 0xc01b5526,%edx
c0102f81:	83 c2 01             	add    $0x1,%edx
c0102f84:	0f b7 d2             	movzwl %dx,%edx
c0102f87:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0102f8b:	88 45 e9             	mov    %al,-0x17(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102f8e:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0102f92:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102f96:	ee                   	out    %al,(%dx)
}
c0102f97:	90                   	nop
    outb(addr_6845, 15);
c0102f98:	0f b7 05 26 55 1b c0 	movzwl 0xc01b5526,%eax
c0102f9f:	0f b7 c0             	movzwl %ax,%eax
c0102fa2:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0102fa6:	c6 45 ed 0f          	movb   $0xf,-0x13(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102faa:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102fae:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102fb2:	ee                   	out    %al,(%dx)
}
c0102fb3:	90                   	nop
    outb(addr_6845 + 1, crt_pos);
c0102fb4:	0f b7 05 24 55 1b c0 	movzwl 0xc01b5524,%eax
c0102fbb:	0f b6 c0             	movzbl %al,%eax
c0102fbe:	0f b7 15 26 55 1b c0 	movzwl 0xc01b5526,%edx
c0102fc5:	83 c2 01             	add    $0x1,%edx
c0102fc8:	0f b7 d2             	movzwl %dx,%edx
c0102fcb:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
c0102fcf:	88 45 f1             	mov    %al,-0xf(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102fd2:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0102fd6:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102fda:	ee                   	out    %al,(%dx)
}
c0102fdb:	90                   	nop
}
c0102fdc:	90                   	nop
c0102fdd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0102fe0:	c9                   	leave  
c0102fe1:	c3                   	ret    

c0102fe2 <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c0102fe2:	f3 0f 1e fb          	endbr32 
c0102fe6:	55                   	push   %ebp
c0102fe7:	89 e5                	mov    %esp,%ebp
c0102fe9:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0102fec:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102ff3:	eb 09                	jmp    c0102ffe <serial_putc_sub+0x1c>
        delay();
c0102ff5:	e8 17 fb ff ff       	call   c0102b11 <delay>
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0102ffa:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102ffe:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0103004:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0103008:	89 c2                	mov    %eax,%edx
c010300a:	ec                   	in     (%dx),%al
c010300b:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c010300e:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0103012:	0f b6 c0             	movzbl %al,%eax
c0103015:	83 e0 20             	and    $0x20,%eax
c0103018:	85 c0                	test   %eax,%eax
c010301a:	75 09                	jne    c0103025 <serial_putc_sub+0x43>
c010301c:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0103023:	7e d0                	jle    c0102ff5 <serial_putc_sub+0x13>
    }
    outb(COM1 + COM_TX, c);
c0103025:	8b 45 08             	mov    0x8(%ebp),%eax
c0103028:	0f b6 c0             	movzbl %al,%eax
c010302b:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
c0103031:	88 45 f5             	mov    %al,-0xb(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0103034:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0103038:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010303c:	ee                   	out    %al,(%dx)
}
c010303d:	90                   	nop
}
c010303e:	90                   	nop
c010303f:	c9                   	leave  
c0103040:	c3                   	ret    

c0103041 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c0103041:	f3 0f 1e fb          	endbr32 
c0103045:	55                   	push   %ebp
c0103046:	89 e5                	mov    %esp,%ebp
    if (c != '\b') {
c0103048:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c010304c:	74 0d                	je     c010305b <serial_putc+0x1a>
        serial_putc_sub(c);
c010304e:	ff 75 08             	pushl  0x8(%ebp)
c0103051:	e8 8c ff ff ff       	call   c0102fe2 <serial_putc_sub>
c0103056:	83 c4 04             	add    $0x4,%esp
    else {
        serial_putc_sub('\b');
        serial_putc_sub(' ');
        serial_putc_sub('\b');
    }
}
c0103059:	eb 1e                	jmp    c0103079 <serial_putc+0x38>
        serial_putc_sub('\b');
c010305b:	6a 08                	push   $0x8
c010305d:	e8 80 ff ff ff       	call   c0102fe2 <serial_putc_sub>
c0103062:	83 c4 04             	add    $0x4,%esp
        serial_putc_sub(' ');
c0103065:	6a 20                	push   $0x20
c0103067:	e8 76 ff ff ff       	call   c0102fe2 <serial_putc_sub>
c010306c:	83 c4 04             	add    $0x4,%esp
        serial_putc_sub('\b');
c010306f:	6a 08                	push   $0x8
c0103071:	e8 6c ff ff ff       	call   c0102fe2 <serial_putc_sub>
c0103076:	83 c4 04             	add    $0x4,%esp
}
c0103079:	90                   	nop
c010307a:	c9                   	leave  
c010307b:	c3                   	ret    

c010307c <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c010307c:	f3 0f 1e fb          	endbr32 
c0103080:	55                   	push   %ebp
c0103081:	89 e5                	mov    %esp,%ebp
c0103083:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c0103086:	eb 33                	jmp    c01030bb <cons_intr+0x3f>
        if (c != 0) {
c0103088:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010308c:	74 2d                	je     c01030bb <cons_intr+0x3f>
            cons.buf[cons.wpos ++] = c;
c010308e:	a1 44 57 1b c0       	mov    0xc01b5744,%eax
c0103093:	8d 50 01             	lea    0x1(%eax),%edx
c0103096:	89 15 44 57 1b c0    	mov    %edx,0xc01b5744
c010309c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010309f:	88 90 40 55 1b c0    	mov    %dl,-0x3fe4aac0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c01030a5:	a1 44 57 1b c0       	mov    0xc01b5744,%eax
c01030aa:	3d 00 02 00 00       	cmp    $0x200,%eax
c01030af:	75 0a                	jne    c01030bb <cons_intr+0x3f>
                cons.wpos = 0;
c01030b1:	c7 05 44 57 1b c0 00 	movl   $0x0,0xc01b5744
c01030b8:	00 00 00 
    while ((c = (*proc)()) != -1) {
c01030bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01030be:	ff d0                	call   *%eax
c01030c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01030c3:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c01030c7:	75 bf                	jne    c0103088 <cons_intr+0xc>
            }
        }
    }
}
c01030c9:	90                   	nop
c01030ca:	90                   	nop
c01030cb:	c9                   	leave  
c01030cc:	c3                   	ret    

c01030cd <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c01030cd:	f3 0f 1e fb          	endbr32 
c01030d1:	55                   	push   %ebp
c01030d2:	89 e5                	mov    %esp,%ebp
c01030d4:	83 ec 10             	sub    $0x10,%esp
c01030d7:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01030dd:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01030e1:	89 c2                	mov    %eax,%edx
c01030e3:	ec                   	in     (%dx),%al
c01030e4:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01030e7:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c01030eb:	0f b6 c0             	movzbl %al,%eax
c01030ee:	83 e0 01             	and    $0x1,%eax
c01030f1:	85 c0                	test   %eax,%eax
c01030f3:	75 07                	jne    c01030fc <serial_proc_data+0x2f>
        return -1;
c01030f5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01030fa:	eb 2a                	jmp    c0103126 <serial_proc_data+0x59>
c01030fc:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0103102:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0103106:	89 c2                	mov    %eax,%edx
c0103108:	ec                   	in     (%dx),%al
c0103109:	88 45 f5             	mov    %al,-0xb(%ebp)
    return data;
c010310c:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c0103110:	0f b6 c0             	movzbl %al,%eax
c0103113:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c0103116:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c010311a:	75 07                	jne    c0103123 <serial_proc_data+0x56>
        c = '\b';
c010311c:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0103123:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0103126:	c9                   	leave  
c0103127:	c3                   	ret    

c0103128 <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0103128:	f3 0f 1e fb          	endbr32 
c010312c:	55                   	push   %ebp
c010312d:	89 e5                	mov    %esp,%ebp
c010312f:	83 ec 08             	sub    $0x8,%esp
    if (serial_exists) {
c0103132:	a1 28 55 1b c0       	mov    0xc01b5528,%eax
c0103137:	85 c0                	test   %eax,%eax
c0103139:	74 10                	je     c010314b <serial_intr+0x23>
        cons_intr(serial_proc_data);
c010313b:	83 ec 0c             	sub    $0xc,%esp
c010313e:	68 cd 30 10 c0       	push   $0xc01030cd
c0103143:	e8 34 ff ff ff       	call   c010307c <cons_intr>
c0103148:	83 c4 10             	add    $0x10,%esp
    }
}
c010314b:	90                   	nop
c010314c:	c9                   	leave  
c010314d:	c3                   	ret    

c010314e <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c010314e:	f3 0f 1e fb          	endbr32 
c0103152:	55                   	push   %ebp
c0103153:	89 e5                	mov    %esp,%ebp
c0103155:	83 ec 28             	sub    $0x28,%esp
c0103158:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010315e:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0103162:	89 c2                	mov    %eax,%edx
c0103164:	ec                   	in     (%dx),%al
c0103165:	88 45 ef             	mov    %al,-0x11(%ebp)
    return data;
c0103168:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c010316c:	0f b6 c0             	movzbl %al,%eax
c010316f:	83 e0 01             	and    $0x1,%eax
c0103172:	85 c0                	test   %eax,%eax
c0103174:	75 0a                	jne    c0103180 <kbd_proc_data+0x32>
        return -1;
c0103176:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010317b:	e9 5e 01 00 00       	jmp    c01032de <kbd_proc_data+0x190>
c0103180:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0103186:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010318a:	89 c2                	mov    %eax,%edx
c010318c:	ec                   	in     (%dx),%al
c010318d:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0103190:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c0103194:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c0103197:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c010319b:	75 17                	jne    c01031b4 <kbd_proc_data+0x66>
        // E0 escape character
        shift |= E0ESC;
c010319d:	a1 48 57 1b c0       	mov    0xc01b5748,%eax
c01031a2:	83 c8 40             	or     $0x40,%eax
c01031a5:	a3 48 57 1b c0       	mov    %eax,0xc01b5748
        return 0;
c01031aa:	b8 00 00 00 00       	mov    $0x0,%eax
c01031af:	e9 2a 01 00 00       	jmp    c01032de <kbd_proc_data+0x190>
    } else if (data & 0x80) {
c01031b4:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01031b8:	84 c0                	test   %al,%al
c01031ba:	79 47                	jns    c0103203 <kbd_proc_data+0xb5>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c01031bc:	a1 48 57 1b c0       	mov    0xc01b5748,%eax
c01031c1:	83 e0 40             	and    $0x40,%eax
c01031c4:	85 c0                	test   %eax,%eax
c01031c6:	75 09                	jne    c01031d1 <kbd_proc_data+0x83>
c01031c8:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01031cc:	83 e0 7f             	and    $0x7f,%eax
c01031cf:	eb 04                	jmp    c01031d5 <kbd_proc_data+0x87>
c01031d1:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01031d5:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c01031d8:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01031dc:	0f b6 80 40 20 13 c0 	movzbl -0x3fecdfc0(%eax),%eax
c01031e3:	83 c8 40             	or     $0x40,%eax
c01031e6:	0f b6 c0             	movzbl %al,%eax
c01031e9:	f7 d0                	not    %eax
c01031eb:	89 c2                	mov    %eax,%edx
c01031ed:	a1 48 57 1b c0       	mov    0xc01b5748,%eax
c01031f2:	21 d0                	and    %edx,%eax
c01031f4:	a3 48 57 1b c0       	mov    %eax,0xc01b5748
        return 0;
c01031f9:	b8 00 00 00 00       	mov    $0x0,%eax
c01031fe:	e9 db 00 00 00       	jmp    c01032de <kbd_proc_data+0x190>
    } else if (shift & E0ESC) {
c0103203:	a1 48 57 1b c0       	mov    0xc01b5748,%eax
c0103208:	83 e0 40             	and    $0x40,%eax
c010320b:	85 c0                	test   %eax,%eax
c010320d:	74 11                	je     c0103220 <kbd_proc_data+0xd2>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c010320f:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c0103213:	a1 48 57 1b c0       	mov    0xc01b5748,%eax
c0103218:	83 e0 bf             	and    $0xffffffbf,%eax
c010321b:	a3 48 57 1b c0       	mov    %eax,0xc01b5748
    }

    shift |= shiftcode[data];
c0103220:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0103224:	0f b6 80 40 20 13 c0 	movzbl -0x3fecdfc0(%eax),%eax
c010322b:	0f b6 d0             	movzbl %al,%edx
c010322e:	a1 48 57 1b c0       	mov    0xc01b5748,%eax
c0103233:	09 d0                	or     %edx,%eax
c0103235:	a3 48 57 1b c0       	mov    %eax,0xc01b5748
    shift ^= togglecode[data];
c010323a:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010323e:	0f b6 80 40 21 13 c0 	movzbl -0x3fecdec0(%eax),%eax
c0103245:	0f b6 d0             	movzbl %al,%edx
c0103248:	a1 48 57 1b c0       	mov    0xc01b5748,%eax
c010324d:	31 d0                	xor    %edx,%eax
c010324f:	a3 48 57 1b c0       	mov    %eax,0xc01b5748

    c = charcode[shift & (CTL | SHIFT)][data];
c0103254:	a1 48 57 1b c0       	mov    0xc01b5748,%eax
c0103259:	83 e0 03             	and    $0x3,%eax
c010325c:	8b 14 85 40 25 13 c0 	mov    -0x3fecdac0(,%eax,4),%edx
c0103263:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0103267:	01 d0                	add    %edx,%eax
c0103269:	0f b6 00             	movzbl (%eax),%eax
c010326c:	0f b6 c0             	movzbl %al,%eax
c010326f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0103272:	a1 48 57 1b c0       	mov    0xc01b5748,%eax
c0103277:	83 e0 08             	and    $0x8,%eax
c010327a:	85 c0                	test   %eax,%eax
c010327c:	74 22                	je     c01032a0 <kbd_proc_data+0x152>
        if ('a' <= c && c <= 'z')
c010327e:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0103282:	7e 0c                	jle    c0103290 <kbd_proc_data+0x142>
c0103284:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0103288:	7f 06                	jg     c0103290 <kbd_proc_data+0x142>
            c += 'A' - 'a';
c010328a:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c010328e:	eb 10                	jmp    c01032a0 <kbd_proc_data+0x152>
        else if ('A' <= c && c <= 'Z')
c0103290:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c0103294:	7e 0a                	jle    c01032a0 <kbd_proc_data+0x152>
c0103296:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c010329a:	7f 04                	jg     c01032a0 <kbd_proc_data+0x152>
            c += 'a' - 'A';
c010329c:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c01032a0:	a1 48 57 1b c0       	mov    0xc01b5748,%eax
c01032a5:	f7 d0                	not    %eax
c01032a7:	83 e0 06             	and    $0x6,%eax
c01032aa:	85 c0                	test   %eax,%eax
c01032ac:	75 2d                	jne    c01032db <kbd_proc_data+0x18d>
c01032ae:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c01032b5:	75 24                	jne    c01032db <kbd_proc_data+0x18d>
        cprintf("Rebooting!\n");
c01032b7:	83 ec 0c             	sub    $0xc,%esp
c01032ba:	68 bd d1 10 c0       	push   $0xc010d1bd
c01032bf:	e8 ee cf ff ff       	call   c01002b2 <cprintf>
c01032c4:	83 c4 10             	add    $0x10,%esp
c01032c7:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
c01032cd:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01032d1:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c01032d5:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c01032d9:	ee                   	out    %al,(%dx)
}
c01032da:	90                   	nop
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c01032db:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01032de:	c9                   	leave  
c01032df:	c3                   	ret    

c01032e0 <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c01032e0:	f3 0f 1e fb          	endbr32 
c01032e4:	55                   	push   %ebp
c01032e5:	89 e5                	mov    %esp,%ebp
c01032e7:	83 ec 08             	sub    $0x8,%esp
    cons_intr(kbd_proc_data);
c01032ea:	83 ec 0c             	sub    $0xc,%esp
c01032ed:	68 4e 31 10 c0       	push   $0xc010314e
c01032f2:	e8 85 fd ff ff       	call   c010307c <cons_intr>
c01032f7:	83 c4 10             	add    $0x10,%esp
}
c01032fa:	90                   	nop
c01032fb:	c9                   	leave  
c01032fc:	c3                   	ret    

c01032fd <kbd_init>:

static void
kbd_init(void) {
c01032fd:	f3 0f 1e fb          	endbr32 
c0103301:	55                   	push   %ebp
c0103302:	89 e5                	mov    %esp,%ebp
c0103304:	83 ec 08             	sub    $0x8,%esp
    // drain the kbd buffer
    kbd_intr();
c0103307:	e8 d4 ff ff ff       	call   c01032e0 <kbd_intr>
    pic_enable(IRQ_KBD);
c010330c:	83 ec 0c             	sub    $0xc,%esp
c010330f:	6a 01                	push   $0x1
c0103311:	e8 5d 01 00 00       	call   c0103473 <pic_enable>
c0103316:	83 c4 10             	add    $0x10,%esp
}
c0103319:	90                   	nop
c010331a:	c9                   	leave  
c010331b:	c3                   	ret    

c010331c <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c010331c:	f3 0f 1e fb          	endbr32 
c0103320:	55                   	push   %ebp
c0103321:	89 e5                	mov    %esp,%ebp
c0103323:	83 ec 08             	sub    $0x8,%esp
    cga_init();
c0103326:	e8 33 f8 ff ff       	call   c0102b5e <cga_init>
    serial_init();
c010332b:	e8 1b f9 ff ff       	call   c0102c4b <serial_init>
    kbd_init();
c0103330:	e8 c8 ff ff ff       	call   c01032fd <kbd_init>
    if (!serial_exists) {
c0103335:	a1 28 55 1b c0       	mov    0xc01b5528,%eax
c010333a:	85 c0                	test   %eax,%eax
c010333c:	75 10                	jne    c010334e <cons_init+0x32>
        cprintf("serial port does not exist!!\n");
c010333e:	83 ec 0c             	sub    $0xc,%esp
c0103341:	68 c9 d1 10 c0       	push   $0xc010d1c9
c0103346:	e8 67 cf ff ff       	call   c01002b2 <cprintf>
c010334b:	83 c4 10             	add    $0x10,%esp
    }
}
c010334e:	90                   	nop
c010334f:	c9                   	leave  
c0103350:	c3                   	ret    

c0103351 <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0103351:	f3 0f 1e fb          	endbr32 
c0103355:	55                   	push   %ebp
c0103356:	89 e5                	mov    %esp,%ebp
c0103358:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010335b:	e8 73 f7 ff ff       	call   c0102ad3 <__intr_save>
c0103360:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c0103363:	83 ec 0c             	sub    $0xc,%esp
c0103366:	ff 75 08             	pushl  0x8(%ebp)
c0103369:	e8 4e fa ff ff       	call   c0102dbc <lpt_putc>
c010336e:	83 c4 10             	add    $0x10,%esp
        cga_putc(c);
c0103371:	83 ec 0c             	sub    $0xc,%esp
c0103374:	ff 75 08             	pushl  0x8(%ebp)
c0103377:	e8 7b fa ff ff       	call   c0102df7 <cga_putc>
c010337c:	83 c4 10             	add    $0x10,%esp
        serial_putc(c);
c010337f:	83 ec 0c             	sub    $0xc,%esp
c0103382:	ff 75 08             	pushl  0x8(%ebp)
c0103385:	e8 b7 fc ff ff       	call   c0103041 <serial_putc>
c010338a:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c010338d:	83 ec 0c             	sub    $0xc,%esp
c0103390:	ff 75 f4             	pushl  -0xc(%ebp)
c0103393:	e8 65 f7 ff ff       	call   c0102afd <__intr_restore>
c0103398:	83 c4 10             	add    $0x10,%esp
}
c010339b:	90                   	nop
c010339c:	c9                   	leave  
c010339d:	c3                   	ret    

c010339e <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c010339e:	f3 0f 1e fb          	endbr32 
c01033a2:	55                   	push   %ebp
c01033a3:	89 e5                	mov    %esp,%ebp
c01033a5:	83 ec 18             	sub    $0x18,%esp
    int c = 0;
c01033a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c01033af:	e8 1f f7 ff ff       	call   c0102ad3 <__intr_save>
c01033b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c01033b7:	e8 6c fd ff ff       	call   c0103128 <serial_intr>
        kbd_intr();
c01033bc:	e8 1f ff ff ff       	call   c01032e0 <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c01033c1:	8b 15 40 57 1b c0    	mov    0xc01b5740,%edx
c01033c7:	a1 44 57 1b c0       	mov    0xc01b5744,%eax
c01033cc:	39 c2                	cmp    %eax,%edx
c01033ce:	74 31                	je     c0103401 <cons_getc+0x63>
            c = cons.buf[cons.rpos ++];
c01033d0:	a1 40 57 1b c0       	mov    0xc01b5740,%eax
c01033d5:	8d 50 01             	lea    0x1(%eax),%edx
c01033d8:	89 15 40 57 1b c0    	mov    %edx,0xc01b5740
c01033de:	0f b6 80 40 55 1b c0 	movzbl -0x3fe4aac0(%eax),%eax
c01033e5:	0f b6 c0             	movzbl %al,%eax
c01033e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c01033eb:	a1 40 57 1b c0       	mov    0xc01b5740,%eax
c01033f0:	3d 00 02 00 00       	cmp    $0x200,%eax
c01033f5:	75 0a                	jne    c0103401 <cons_getc+0x63>
                cons.rpos = 0;
c01033f7:	c7 05 40 57 1b c0 00 	movl   $0x0,0xc01b5740
c01033fe:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c0103401:	83 ec 0c             	sub    $0xc,%esp
c0103404:	ff 75 f0             	pushl  -0x10(%ebp)
c0103407:	e8 f1 f6 ff ff       	call   c0102afd <__intr_restore>
c010340c:	83 c4 10             	add    $0x10,%esp
    return c;
c010340f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103412:	c9                   	leave  
c0103413:	c3                   	ret    

c0103414 <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c0103414:	f3 0f 1e fb          	endbr32 
c0103418:	55                   	push   %ebp
c0103419:	89 e5                	mov    %esp,%ebp
c010341b:	83 ec 14             	sub    $0x14,%esp
c010341e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103421:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c0103425:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0103429:	66 a3 50 25 13 c0    	mov    %ax,0xc0132550
    if (did_init) {
c010342f:	a1 4c 57 1b c0       	mov    0xc01b574c,%eax
c0103434:	85 c0                	test   %eax,%eax
c0103436:	74 38                	je     c0103470 <pic_setmask+0x5c>
        outb(IO_PIC1 + 1, mask);
c0103438:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010343c:	0f b6 c0             	movzbl %al,%eax
c010343f:	66 c7 45 fa 21 00    	movw   $0x21,-0x6(%ebp)
c0103445:	88 45 f9             	mov    %al,-0x7(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0103448:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c010344c:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0103450:	ee                   	out    %al,(%dx)
}
c0103451:	90                   	nop
        outb(IO_PIC2 + 1, mask >> 8);
c0103452:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0103456:	66 c1 e8 08          	shr    $0x8,%ax
c010345a:	0f b6 c0             	movzbl %al,%eax
c010345d:	66 c7 45 fe a1 00    	movw   $0xa1,-0x2(%ebp)
c0103463:	88 45 fd             	mov    %al,-0x3(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0103466:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c010346a:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c010346e:	ee                   	out    %al,(%dx)
}
c010346f:	90                   	nop
    }
}
c0103470:	90                   	nop
c0103471:	c9                   	leave  
c0103472:	c3                   	ret    

c0103473 <pic_enable>:

void
pic_enable(unsigned int irq) {
c0103473:	f3 0f 1e fb          	endbr32 
c0103477:	55                   	push   %ebp
c0103478:	89 e5                	mov    %esp,%ebp
    pic_setmask(irq_mask & ~(1 << irq));
c010347a:	8b 45 08             	mov    0x8(%ebp),%eax
c010347d:	ba 01 00 00 00       	mov    $0x1,%edx
c0103482:	89 c1                	mov    %eax,%ecx
c0103484:	d3 e2                	shl    %cl,%edx
c0103486:	89 d0                	mov    %edx,%eax
c0103488:	f7 d0                	not    %eax
c010348a:	89 c2                	mov    %eax,%edx
c010348c:	0f b7 05 50 25 13 c0 	movzwl 0xc0132550,%eax
c0103493:	21 d0                	and    %edx,%eax
c0103495:	0f b7 c0             	movzwl %ax,%eax
c0103498:	50                   	push   %eax
c0103499:	e8 76 ff ff ff       	call   c0103414 <pic_setmask>
c010349e:	83 c4 04             	add    $0x4,%esp
}
c01034a1:	90                   	nop
c01034a2:	c9                   	leave  
c01034a3:	c3                   	ret    

c01034a4 <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c01034a4:	f3 0f 1e fb          	endbr32 
c01034a8:	55                   	push   %ebp
c01034a9:	89 e5                	mov    %esp,%ebp
c01034ab:	83 ec 40             	sub    $0x40,%esp
    did_init = 1;
c01034ae:	c7 05 4c 57 1b c0 01 	movl   $0x1,0xc01b574c
c01034b5:	00 00 00 
c01034b8:	66 c7 45 ca 21 00    	movw   $0x21,-0x36(%ebp)
c01034be:	c6 45 c9 ff          	movb   $0xff,-0x37(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01034c2:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01034c6:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c01034ca:	ee                   	out    %al,(%dx)
}
c01034cb:	90                   	nop
c01034cc:	66 c7 45 ce a1 00    	movw   $0xa1,-0x32(%ebp)
c01034d2:	c6 45 cd ff          	movb   $0xff,-0x33(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01034d6:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01034da:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01034de:	ee                   	out    %al,(%dx)
}
c01034df:	90                   	nop
c01034e0:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c01034e6:	c6 45 d1 11          	movb   $0x11,-0x2f(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01034ea:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c01034ee:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c01034f2:	ee                   	out    %al,(%dx)
}
c01034f3:	90                   	nop
c01034f4:	66 c7 45 d6 21 00    	movw   $0x21,-0x2a(%ebp)
c01034fa:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01034fe:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0103502:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0103506:	ee                   	out    %al,(%dx)
}
c0103507:	90                   	nop
c0103508:	66 c7 45 da 21 00    	movw   $0x21,-0x26(%ebp)
c010350e:	c6 45 d9 04          	movb   $0x4,-0x27(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0103512:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0103516:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c010351a:	ee                   	out    %al,(%dx)
}
c010351b:	90                   	nop
c010351c:	66 c7 45 de 21 00    	movw   $0x21,-0x22(%ebp)
c0103522:	c6 45 dd 03          	movb   $0x3,-0x23(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0103526:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010352a:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010352e:	ee                   	out    %al,(%dx)
}
c010352f:	90                   	nop
c0103530:	66 c7 45 e2 a0 00    	movw   $0xa0,-0x1e(%ebp)
c0103536:	c6 45 e1 11          	movb   $0x11,-0x1f(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010353a:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c010353e:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0103542:	ee                   	out    %al,(%dx)
}
c0103543:	90                   	nop
c0103544:	66 c7 45 e6 a1 00    	movw   $0xa1,-0x1a(%ebp)
c010354a:	c6 45 e5 28          	movb   $0x28,-0x1b(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010354e:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0103552:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0103556:	ee                   	out    %al,(%dx)
}
c0103557:	90                   	nop
c0103558:	66 c7 45 ea a1 00    	movw   $0xa1,-0x16(%ebp)
c010355e:	c6 45 e9 02          	movb   $0x2,-0x17(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0103562:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0103566:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010356a:	ee                   	out    %al,(%dx)
}
c010356b:	90                   	nop
c010356c:	66 c7 45 ee a1 00    	movw   $0xa1,-0x12(%ebp)
c0103572:	c6 45 ed 03          	movb   $0x3,-0x13(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0103576:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010357a:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010357e:	ee                   	out    %al,(%dx)
}
c010357f:	90                   	nop
c0103580:	66 c7 45 f2 20 00    	movw   $0x20,-0xe(%ebp)
c0103586:	c6 45 f1 68          	movb   $0x68,-0xf(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010358a:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010358e:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0103592:	ee                   	out    %al,(%dx)
}
c0103593:	90                   	nop
c0103594:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c010359a:	c6 45 f5 0a          	movb   $0xa,-0xb(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010359e:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01035a2:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01035a6:	ee                   	out    %al,(%dx)
}
c01035a7:	90                   	nop
c01035a8:	66 c7 45 fa a0 00    	movw   $0xa0,-0x6(%ebp)
c01035ae:	c6 45 f9 68          	movb   $0x68,-0x7(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01035b2:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01035b6:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01035ba:	ee                   	out    %al,(%dx)
}
c01035bb:	90                   	nop
c01035bc:	66 c7 45 fe a0 00    	movw   $0xa0,-0x2(%ebp)
c01035c2:	c6 45 fd 0a          	movb   $0xa,-0x3(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01035c6:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c01035ca:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c01035ce:	ee                   	out    %al,(%dx)
}
c01035cf:	90                   	nop
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c01035d0:	0f b7 05 50 25 13 c0 	movzwl 0xc0132550,%eax
c01035d7:	66 83 f8 ff          	cmp    $0xffff,%ax
c01035db:	74 13                	je     c01035f0 <pic_init+0x14c>
        pic_setmask(irq_mask);
c01035dd:	0f b7 05 50 25 13 c0 	movzwl 0xc0132550,%eax
c01035e4:	0f b7 c0             	movzwl %ax,%eax
c01035e7:	50                   	push   %eax
c01035e8:	e8 27 fe ff ff       	call   c0103414 <pic_setmask>
c01035ed:	83 c4 04             	add    $0x4,%esp
    }
}
c01035f0:	90                   	nop
c01035f1:	c9                   	leave  
c01035f2:	c3                   	ret    

c01035f3 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c01035f3:	f3 0f 1e fb          	endbr32 
c01035f7:	55                   	push   %ebp
c01035f8:	89 e5                	mov    %esp,%ebp
    asm volatile ("sti");
c01035fa:	fb                   	sti    
}
c01035fb:	90                   	nop
    sti();
}
c01035fc:	90                   	nop
c01035fd:	5d                   	pop    %ebp
c01035fe:	c3                   	ret    

c01035ff <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c01035ff:	f3 0f 1e fb          	endbr32 
c0103603:	55                   	push   %ebp
c0103604:	89 e5                	mov    %esp,%ebp
    asm volatile ("cli" ::: "memory");
c0103606:	fa                   	cli    
}
c0103607:	90                   	nop
    cli();
}
c0103608:	90                   	nop
c0103609:	5d                   	pop    %ebp
c010360a:	c3                   	ret    

c010360b <print_ticks>:
#include <sched.h>
#include <sync.h>

#define TICK_NUM 100

static void print_ticks() {
c010360b:	f3 0f 1e fb          	endbr32 
c010360f:	55                   	push   %ebp
c0103610:	89 e5                	mov    %esp,%ebp
c0103612:	83 ec 08             	sub    $0x8,%esp
    cprintf("%d ticks\n",TICK_NUM);
c0103615:	83 ec 08             	sub    $0x8,%esp
c0103618:	6a 64                	push   $0x64
c010361a:	68 00 d2 10 c0       	push   $0xc010d200
c010361f:	e8 8e cc ff ff       	call   c01002b2 <cprintf>
c0103624:	83 c4 10             	add    $0x10,%esp
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
c0103627:	83 ec 0c             	sub    $0xc,%esp
c010362a:	68 0a d2 10 c0       	push   $0xc010d20a
c010362f:	e8 7e cc ff ff       	call   c01002b2 <cprintf>
c0103634:	83 c4 10             	add    $0x10,%esp
    panic("EOT: kernel seems ok.");
c0103637:	83 ec 04             	sub    $0x4,%esp
c010363a:	68 18 d2 10 c0       	push   $0xc010d218
c010363f:	6a 19                	push   $0x19
c0103641:	68 2e d2 10 c0       	push   $0xc010d22e
c0103646:	e8 a3 e1 ff ff       	call   c01017ee <__panic>

c010364b <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c010364b:	f3 0f 1e fb          	endbr32 
c010364f:	55                   	push   %ebp
c0103650:	89 e5                	mov    %esp,%ebp
c0103652:	83 ec 10             	sub    $0x10,%esp
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c0103655:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010365c:	e9 c3 00 00 00       	jmp    c0103724 <idt_init+0xd9>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c0103661:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103664:	8b 04 85 e0 25 13 c0 	mov    -0x3fecda20(,%eax,4),%eax
c010366b:	89 c2                	mov    %eax,%edx
c010366d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103670:	66 89 14 c5 60 57 1b 	mov    %dx,-0x3fe4a8a0(,%eax,8)
c0103677:	c0 
c0103678:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010367b:	66 c7 04 c5 62 57 1b 	movw   $0x8,-0x3fe4a89e(,%eax,8)
c0103682:	c0 08 00 
c0103685:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103688:	0f b6 14 c5 64 57 1b 	movzbl -0x3fe4a89c(,%eax,8),%edx
c010368f:	c0 
c0103690:	83 e2 e0             	and    $0xffffffe0,%edx
c0103693:	88 14 c5 64 57 1b c0 	mov    %dl,-0x3fe4a89c(,%eax,8)
c010369a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010369d:	0f b6 14 c5 64 57 1b 	movzbl -0x3fe4a89c(,%eax,8),%edx
c01036a4:	c0 
c01036a5:	83 e2 1f             	and    $0x1f,%edx
c01036a8:	88 14 c5 64 57 1b c0 	mov    %dl,-0x3fe4a89c(,%eax,8)
c01036af:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01036b2:	0f b6 14 c5 65 57 1b 	movzbl -0x3fe4a89b(,%eax,8),%edx
c01036b9:	c0 
c01036ba:	83 e2 f0             	and    $0xfffffff0,%edx
c01036bd:	83 ca 0e             	or     $0xe,%edx
c01036c0:	88 14 c5 65 57 1b c0 	mov    %dl,-0x3fe4a89b(,%eax,8)
c01036c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01036ca:	0f b6 14 c5 65 57 1b 	movzbl -0x3fe4a89b(,%eax,8),%edx
c01036d1:	c0 
c01036d2:	83 e2 ef             	and    $0xffffffef,%edx
c01036d5:	88 14 c5 65 57 1b c0 	mov    %dl,-0x3fe4a89b(,%eax,8)
c01036dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01036df:	0f b6 14 c5 65 57 1b 	movzbl -0x3fe4a89b(,%eax,8),%edx
c01036e6:	c0 
c01036e7:	83 e2 9f             	and    $0xffffff9f,%edx
c01036ea:	88 14 c5 65 57 1b c0 	mov    %dl,-0x3fe4a89b(,%eax,8)
c01036f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01036f4:	0f b6 14 c5 65 57 1b 	movzbl -0x3fe4a89b(,%eax,8),%edx
c01036fb:	c0 
c01036fc:	83 ca 80             	or     $0xffffff80,%edx
c01036ff:	88 14 c5 65 57 1b c0 	mov    %dl,-0x3fe4a89b(,%eax,8)
c0103706:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103709:	8b 04 85 e0 25 13 c0 	mov    -0x3fecda20(,%eax,4),%eax
c0103710:	c1 e8 10             	shr    $0x10,%eax
c0103713:	89 c2                	mov    %eax,%edx
c0103715:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103718:	66 89 14 c5 66 57 1b 	mov    %dx,-0x3fe4a89a(,%eax,8)
c010371f:	c0 
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c0103720:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0103724:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103727:	3d ff 00 00 00       	cmp    $0xff,%eax
c010372c:	0f 86 2f ff ff ff    	jbe    c0103661 <idt_init+0x16>
    }
    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c0103732:	a1 e0 27 13 c0       	mov    0xc01327e0,%eax
c0103737:	66 a3 60 5b 1b c0    	mov    %ax,0xc01b5b60
c010373d:	66 c7 05 62 5b 1b c0 	movw   $0x8,0xc01b5b62
c0103744:	08 00 
c0103746:	0f b6 05 64 5b 1b c0 	movzbl 0xc01b5b64,%eax
c010374d:	83 e0 e0             	and    $0xffffffe0,%eax
c0103750:	a2 64 5b 1b c0       	mov    %al,0xc01b5b64
c0103755:	0f b6 05 64 5b 1b c0 	movzbl 0xc01b5b64,%eax
c010375c:	83 e0 1f             	and    $0x1f,%eax
c010375f:	a2 64 5b 1b c0       	mov    %al,0xc01b5b64
c0103764:	0f b6 05 65 5b 1b c0 	movzbl 0xc01b5b65,%eax
c010376b:	83 c8 0f             	or     $0xf,%eax
c010376e:	a2 65 5b 1b c0       	mov    %al,0xc01b5b65
c0103773:	0f b6 05 65 5b 1b c0 	movzbl 0xc01b5b65,%eax
c010377a:	83 e0 ef             	and    $0xffffffef,%eax
c010377d:	a2 65 5b 1b c0       	mov    %al,0xc01b5b65
c0103782:	0f b6 05 65 5b 1b c0 	movzbl 0xc01b5b65,%eax
c0103789:	83 c8 60             	or     $0x60,%eax
c010378c:	a2 65 5b 1b c0       	mov    %al,0xc01b5b65
c0103791:	0f b6 05 65 5b 1b c0 	movzbl 0xc01b5b65,%eax
c0103798:	83 c8 80             	or     $0xffffff80,%eax
c010379b:	a2 65 5b 1b c0       	mov    %al,0xc01b5b65
c01037a0:	a1 e0 27 13 c0       	mov    0xc01327e0,%eax
c01037a5:	c1 e8 10             	shr    $0x10,%eax
c01037a8:	66 a3 66 5b 1b c0    	mov    %ax,0xc01b5b66
c01037ae:	c7 45 f8 60 25 13 c0 	movl   $0xc0132560,-0x8(%ebp)
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c01037b5:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01037b8:	0f 01 18             	lidtl  (%eax)
}
c01037bb:	90                   	nop
    lidt(&idt_pd);
}
c01037bc:	90                   	nop
c01037bd:	c9                   	leave  
c01037be:	c3                   	ret    

c01037bf <trapname>:

static const char *
trapname(int trapno) {
c01037bf:	f3 0f 1e fb          	endbr32 
c01037c3:	55                   	push   %ebp
c01037c4:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c01037c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01037c9:	83 f8 13             	cmp    $0x13,%eax
c01037cc:	77 0c                	ja     c01037da <trapname+0x1b>
        return excnames[trapno];
c01037ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01037d1:	8b 04 85 40 d7 10 c0 	mov    -0x3fef28c0(,%eax,4),%eax
c01037d8:	eb 18                	jmp    c01037f2 <trapname+0x33>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c01037da:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c01037de:	7e 0d                	jle    c01037ed <trapname+0x2e>
c01037e0:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c01037e4:	7f 07                	jg     c01037ed <trapname+0x2e>
        return "Hardware Interrupt";
c01037e6:	b8 3f d2 10 c0       	mov    $0xc010d23f,%eax
c01037eb:	eb 05                	jmp    c01037f2 <trapname+0x33>
    }
    return "(unknown trap)";
c01037ed:	b8 52 d2 10 c0       	mov    $0xc010d252,%eax
}
c01037f2:	5d                   	pop    %ebp
c01037f3:	c3                   	ret    

c01037f4 <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c01037f4:	f3 0f 1e fb          	endbr32 
c01037f8:	55                   	push   %ebp
c01037f9:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c01037fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01037fe:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0103802:	66 83 f8 08          	cmp    $0x8,%ax
c0103806:	0f 94 c0             	sete   %al
c0103809:	0f b6 c0             	movzbl %al,%eax
}
c010380c:	5d                   	pop    %ebp
c010380d:	c3                   	ret    

c010380e <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c010380e:	f3 0f 1e fb          	endbr32 
c0103812:	55                   	push   %ebp
c0103813:	89 e5                	mov    %esp,%ebp
c0103815:	83 ec 18             	sub    $0x18,%esp
    cprintf("trapframe at %p\n", tf);
c0103818:	83 ec 08             	sub    $0x8,%esp
c010381b:	ff 75 08             	pushl  0x8(%ebp)
c010381e:	68 93 d2 10 c0       	push   $0xc010d293
c0103823:	e8 8a ca ff ff       	call   c01002b2 <cprintf>
c0103828:	83 c4 10             	add    $0x10,%esp
    print_regs(&tf->tf_regs);
c010382b:	8b 45 08             	mov    0x8(%ebp),%eax
c010382e:	83 ec 0c             	sub    $0xc,%esp
c0103831:	50                   	push   %eax
c0103832:	e8 b4 01 00 00       	call   c01039eb <print_regs>
c0103837:	83 c4 10             	add    $0x10,%esp
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c010383a:	8b 45 08             	mov    0x8(%ebp),%eax
c010383d:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c0103841:	0f b7 c0             	movzwl %ax,%eax
c0103844:	83 ec 08             	sub    $0x8,%esp
c0103847:	50                   	push   %eax
c0103848:	68 a4 d2 10 c0       	push   $0xc010d2a4
c010384d:	e8 60 ca ff ff       	call   c01002b2 <cprintf>
c0103852:	83 c4 10             	add    $0x10,%esp
    cprintf("  es   0x----%04x\n", tf->tf_es);
c0103855:	8b 45 08             	mov    0x8(%ebp),%eax
c0103858:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c010385c:	0f b7 c0             	movzwl %ax,%eax
c010385f:	83 ec 08             	sub    $0x8,%esp
c0103862:	50                   	push   %eax
c0103863:	68 b7 d2 10 c0       	push   $0xc010d2b7
c0103868:	e8 45 ca ff ff       	call   c01002b2 <cprintf>
c010386d:	83 c4 10             	add    $0x10,%esp
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c0103870:	8b 45 08             	mov    0x8(%ebp),%eax
c0103873:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c0103877:	0f b7 c0             	movzwl %ax,%eax
c010387a:	83 ec 08             	sub    $0x8,%esp
c010387d:	50                   	push   %eax
c010387e:	68 ca d2 10 c0       	push   $0xc010d2ca
c0103883:	e8 2a ca ff ff       	call   c01002b2 <cprintf>
c0103888:	83 c4 10             	add    $0x10,%esp
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c010388b:	8b 45 08             	mov    0x8(%ebp),%eax
c010388e:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c0103892:	0f b7 c0             	movzwl %ax,%eax
c0103895:	83 ec 08             	sub    $0x8,%esp
c0103898:	50                   	push   %eax
c0103899:	68 dd d2 10 c0       	push   $0xc010d2dd
c010389e:	e8 0f ca ff ff       	call   c01002b2 <cprintf>
c01038a3:	83 c4 10             	add    $0x10,%esp
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c01038a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01038a9:	8b 40 30             	mov    0x30(%eax),%eax
c01038ac:	83 ec 0c             	sub    $0xc,%esp
c01038af:	50                   	push   %eax
c01038b0:	e8 0a ff ff ff       	call   c01037bf <trapname>
c01038b5:	83 c4 10             	add    $0x10,%esp
c01038b8:	8b 55 08             	mov    0x8(%ebp),%edx
c01038bb:	8b 52 30             	mov    0x30(%edx),%edx
c01038be:	83 ec 04             	sub    $0x4,%esp
c01038c1:	50                   	push   %eax
c01038c2:	52                   	push   %edx
c01038c3:	68 f0 d2 10 c0       	push   $0xc010d2f0
c01038c8:	e8 e5 c9 ff ff       	call   c01002b2 <cprintf>
c01038cd:	83 c4 10             	add    $0x10,%esp
    cprintf("  err  0x%08x\n", tf->tf_err);
c01038d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01038d3:	8b 40 34             	mov    0x34(%eax),%eax
c01038d6:	83 ec 08             	sub    $0x8,%esp
c01038d9:	50                   	push   %eax
c01038da:	68 02 d3 10 c0       	push   $0xc010d302
c01038df:	e8 ce c9 ff ff       	call   c01002b2 <cprintf>
c01038e4:	83 c4 10             	add    $0x10,%esp
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c01038e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01038ea:	8b 40 38             	mov    0x38(%eax),%eax
c01038ed:	83 ec 08             	sub    $0x8,%esp
c01038f0:	50                   	push   %eax
c01038f1:	68 11 d3 10 c0       	push   $0xc010d311
c01038f6:	e8 b7 c9 ff ff       	call   c01002b2 <cprintf>
c01038fb:	83 c4 10             	add    $0x10,%esp
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c01038fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0103901:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0103905:	0f b7 c0             	movzwl %ax,%eax
c0103908:	83 ec 08             	sub    $0x8,%esp
c010390b:	50                   	push   %eax
c010390c:	68 20 d3 10 c0       	push   $0xc010d320
c0103911:	e8 9c c9 ff ff       	call   c01002b2 <cprintf>
c0103916:	83 c4 10             	add    $0x10,%esp
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c0103919:	8b 45 08             	mov    0x8(%ebp),%eax
c010391c:	8b 40 40             	mov    0x40(%eax),%eax
c010391f:	83 ec 08             	sub    $0x8,%esp
c0103922:	50                   	push   %eax
c0103923:	68 33 d3 10 c0       	push   $0xc010d333
c0103928:	e8 85 c9 ff ff       	call   c01002b2 <cprintf>
c010392d:	83 c4 10             	add    $0x10,%esp

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0103930:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103937:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010393e:	eb 3f                	jmp    c010397f <print_trapframe+0x171>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c0103940:	8b 45 08             	mov    0x8(%ebp),%eax
c0103943:	8b 50 40             	mov    0x40(%eax),%edx
c0103946:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103949:	21 d0                	and    %edx,%eax
c010394b:	85 c0                	test   %eax,%eax
c010394d:	74 29                	je     c0103978 <print_trapframe+0x16a>
c010394f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103952:	8b 04 85 80 25 13 c0 	mov    -0x3fecda80(,%eax,4),%eax
c0103959:	85 c0                	test   %eax,%eax
c010395b:	74 1b                	je     c0103978 <print_trapframe+0x16a>
            cprintf("%s,", IA32flags[i]);
c010395d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103960:	8b 04 85 80 25 13 c0 	mov    -0x3fecda80(,%eax,4),%eax
c0103967:	83 ec 08             	sub    $0x8,%esp
c010396a:	50                   	push   %eax
c010396b:	68 42 d3 10 c0       	push   $0xc010d342
c0103970:	e8 3d c9 ff ff       	call   c01002b2 <cprintf>
c0103975:	83 c4 10             	add    $0x10,%esp
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0103978:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010397c:	d1 65 f0             	shll   -0x10(%ebp)
c010397f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103982:	83 f8 17             	cmp    $0x17,%eax
c0103985:	76 b9                	jbe    c0103940 <print_trapframe+0x132>
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c0103987:	8b 45 08             	mov    0x8(%ebp),%eax
c010398a:	8b 40 40             	mov    0x40(%eax),%eax
c010398d:	c1 e8 0c             	shr    $0xc,%eax
c0103990:	83 e0 03             	and    $0x3,%eax
c0103993:	83 ec 08             	sub    $0x8,%esp
c0103996:	50                   	push   %eax
c0103997:	68 46 d3 10 c0       	push   $0xc010d346
c010399c:	e8 11 c9 ff ff       	call   c01002b2 <cprintf>
c01039a1:	83 c4 10             	add    $0x10,%esp

    if (!trap_in_kernel(tf)) {
c01039a4:	83 ec 0c             	sub    $0xc,%esp
c01039a7:	ff 75 08             	pushl  0x8(%ebp)
c01039aa:	e8 45 fe ff ff       	call   c01037f4 <trap_in_kernel>
c01039af:	83 c4 10             	add    $0x10,%esp
c01039b2:	85 c0                	test   %eax,%eax
c01039b4:	75 32                	jne    c01039e8 <print_trapframe+0x1da>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c01039b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01039b9:	8b 40 44             	mov    0x44(%eax),%eax
c01039bc:	83 ec 08             	sub    $0x8,%esp
c01039bf:	50                   	push   %eax
c01039c0:	68 4f d3 10 c0       	push   $0xc010d34f
c01039c5:	e8 e8 c8 ff ff       	call   c01002b2 <cprintf>
c01039ca:	83 c4 10             	add    $0x10,%esp
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c01039cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01039d0:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c01039d4:	0f b7 c0             	movzwl %ax,%eax
c01039d7:	83 ec 08             	sub    $0x8,%esp
c01039da:	50                   	push   %eax
c01039db:	68 5e d3 10 c0       	push   $0xc010d35e
c01039e0:	e8 cd c8 ff ff       	call   c01002b2 <cprintf>
c01039e5:	83 c4 10             	add    $0x10,%esp
    }
}
c01039e8:	90                   	nop
c01039e9:	c9                   	leave  
c01039ea:	c3                   	ret    

c01039eb <print_regs>:

void
print_regs(struct pushregs *regs) {
c01039eb:	f3 0f 1e fb          	endbr32 
c01039ef:	55                   	push   %ebp
c01039f0:	89 e5                	mov    %esp,%ebp
c01039f2:	83 ec 08             	sub    $0x8,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c01039f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01039f8:	8b 00                	mov    (%eax),%eax
c01039fa:	83 ec 08             	sub    $0x8,%esp
c01039fd:	50                   	push   %eax
c01039fe:	68 71 d3 10 c0       	push   $0xc010d371
c0103a03:	e8 aa c8 ff ff       	call   c01002b2 <cprintf>
c0103a08:	83 c4 10             	add    $0x10,%esp
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c0103a0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a0e:	8b 40 04             	mov    0x4(%eax),%eax
c0103a11:	83 ec 08             	sub    $0x8,%esp
c0103a14:	50                   	push   %eax
c0103a15:	68 80 d3 10 c0       	push   $0xc010d380
c0103a1a:	e8 93 c8 ff ff       	call   c01002b2 <cprintf>
c0103a1f:	83 c4 10             	add    $0x10,%esp
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c0103a22:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a25:	8b 40 08             	mov    0x8(%eax),%eax
c0103a28:	83 ec 08             	sub    $0x8,%esp
c0103a2b:	50                   	push   %eax
c0103a2c:	68 8f d3 10 c0       	push   $0xc010d38f
c0103a31:	e8 7c c8 ff ff       	call   c01002b2 <cprintf>
c0103a36:	83 c4 10             	add    $0x10,%esp
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c0103a39:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a3c:	8b 40 0c             	mov    0xc(%eax),%eax
c0103a3f:	83 ec 08             	sub    $0x8,%esp
c0103a42:	50                   	push   %eax
c0103a43:	68 9e d3 10 c0       	push   $0xc010d39e
c0103a48:	e8 65 c8 ff ff       	call   c01002b2 <cprintf>
c0103a4d:	83 c4 10             	add    $0x10,%esp
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c0103a50:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a53:	8b 40 10             	mov    0x10(%eax),%eax
c0103a56:	83 ec 08             	sub    $0x8,%esp
c0103a59:	50                   	push   %eax
c0103a5a:	68 ad d3 10 c0       	push   $0xc010d3ad
c0103a5f:	e8 4e c8 ff ff       	call   c01002b2 <cprintf>
c0103a64:	83 c4 10             	add    $0x10,%esp
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c0103a67:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a6a:	8b 40 14             	mov    0x14(%eax),%eax
c0103a6d:	83 ec 08             	sub    $0x8,%esp
c0103a70:	50                   	push   %eax
c0103a71:	68 bc d3 10 c0       	push   $0xc010d3bc
c0103a76:	e8 37 c8 ff ff       	call   c01002b2 <cprintf>
c0103a7b:	83 c4 10             	add    $0x10,%esp
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c0103a7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a81:	8b 40 18             	mov    0x18(%eax),%eax
c0103a84:	83 ec 08             	sub    $0x8,%esp
c0103a87:	50                   	push   %eax
c0103a88:	68 cb d3 10 c0       	push   $0xc010d3cb
c0103a8d:	e8 20 c8 ff ff       	call   c01002b2 <cprintf>
c0103a92:	83 c4 10             	add    $0x10,%esp
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c0103a95:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a98:	8b 40 1c             	mov    0x1c(%eax),%eax
c0103a9b:	83 ec 08             	sub    $0x8,%esp
c0103a9e:	50                   	push   %eax
c0103a9f:	68 da d3 10 c0       	push   $0xc010d3da
c0103aa4:	e8 09 c8 ff ff       	call   c01002b2 <cprintf>
c0103aa9:	83 c4 10             	add    $0x10,%esp
}
c0103aac:	90                   	nop
c0103aad:	c9                   	leave  
c0103aae:	c3                   	ret    

c0103aaf <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c0103aaf:	55                   	push   %ebp
c0103ab0:	89 e5                	mov    %esp,%ebp
c0103ab2:	53                   	push   %ebx
c0103ab3:	83 ec 14             	sub    $0x14,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c0103ab6:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ab9:	8b 40 34             	mov    0x34(%eax),%eax
c0103abc:	83 e0 01             	and    $0x1,%eax
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0103abf:	85 c0                	test   %eax,%eax
c0103ac1:	74 07                	je     c0103aca <print_pgfault+0x1b>
c0103ac3:	bb e9 d3 10 c0       	mov    $0xc010d3e9,%ebx
c0103ac8:	eb 05                	jmp    c0103acf <print_pgfault+0x20>
c0103aca:	bb fa d3 10 c0       	mov    $0xc010d3fa,%ebx
            (tf->tf_err & 2) ? 'W' : 'R',
c0103acf:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ad2:	8b 40 34             	mov    0x34(%eax),%eax
c0103ad5:	83 e0 02             	and    $0x2,%eax
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0103ad8:	85 c0                	test   %eax,%eax
c0103ada:	74 07                	je     c0103ae3 <print_pgfault+0x34>
c0103adc:	b9 57 00 00 00       	mov    $0x57,%ecx
c0103ae1:	eb 05                	jmp    c0103ae8 <print_pgfault+0x39>
c0103ae3:	b9 52 00 00 00       	mov    $0x52,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
c0103ae8:	8b 45 08             	mov    0x8(%ebp),%eax
c0103aeb:	8b 40 34             	mov    0x34(%eax),%eax
c0103aee:	83 e0 04             	and    $0x4,%eax
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0103af1:	85 c0                	test   %eax,%eax
c0103af3:	74 07                	je     c0103afc <print_pgfault+0x4d>
c0103af5:	ba 55 00 00 00       	mov    $0x55,%edx
c0103afa:	eb 05                	jmp    c0103b01 <print_pgfault+0x52>
c0103afc:	ba 4b 00 00 00       	mov    $0x4b,%edx
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0103b01:	0f 20 d0             	mov    %cr2,%eax
c0103b04:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr2;
c0103b07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b0a:	83 ec 0c             	sub    $0xc,%esp
c0103b0d:	53                   	push   %ebx
c0103b0e:	51                   	push   %ecx
c0103b0f:	52                   	push   %edx
c0103b10:	50                   	push   %eax
c0103b11:	68 08 d4 10 c0       	push   $0xc010d408
c0103b16:	e8 97 c7 ff ff       	call   c01002b2 <cprintf>
c0103b1b:	83 c4 20             	add    $0x20,%esp
}
c0103b1e:	90                   	nop
c0103b1f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0103b22:	c9                   	leave  
c0103b23:	c3                   	ret    

c0103b24 <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c0103b24:	f3 0f 1e fb          	endbr32 
c0103b28:	55                   	push   %ebp
c0103b29:	89 e5                	mov    %esp,%ebp
c0103b2b:	83 ec 18             	sub    $0x18,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c0103b2e:	a1 64 80 1b c0       	mov    0xc01b8064,%eax
c0103b33:	85 c0                	test   %eax,%eax
c0103b35:	74 0e                	je     c0103b45 <pgfault_handler+0x21>
            print_pgfault(tf);
c0103b37:	83 ec 0c             	sub    $0xc,%esp
c0103b3a:	ff 75 08             	pushl  0x8(%ebp)
c0103b3d:	e8 6d ff ff ff       	call   c0103aaf <print_pgfault>
c0103b42:	83 c4 10             	add    $0x10,%esp
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c0103b45:	a1 64 80 1b c0       	mov    0xc01b8064,%eax
c0103b4a:	85 c0                	test   %eax,%eax
c0103b4c:	74 32                	je     c0103b80 <pgfault_handler+0x5c>
        assert(current == idleproc);
c0103b4e:	8b 15 28 60 1b c0    	mov    0xc01b6028,%edx
c0103b54:	a1 20 60 1b c0       	mov    0xc01b6020,%eax
c0103b59:	39 c2                	cmp    %eax,%edx
c0103b5b:	74 19                	je     c0103b76 <pgfault_handler+0x52>
c0103b5d:	68 2b d4 10 c0       	push   $0xc010d42b
c0103b62:	68 3f d4 10 c0       	push   $0xc010d43f
c0103b67:	68 af 00 00 00       	push   $0xaf
c0103b6c:	68 2e d2 10 c0       	push   $0xc010d22e
c0103b71:	e8 78 dc ff ff       	call   c01017ee <__panic>
        mm = check_mm_struct;
c0103b76:	a1 64 80 1b c0       	mov    0xc01b8064,%eax
c0103b7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103b7e:	eb 47                	jmp    c0103bc7 <pgfault_handler+0xa3>
    }
    else {
        if (current == NULL) {
c0103b80:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c0103b85:	85 c0                	test   %eax,%eax
c0103b87:	75 33                	jne    c0103bbc <pgfault_handler+0x98>
            print_trapframe(tf);
c0103b89:	83 ec 0c             	sub    $0xc,%esp
c0103b8c:	ff 75 08             	pushl  0x8(%ebp)
c0103b8f:	e8 7a fc ff ff       	call   c010380e <print_trapframe>
c0103b94:	83 c4 10             	add    $0x10,%esp
            print_pgfault(tf);
c0103b97:	83 ec 0c             	sub    $0xc,%esp
c0103b9a:	ff 75 08             	pushl  0x8(%ebp)
c0103b9d:	e8 0d ff ff ff       	call   c0103aaf <print_pgfault>
c0103ba2:	83 c4 10             	add    $0x10,%esp
            panic("unhandled page fault.\n");
c0103ba5:	83 ec 04             	sub    $0x4,%esp
c0103ba8:	68 54 d4 10 c0       	push   $0xc010d454
c0103bad:	68 b6 00 00 00       	push   $0xb6
c0103bb2:	68 2e d2 10 c0       	push   $0xc010d22e
c0103bb7:	e8 32 dc ff ff       	call   c01017ee <__panic>
        }
        mm = current->mm;
c0103bbc:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c0103bc1:	8b 40 18             	mov    0x18(%eax),%eax
c0103bc4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0103bc7:	0f 20 d0             	mov    %cr2,%eax
c0103bca:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c0103bcd:	8b 55 f0             	mov    -0x10(%ebp),%edx
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c0103bd0:	8b 45 08             	mov    0x8(%ebp),%eax
c0103bd3:	8b 40 34             	mov    0x34(%eax),%eax
c0103bd6:	83 ec 04             	sub    $0x4,%esp
c0103bd9:	52                   	push   %edx
c0103bda:	50                   	push   %eax
c0103bdb:	ff 75 f4             	pushl  -0xc(%ebp)
c0103bde:	e8 a9 37 00 00       	call   c010738c <do_pgfault>
c0103be3:	83 c4 10             	add    $0x10,%esp
}
c0103be6:	c9                   	leave  
c0103be7:	c3                   	ret    

c0103be8 <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c0103be8:	f3 0f 1e fb          	endbr32 
c0103bec:	55                   	push   %ebp
c0103bed:	89 e5                	mov    %esp,%ebp
c0103bef:	83 ec 18             	sub    $0x18,%esp
    char c;

    int ret=0;
c0103bf2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c0103bf9:	8b 45 08             	mov    0x8(%ebp),%eax
c0103bfc:	8b 40 30             	mov    0x30(%eax),%eax
c0103bff:	3d 80 00 00 00       	cmp    $0x80,%eax
c0103c04:	0f 84 d9 00 00 00    	je     c0103ce3 <trap_dispatch+0xfb>
c0103c0a:	3d 80 00 00 00       	cmp    $0x80,%eax
c0103c0f:	0f 87 9d 01 00 00    	ja     c0103db2 <trap_dispatch+0x1ca>
c0103c15:	83 f8 2f             	cmp    $0x2f,%eax
c0103c18:	77 1f                	ja     c0103c39 <trap_dispatch+0x51>
c0103c1a:	83 f8 0e             	cmp    $0xe,%eax
c0103c1d:	0f 82 8f 01 00 00    	jb     c0103db2 <trap_dispatch+0x1ca>
c0103c23:	83 e8 0e             	sub    $0xe,%eax
c0103c26:	83 f8 21             	cmp    $0x21,%eax
c0103c29:	0f 87 83 01 00 00    	ja     c0103db2 <trap_dispatch+0x1ca>
c0103c2f:	8b 04 85 68 d5 10 c0 	mov    -0x3fef2a98(,%eax,4),%eax
c0103c36:	3e ff e0             	notrack jmp *%eax
c0103c39:	83 e8 78             	sub    $0x78,%eax
c0103c3c:	83 f8 01             	cmp    $0x1,%eax
c0103c3f:	0f 87 6d 01 00 00    	ja     c0103db2 <trap_dispatch+0x1ca>
c0103c45:	e9 51 01 00 00       	jmp    c0103d9b <trap_dispatch+0x1b3>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c0103c4a:	83 ec 0c             	sub    $0xc,%esp
c0103c4d:	ff 75 08             	pushl  0x8(%ebp)
c0103c50:	e8 cf fe ff ff       	call   c0103b24 <pgfault_handler>
c0103c55:	83 c4 10             	add    $0x10,%esp
c0103c58:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103c5b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103c5f:	0f 84 9b 01 00 00    	je     c0103e00 <trap_dispatch+0x218>
            print_trapframe(tf);
c0103c65:	83 ec 0c             	sub    $0xc,%esp
c0103c68:	ff 75 08             	pushl  0x8(%ebp)
c0103c6b:	e8 9e fb ff ff       	call   c010380e <print_trapframe>
c0103c70:	83 c4 10             	add    $0x10,%esp
            if (current == NULL) {
c0103c73:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c0103c78:	85 c0                	test   %eax,%eax
c0103c7a:	75 17                	jne    c0103c93 <trap_dispatch+0xab>
                panic("handle pgfault failed. ret=%d\n", ret);
c0103c7c:	ff 75 f4             	pushl  -0xc(%ebp)
c0103c7f:	68 6c d4 10 c0       	push   $0xc010d46c
c0103c84:	68 cb 00 00 00       	push   $0xcb
c0103c89:	68 2e d2 10 c0       	push   $0xc010d22e
c0103c8e:	e8 5b db ff ff       	call   c01017ee <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c0103c93:	83 ec 0c             	sub    $0xc,%esp
c0103c96:	ff 75 08             	pushl  0x8(%ebp)
c0103c99:	e8 56 fb ff ff       	call   c01037f4 <trap_in_kernel>
c0103c9e:	83 c4 10             	add    $0x10,%esp
c0103ca1:	85 c0                	test   %eax,%eax
c0103ca3:	74 17                	je     c0103cbc <trap_dispatch+0xd4>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c0103ca5:	ff 75 f4             	pushl  -0xc(%ebp)
c0103ca8:	68 8c d4 10 c0       	push   $0xc010d48c
c0103cad:	68 cf 00 00 00       	push   $0xcf
c0103cb2:	68 2e d2 10 c0       	push   $0xc010d22e
c0103cb7:	e8 32 db ff ff       	call   c01017ee <__panic>
                }
                cprintf("killed by kernel.\n");
c0103cbc:	83 ec 0c             	sub    $0xc,%esp
c0103cbf:	68 ba d4 10 c0       	push   $0xc010d4ba
c0103cc4:	e8 e9 c5 ff ff       	call   c01002b2 <cprintf>
c0103cc9:	83 c4 10             	add    $0x10,%esp
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c0103ccc:	ff 75 f4             	pushl  -0xc(%ebp)
c0103ccf:	68 d0 d4 10 c0       	push   $0xc010d4d0
c0103cd4:	68 d2 00 00 00       	push   $0xd2
c0103cd9:	68 2e d2 10 c0       	push   $0xc010d22e
c0103cde:	e8 0b db ff ff       	call   c01017ee <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
    case T_SYSCALL:
        syscall();
c0103ce3:	e8 68 81 00 00       	call   c010be50 <syscall>
        break;
c0103ce8:	e9 17 01 00 00       	jmp    c0103e04 <trap_dispatch+0x21c>
         */
        /* LAB5 YOUR CODE */
        /* you should upate you lab1 code (just add ONE or TWO lines of code):
         *    Every TICK_NUM cycle, you should set current process's current->need_resched = 1
         */
        ticks ++;
c0103ced:	a1 54 80 1b c0       	mov    0xc01b8054,%eax
c0103cf2:	83 c0 01             	add    $0x1,%eax
c0103cf5:	a3 54 80 1b c0       	mov    %eax,0xc01b8054
        if (ticks % TICK_NUM == 0) {
c0103cfa:	8b 0d 54 80 1b c0    	mov    0xc01b8054,%ecx
c0103d00:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
c0103d05:	89 c8                	mov    %ecx,%eax
c0103d07:	f7 e2                	mul    %edx
c0103d09:	89 d0                	mov    %edx,%eax
c0103d0b:	c1 e8 05             	shr    $0x5,%eax
c0103d0e:	6b c0 64             	imul   $0x64,%eax,%eax
c0103d11:	29 c1                	sub    %eax,%ecx
c0103d13:	89 c8                	mov    %ecx,%eax
c0103d15:	85 c0                	test   %eax,%eax
c0103d17:	0f 85 e6 00 00 00    	jne    c0103e03 <trap_dispatch+0x21b>
            assert(current != NULL);
c0103d1d:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c0103d22:	85 c0                	test   %eax,%eax
c0103d24:	75 19                	jne    c0103d3f <trap_dispatch+0x157>
c0103d26:	68 f9 d4 10 c0       	push   $0xc010d4f9
c0103d2b:	68 3f d4 10 c0       	push   $0xc010d43f
c0103d30:	68 eb 00 00 00       	push   $0xeb
c0103d35:	68 2e d2 10 c0       	push   $0xc010d22e
c0103d3a:	e8 af da ff ff       	call   c01017ee <__panic>
            current->need_resched = 1;
c0103d3f:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c0103d44:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
        }
        break;
c0103d4b:	e9 b3 00 00 00       	jmp    c0103e03 <trap_dispatch+0x21b>
    case IRQ_OFFSET + IRQ_COM1:
        c = cons_getc();
c0103d50:	e8 49 f6 ff ff       	call   c010339e <cons_getc>
c0103d55:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("serial [%03d] %c\n", c, c);
c0103d58:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c0103d5c:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0103d60:	83 ec 04             	sub    $0x4,%esp
c0103d63:	52                   	push   %edx
c0103d64:	50                   	push   %eax
c0103d65:	68 09 d5 10 c0       	push   $0xc010d509
c0103d6a:	e8 43 c5 ff ff       	call   c01002b2 <cprintf>
c0103d6f:	83 c4 10             	add    $0x10,%esp
        break;
c0103d72:	e9 8d 00 00 00       	jmp    c0103e04 <trap_dispatch+0x21c>
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c0103d77:	e8 22 f6 ff ff       	call   c010339e <cons_getc>
c0103d7c:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("kbd [%03d] %c\n", c, c);
c0103d7f:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c0103d83:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0103d87:	83 ec 04             	sub    $0x4,%esp
c0103d8a:	52                   	push   %edx
c0103d8b:	50                   	push   %eax
c0103d8c:	68 1b d5 10 c0       	push   $0xc010d51b
c0103d91:	e8 1c c5 ff ff       	call   c01002b2 <cprintf>
c0103d96:	83 c4 10             	add    $0x10,%esp
        break;
c0103d99:	eb 69                	jmp    c0103e04 <trap_dispatch+0x21c>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c0103d9b:	83 ec 04             	sub    $0x4,%esp
c0103d9e:	68 2a d5 10 c0       	push   $0xc010d52a
c0103da3:	68 fa 00 00 00       	push   $0xfa
c0103da8:	68 2e d2 10 c0       	push   $0xc010d22e
c0103dad:	e8 3c da ff ff       	call   c01017ee <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0103db2:	83 ec 0c             	sub    $0xc,%esp
c0103db5:	ff 75 08             	pushl  0x8(%ebp)
c0103db8:	e8 51 fa ff ff       	call   c010380e <print_trapframe>
c0103dbd:	83 c4 10             	add    $0x10,%esp
        if (current != NULL) {
c0103dc0:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c0103dc5:	85 c0                	test   %eax,%eax
c0103dc7:	74 1d                	je     c0103de6 <trap_dispatch+0x1fe>
            cprintf("unhandled trap.\n");
c0103dc9:	83 ec 0c             	sub    $0xc,%esp
c0103dcc:	68 3a d5 10 c0       	push   $0xc010d53a
c0103dd1:	e8 dc c4 ff ff       	call   c01002b2 <cprintf>
c0103dd6:	83 c4 10             	add    $0x10,%esp
            do_exit(-E_KILLED);
c0103dd9:	83 ec 0c             	sub    $0xc,%esp
c0103ddc:	6a f7                	push   $0xfffffff7
c0103dde:	e8 af 6e 00 00       	call   c010ac92 <do_exit>
c0103de3:	83 c4 10             	add    $0x10,%esp
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0103de6:	83 ec 04             	sub    $0x4,%esp
c0103de9:	68 4b d5 10 c0       	push   $0xc010d54b
c0103dee:	68 07 01 00 00       	push   $0x107
c0103df3:	68 2e d2 10 c0       	push   $0xc010d22e
c0103df8:	e8 f1 d9 ff ff       	call   c01017ee <__panic>
        break;
c0103dfd:	90                   	nop
c0103dfe:	eb 04                	jmp    c0103e04 <trap_dispatch+0x21c>
        break;
c0103e00:	90                   	nop
c0103e01:	eb 01                	jmp    c0103e04 <trap_dispatch+0x21c>
        break;
c0103e03:	90                   	nop

    }
}
c0103e04:	90                   	nop
c0103e05:	c9                   	leave  
c0103e06:	c3                   	ret    

c0103e07 <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0103e07:	f3 0f 1e fb          	endbr32 
c0103e0b:	55                   	push   %ebp
c0103e0c:	89 e5                	mov    %esp,%ebp
c0103e0e:	83 ec 18             	sub    $0x18,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0103e11:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c0103e16:	85 c0                	test   %eax,%eax
c0103e18:	75 10                	jne    c0103e2a <trap+0x23>
        trap_dispatch(tf);
c0103e1a:	83 ec 0c             	sub    $0xc,%esp
c0103e1d:	ff 75 08             	pushl  0x8(%ebp)
c0103e20:	e8 c3 fd ff ff       	call   c0103be8 <trap_dispatch>
c0103e25:	83 c4 10             	add    $0x10,%esp
            if (current->need_resched) {
                schedule();
            }
        }
    }
}
c0103e28:	eb 73                	jmp    c0103e9d <trap+0x96>
        struct trapframe *otf = current->tf;
c0103e2a:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c0103e2f:	8b 40 3c             	mov    0x3c(%eax),%eax
c0103e32:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0103e35:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c0103e3a:	8b 55 08             	mov    0x8(%ebp),%edx
c0103e3d:	89 50 3c             	mov    %edx,0x3c(%eax)
        bool in_kernel = trap_in_kernel(tf);
c0103e40:	83 ec 0c             	sub    $0xc,%esp
c0103e43:	ff 75 08             	pushl  0x8(%ebp)
c0103e46:	e8 a9 f9 ff ff       	call   c01037f4 <trap_in_kernel>
c0103e4b:	83 c4 10             	add    $0x10,%esp
c0103e4e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        trap_dispatch(tf);
c0103e51:	83 ec 0c             	sub    $0xc,%esp
c0103e54:	ff 75 08             	pushl  0x8(%ebp)
c0103e57:	e8 8c fd ff ff       	call   c0103be8 <trap_dispatch>
c0103e5c:	83 c4 10             	add    $0x10,%esp
        current->tf = otf;
c0103e5f:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c0103e64:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103e67:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0103e6a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103e6e:	75 2d                	jne    c0103e9d <trap+0x96>
            if (current->flags & PF_EXITING) {
c0103e70:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c0103e75:	8b 40 44             	mov    0x44(%eax),%eax
c0103e78:	83 e0 01             	and    $0x1,%eax
c0103e7b:	85 c0                	test   %eax,%eax
c0103e7d:	74 0d                	je     c0103e8c <trap+0x85>
                do_exit(-E_KILLED);
c0103e7f:	83 ec 0c             	sub    $0xc,%esp
c0103e82:	6a f7                	push   $0xfffffff7
c0103e84:	e8 09 6e 00 00       	call   c010ac92 <do_exit>
c0103e89:	83 c4 10             	add    $0x10,%esp
            if (current->need_resched) {
c0103e8c:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c0103e91:	8b 40 10             	mov    0x10(%eax),%eax
c0103e94:	85 c0                	test   %eax,%eax
c0103e96:	74 05                	je     c0103e9d <trap+0x96>
                schedule();
c0103e98:	e8 92 7d 00 00       	call   c010bc2f <schedule>
}
c0103e9d:	90                   	nop
c0103e9e:	c9                   	leave  
c0103e9f:	c3                   	ret    

c0103ea0 <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0103ea0:	6a 00                	push   $0x0
  pushl $0
c0103ea2:	6a 00                	push   $0x0
  jmp __alltraps
c0103ea4:	e9 67 0a 00 00       	jmp    c0104910 <__alltraps>

c0103ea9 <vector1>:
.globl vector1
vector1:
  pushl $0
c0103ea9:	6a 00                	push   $0x0
  pushl $1
c0103eab:	6a 01                	push   $0x1
  jmp __alltraps
c0103ead:	e9 5e 0a 00 00       	jmp    c0104910 <__alltraps>

c0103eb2 <vector2>:
.globl vector2
vector2:
  pushl $0
c0103eb2:	6a 00                	push   $0x0
  pushl $2
c0103eb4:	6a 02                	push   $0x2
  jmp __alltraps
c0103eb6:	e9 55 0a 00 00       	jmp    c0104910 <__alltraps>

c0103ebb <vector3>:
.globl vector3
vector3:
  pushl $0
c0103ebb:	6a 00                	push   $0x0
  pushl $3
c0103ebd:	6a 03                	push   $0x3
  jmp __alltraps
c0103ebf:	e9 4c 0a 00 00       	jmp    c0104910 <__alltraps>

c0103ec4 <vector4>:
.globl vector4
vector4:
  pushl $0
c0103ec4:	6a 00                	push   $0x0
  pushl $4
c0103ec6:	6a 04                	push   $0x4
  jmp __alltraps
c0103ec8:	e9 43 0a 00 00       	jmp    c0104910 <__alltraps>

c0103ecd <vector5>:
.globl vector5
vector5:
  pushl $0
c0103ecd:	6a 00                	push   $0x0
  pushl $5
c0103ecf:	6a 05                	push   $0x5
  jmp __alltraps
c0103ed1:	e9 3a 0a 00 00       	jmp    c0104910 <__alltraps>

c0103ed6 <vector6>:
.globl vector6
vector6:
  pushl $0
c0103ed6:	6a 00                	push   $0x0
  pushl $6
c0103ed8:	6a 06                	push   $0x6
  jmp __alltraps
c0103eda:	e9 31 0a 00 00       	jmp    c0104910 <__alltraps>

c0103edf <vector7>:
.globl vector7
vector7:
  pushl $0
c0103edf:	6a 00                	push   $0x0
  pushl $7
c0103ee1:	6a 07                	push   $0x7
  jmp __alltraps
c0103ee3:	e9 28 0a 00 00       	jmp    c0104910 <__alltraps>

c0103ee8 <vector8>:
.globl vector8
vector8:
  pushl $8
c0103ee8:	6a 08                	push   $0x8
  jmp __alltraps
c0103eea:	e9 21 0a 00 00       	jmp    c0104910 <__alltraps>

c0103eef <vector9>:
.globl vector9
vector9:
  pushl $9
c0103eef:	6a 09                	push   $0x9
  jmp __alltraps
c0103ef1:	e9 1a 0a 00 00       	jmp    c0104910 <__alltraps>

c0103ef6 <vector10>:
.globl vector10
vector10:
  pushl $10
c0103ef6:	6a 0a                	push   $0xa
  jmp __alltraps
c0103ef8:	e9 13 0a 00 00       	jmp    c0104910 <__alltraps>

c0103efd <vector11>:
.globl vector11
vector11:
  pushl $11
c0103efd:	6a 0b                	push   $0xb
  jmp __alltraps
c0103eff:	e9 0c 0a 00 00       	jmp    c0104910 <__alltraps>

c0103f04 <vector12>:
.globl vector12
vector12:
  pushl $12
c0103f04:	6a 0c                	push   $0xc
  jmp __alltraps
c0103f06:	e9 05 0a 00 00       	jmp    c0104910 <__alltraps>

c0103f0b <vector13>:
.globl vector13
vector13:
  pushl $13
c0103f0b:	6a 0d                	push   $0xd
  jmp __alltraps
c0103f0d:	e9 fe 09 00 00       	jmp    c0104910 <__alltraps>

c0103f12 <vector14>:
.globl vector14
vector14:
  pushl $14
c0103f12:	6a 0e                	push   $0xe
  jmp __alltraps
c0103f14:	e9 f7 09 00 00       	jmp    c0104910 <__alltraps>

c0103f19 <vector15>:
.globl vector15
vector15:
  pushl $0
c0103f19:	6a 00                	push   $0x0
  pushl $15
c0103f1b:	6a 0f                	push   $0xf
  jmp __alltraps
c0103f1d:	e9 ee 09 00 00       	jmp    c0104910 <__alltraps>

c0103f22 <vector16>:
.globl vector16
vector16:
  pushl $0
c0103f22:	6a 00                	push   $0x0
  pushl $16
c0103f24:	6a 10                	push   $0x10
  jmp __alltraps
c0103f26:	e9 e5 09 00 00       	jmp    c0104910 <__alltraps>

c0103f2b <vector17>:
.globl vector17
vector17:
  pushl $17
c0103f2b:	6a 11                	push   $0x11
  jmp __alltraps
c0103f2d:	e9 de 09 00 00       	jmp    c0104910 <__alltraps>

c0103f32 <vector18>:
.globl vector18
vector18:
  pushl $0
c0103f32:	6a 00                	push   $0x0
  pushl $18
c0103f34:	6a 12                	push   $0x12
  jmp __alltraps
c0103f36:	e9 d5 09 00 00       	jmp    c0104910 <__alltraps>

c0103f3b <vector19>:
.globl vector19
vector19:
  pushl $0
c0103f3b:	6a 00                	push   $0x0
  pushl $19
c0103f3d:	6a 13                	push   $0x13
  jmp __alltraps
c0103f3f:	e9 cc 09 00 00       	jmp    c0104910 <__alltraps>

c0103f44 <vector20>:
.globl vector20
vector20:
  pushl $0
c0103f44:	6a 00                	push   $0x0
  pushl $20
c0103f46:	6a 14                	push   $0x14
  jmp __alltraps
c0103f48:	e9 c3 09 00 00       	jmp    c0104910 <__alltraps>

c0103f4d <vector21>:
.globl vector21
vector21:
  pushl $0
c0103f4d:	6a 00                	push   $0x0
  pushl $21
c0103f4f:	6a 15                	push   $0x15
  jmp __alltraps
c0103f51:	e9 ba 09 00 00       	jmp    c0104910 <__alltraps>

c0103f56 <vector22>:
.globl vector22
vector22:
  pushl $0
c0103f56:	6a 00                	push   $0x0
  pushl $22
c0103f58:	6a 16                	push   $0x16
  jmp __alltraps
c0103f5a:	e9 b1 09 00 00       	jmp    c0104910 <__alltraps>

c0103f5f <vector23>:
.globl vector23
vector23:
  pushl $0
c0103f5f:	6a 00                	push   $0x0
  pushl $23
c0103f61:	6a 17                	push   $0x17
  jmp __alltraps
c0103f63:	e9 a8 09 00 00       	jmp    c0104910 <__alltraps>

c0103f68 <vector24>:
.globl vector24
vector24:
  pushl $0
c0103f68:	6a 00                	push   $0x0
  pushl $24
c0103f6a:	6a 18                	push   $0x18
  jmp __alltraps
c0103f6c:	e9 9f 09 00 00       	jmp    c0104910 <__alltraps>

c0103f71 <vector25>:
.globl vector25
vector25:
  pushl $0
c0103f71:	6a 00                	push   $0x0
  pushl $25
c0103f73:	6a 19                	push   $0x19
  jmp __alltraps
c0103f75:	e9 96 09 00 00       	jmp    c0104910 <__alltraps>

c0103f7a <vector26>:
.globl vector26
vector26:
  pushl $0
c0103f7a:	6a 00                	push   $0x0
  pushl $26
c0103f7c:	6a 1a                	push   $0x1a
  jmp __alltraps
c0103f7e:	e9 8d 09 00 00       	jmp    c0104910 <__alltraps>

c0103f83 <vector27>:
.globl vector27
vector27:
  pushl $0
c0103f83:	6a 00                	push   $0x0
  pushl $27
c0103f85:	6a 1b                	push   $0x1b
  jmp __alltraps
c0103f87:	e9 84 09 00 00       	jmp    c0104910 <__alltraps>

c0103f8c <vector28>:
.globl vector28
vector28:
  pushl $0
c0103f8c:	6a 00                	push   $0x0
  pushl $28
c0103f8e:	6a 1c                	push   $0x1c
  jmp __alltraps
c0103f90:	e9 7b 09 00 00       	jmp    c0104910 <__alltraps>

c0103f95 <vector29>:
.globl vector29
vector29:
  pushl $0
c0103f95:	6a 00                	push   $0x0
  pushl $29
c0103f97:	6a 1d                	push   $0x1d
  jmp __alltraps
c0103f99:	e9 72 09 00 00       	jmp    c0104910 <__alltraps>

c0103f9e <vector30>:
.globl vector30
vector30:
  pushl $0
c0103f9e:	6a 00                	push   $0x0
  pushl $30
c0103fa0:	6a 1e                	push   $0x1e
  jmp __alltraps
c0103fa2:	e9 69 09 00 00       	jmp    c0104910 <__alltraps>

c0103fa7 <vector31>:
.globl vector31
vector31:
  pushl $0
c0103fa7:	6a 00                	push   $0x0
  pushl $31
c0103fa9:	6a 1f                	push   $0x1f
  jmp __alltraps
c0103fab:	e9 60 09 00 00       	jmp    c0104910 <__alltraps>

c0103fb0 <vector32>:
.globl vector32
vector32:
  pushl $0
c0103fb0:	6a 00                	push   $0x0
  pushl $32
c0103fb2:	6a 20                	push   $0x20
  jmp __alltraps
c0103fb4:	e9 57 09 00 00       	jmp    c0104910 <__alltraps>

c0103fb9 <vector33>:
.globl vector33
vector33:
  pushl $0
c0103fb9:	6a 00                	push   $0x0
  pushl $33
c0103fbb:	6a 21                	push   $0x21
  jmp __alltraps
c0103fbd:	e9 4e 09 00 00       	jmp    c0104910 <__alltraps>

c0103fc2 <vector34>:
.globl vector34
vector34:
  pushl $0
c0103fc2:	6a 00                	push   $0x0
  pushl $34
c0103fc4:	6a 22                	push   $0x22
  jmp __alltraps
c0103fc6:	e9 45 09 00 00       	jmp    c0104910 <__alltraps>

c0103fcb <vector35>:
.globl vector35
vector35:
  pushl $0
c0103fcb:	6a 00                	push   $0x0
  pushl $35
c0103fcd:	6a 23                	push   $0x23
  jmp __alltraps
c0103fcf:	e9 3c 09 00 00       	jmp    c0104910 <__alltraps>

c0103fd4 <vector36>:
.globl vector36
vector36:
  pushl $0
c0103fd4:	6a 00                	push   $0x0
  pushl $36
c0103fd6:	6a 24                	push   $0x24
  jmp __alltraps
c0103fd8:	e9 33 09 00 00       	jmp    c0104910 <__alltraps>

c0103fdd <vector37>:
.globl vector37
vector37:
  pushl $0
c0103fdd:	6a 00                	push   $0x0
  pushl $37
c0103fdf:	6a 25                	push   $0x25
  jmp __alltraps
c0103fe1:	e9 2a 09 00 00       	jmp    c0104910 <__alltraps>

c0103fe6 <vector38>:
.globl vector38
vector38:
  pushl $0
c0103fe6:	6a 00                	push   $0x0
  pushl $38
c0103fe8:	6a 26                	push   $0x26
  jmp __alltraps
c0103fea:	e9 21 09 00 00       	jmp    c0104910 <__alltraps>

c0103fef <vector39>:
.globl vector39
vector39:
  pushl $0
c0103fef:	6a 00                	push   $0x0
  pushl $39
c0103ff1:	6a 27                	push   $0x27
  jmp __alltraps
c0103ff3:	e9 18 09 00 00       	jmp    c0104910 <__alltraps>

c0103ff8 <vector40>:
.globl vector40
vector40:
  pushl $0
c0103ff8:	6a 00                	push   $0x0
  pushl $40
c0103ffa:	6a 28                	push   $0x28
  jmp __alltraps
c0103ffc:	e9 0f 09 00 00       	jmp    c0104910 <__alltraps>

c0104001 <vector41>:
.globl vector41
vector41:
  pushl $0
c0104001:	6a 00                	push   $0x0
  pushl $41
c0104003:	6a 29                	push   $0x29
  jmp __alltraps
c0104005:	e9 06 09 00 00       	jmp    c0104910 <__alltraps>

c010400a <vector42>:
.globl vector42
vector42:
  pushl $0
c010400a:	6a 00                	push   $0x0
  pushl $42
c010400c:	6a 2a                	push   $0x2a
  jmp __alltraps
c010400e:	e9 fd 08 00 00       	jmp    c0104910 <__alltraps>

c0104013 <vector43>:
.globl vector43
vector43:
  pushl $0
c0104013:	6a 00                	push   $0x0
  pushl $43
c0104015:	6a 2b                	push   $0x2b
  jmp __alltraps
c0104017:	e9 f4 08 00 00       	jmp    c0104910 <__alltraps>

c010401c <vector44>:
.globl vector44
vector44:
  pushl $0
c010401c:	6a 00                	push   $0x0
  pushl $44
c010401e:	6a 2c                	push   $0x2c
  jmp __alltraps
c0104020:	e9 eb 08 00 00       	jmp    c0104910 <__alltraps>

c0104025 <vector45>:
.globl vector45
vector45:
  pushl $0
c0104025:	6a 00                	push   $0x0
  pushl $45
c0104027:	6a 2d                	push   $0x2d
  jmp __alltraps
c0104029:	e9 e2 08 00 00       	jmp    c0104910 <__alltraps>

c010402e <vector46>:
.globl vector46
vector46:
  pushl $0
c010402e:	6a 00                	push   $0x0
  pushl $46
c0104030:	6a 2e                	push   $0x2e
  jmp __alltraps
c0104032:	e9 d9 08 00 00       	jmp    c0104910 <__alltraps>

c0104037 <vector47>:
.globl vector47
vector47:
  pushl $0
c0104037:	6a 00                	push   $0x0
  pushl $47
c0104039:	6a 2f                	push   $0x2f
  jmp __alltraps
c010403b:	e9 d0 08 00 00       	jmp    c0104910 <__alltraps>

c0104040 <vector48>:
.globl vector48
vector48:
  pushl $0
c0104040:	6a 00                	push   $0x0
  pushl $48
c0104042:	6a 30                	push   $0x30
  jmp __alltraps
c0104044:	e9 c7 08 00 00       	jmp    c0104910 <__alltraps>

c0104049 <vector49>:
.globl vector49
vector49:
  pushl $0
c0104049:	6a 00                	push   $0x0
  pushl $49
c010404b:	6a 31                	push   $0x31
  jmp __alltraps
c010404d:	e9 be 08 00 00       	jmp    c0104910 <__alltraps>

c0104052 <vector50>:
.globl vector50
vector50:
  pushl $0
c0104052:	6a 00                	push   $0x0
  pushl $50
c0104054:	6a 32                	push   $0x32
  jmp __alltraps
c0104056:	e9 b5 08 00 00       	jmp    c0104910 <__alltraps>

c010405b <vector51>:
.globl vector51
vector51:
  pushl $0
c010405b:	6a 00                	push   $0x0
  pushl $51
c010405d:	6a 33                	push   $0x33
  jmp __alltraps
c010405f:	e9 ac 08 00 00       	jmp    c0104910 <__alltraps>

c0104064 <vector52>:
.globl vector52
vector52:
  pushl $0
c0104064:	6a 00                	push   $0x0
  pushl $52
c0104066:	6a 34                	push   $0x34
  jmp __alltraps
c0104068:	e9 a3 08 00 00       	jmp    c0104910 <__alltraps>

c010406d <vector53>:
.globl vector53
vector53:
  pushl $0
c010406d:	6a 00                	push   $0x0
  pushl $53
c010406f:	6a 35                	push   $0x35
  jmp __alltraps
c0104071:	e9 9a 08 00 00       	jmp    c0104910 <__alltraps>

c0104076 <vector54>:
.globl vector54
vector54:
  pushl $0
c0104076:	6a 00                	push   $0x0
  pushl $54
c0104078:	6a 36                	push   $0x36
  jmp __alltraps
c010407a:	e9 91 08 00 00       	jmp    c0104910 <__alltraps>

c010407f <vector55>:
.globl vector55
vector55:
  pushl $0
c010407f:	6a 00                	push   $0x0
  pushl $55
c0104081:	6a 37                	push   $0x37
  jmp __alltraps
c0104083:	e9 88 08 00 00       	jmp    c0104910 <__alltraps>

c0104088 <vector56>:
.globl vector56
vector56:
  pushl $0
c0104088:	6a 00                	push   $0x0
  pushl $56
c010408a:	6a 38                	push   $0x38
  jmp __alltraps
c010408c:	e9 7f 08 00 00       	jmp    c0104910 <__alltraps>

c0104091 <vector57>:
.globl vector57
vector57:
  pushl $0
c0104091:	6a 00                	push   $0x0
  pushl $57
c0104093:	6a 39                	push   $0x39
  jmp __alltraps
c0104095:	e9 76 08 00 00       	jmp    c0104910 <__alltraps>

c010409a <vector58>:
.globl vector58
vector58:
  pushl $0
c010409a:	6a 00                	push   $0x0
  pushl $58
c010409c:	6a 3a                	push   $0x3a
  jmp __alltraps
c010409e:	e9 6d 08 00 00       	jmp    c0104910 <__alltraps>

c01040a3 <vector59>:
.globl vector59
vector59:
  pushl $0
c01040a3:	6a 00                	push   $0x0
  pushl $59
c01040a5:	6a 3b                	push   $0x3b
  jmp __alltraps
c01040a7:	e9 64 08 00 00       	jmp    c0104910 <__alltraps>

c01040ac <vector60>:
.globl vector60
vector60:
  pushl $0
c01040ac:	6a 00                	push   $0x0
  pushl $60
c01040ae:	6a 3c                	push   $0x3c
  jmp __alltraps
c01040b0:	e9 5b 08 00 00       	jmp    c0104910 <__alltraps>

c01040b5 <vector61>:
.globl vector61
vector61:
  pushl $0
c01040b5:	6a 00                	push   $0x0
  pushl $61
c01040b7:	6a 3d                	push   $0x3d
  jmp __alltraps
c01040b9:	e9 52 08 00 00       	jmp    c0104910 <__alltraps>

c01040be <vector62>:
.globl vector62
vector62:
  pushl $0
c01040be:	6a 00                	push   $0x0
  pushl $62
c01040c0:	6a 3e                	push   $0x3e
  jmp __alltraps
c01040c2:	e9 49 08 00 00       	jmp    c0104910 <__alltraps>

c01040c7 <vector63>:
.globl vector63
vector63:
  pushl $0
c01040c7:	6a 00                	push   $0x0
  pushl $63
c01040c9:	6a 3f                	push   $0x3f
  jmp __alltraps
c01040cb:	e9 40 08 00 00       	jmp    c0104910 <__alltraps>

c01040d0 <vector64>:
.globl vector64
vector64:
  pushl $0
c01040d0:	6a 00                	push   $0x0
  pushl $64
c01040d2:	6a 40                	push   $0x40
  jmp __alltraps
c01040d4:	e9 37 08 00 00       	jmp    c0104910 <__alltraps>

c01040d9 <vector65>:
.globl vector65
vector65:
  pushl $0
c01040d9:	6a 00                	push   $0x0
  pushl $65
c01040db:	6a 41                	push   $0x41
  jmp __alltraps
c01040dd:	e9 2e 08 00 00       	jmp    c0104910 <__alltraps>

c01040e2 <vector66>:
.globl vector66
vector66:
  pushl $0
c01040e2:	6a 00                	push   $0x0
  pushl $66
c01040e4:	6a 42                	push   $0x42
  jmp __alltraps
c01040e6:	e9 25 08 00 00       	jmp    c0104910 <__alltraps>

c01040eb <vector67>:
.globl vector67
vector67:
  pushl $0
c01040eb:	6a 00                	push   $0x0
  pushl $67
c01040ed:	6a 43                	push   $0x43
  jmp __alltraps
c01040ef:	e9 1c 08 00 00       	jmp    c0104910 <__alltraps>

c01040f4 <vector68>:
.globl vector68
vector68:
  pushl $0
c01040f4:	6a 00                	push   $0x0
  pushl $68
c01040f6:	6a 44                	push   $0x44
  jmp __alltraps
c01040f8:	e9 13 08 00 00       	jmp    c0104910 <__alltraps>

c01040fd <vector69>:
.globl vector69
vector69:
  pushl $0
c01040fd:	6a 00                	push   $0x0
  pushl $69
c01040ff:	6a 45                	push   $0x45
  jmp __alltraps
c0104101:	e9 0a 08 00 00       	jmp    c0104910 <__alltraps>

c0104106 <vector70>:
.globl vector70
vector70:
  pushl $0
c0104106:	6a 00                	push   $0x0
  pushl $70
c0104108:	6a 46                	push   $0x46
  jmp __alltraps
c010410a:	e9 01 08 00 00       	jmp    c0104910 <__alltraps>

c010410f <vector71>:
.globl vector71
vector71:
  pushl $0
c010410f:	6a 00                	push   $0x0
  pushl $71
c0104111:	6a 47                	push   $0x47
  jmp __alltraps
c0104113:	e9 f8 07 00 00       	jmp    c0104910 <__alltraps>

c0104118 <vector72>:
.globl vector72
vector72:
  pushl $0
c0104118:	6a 00                	push   $0x0
  pushl $72
c010411a:	6a 48                	push   $0x48
  jmp __alltraps
c010411c:	e9 ef 07 00 00       	jmp    c0104910 <__alltraps>

c0104121 <vector73>:
.globl vector73
vector73:
  pushl $0
c0104121:	6a 00                	push   $0x0
  pushl $73
c0104123:	6a 49                	push   $0x49
  jmp __alltraps
c0104125:	e9 e6 07 00 00       	jmp    c0104910 <__alltraps>

c010412a <vector74>:
.globl vector74
vector74:
  pushl $0
c010412a:	6a 00                	push   $0x0
  pushl $74
c010412c:	6a 4a                	push   $0x4a
  jmp __alltraps
c010412e:	e9 dd 07 00 00       	jmp    c0104910 <__alltraps>

c0104133 <vector75>:
.globl vector75
vector75:
  pushl $0
c0104133:	6a 00                	push   $0x0
  pushl $75
c0104135:	6a 4b                	push   $0x4b
  jmp __alltraps
c0104137:	e9 d4 07 00 00       	jmp    c0104910 <__alltraps>

c010413c <vector76>:
.globl vector76
vector76:
  pushl $0
c010413c:	6a 00                	push   $0x0
  pushl $76
c010413e:	6a 4c                	push   $0x4c
  jmp __alltraps
c0104140:	e9 cb 07 00 00       	jmp    c0104910 <__alltraps>

c0104145 <vector77>:
.globl vector77
vector77:
  pushl $0
c0104145:	6a 00                	push   $0x0
  pushl $77
c0104147:	6a 4d                	push   $0x4d
  jmp __alltraps
c0104149:	e9 c2 07 00 00       	jmp    c0104910 <__alltraps>

c010414e <vector78>:
.globl vector78
vector78:
  pushl $0
c010414e:	6a 00                	push   $0x0
  pushl $78
c0104150:	6a 4e                	push   $0x4e
  jmp __alltraps
c0104152:	e9 b9 07 00 00       	jmp    c0104910 <__alltraps>

c0104157 <vector79>:
.globl vector79
vector79:
  pushl $0
c0104157:	6a 00                	push   $0x0
  pushl $79
c0104159:	6a 4f                	push   $0x4f
  jmp __alltraps
c010415b:	e9 b0 07 00 00       	jmp    c0104910 <__alltraps>

c0104160 <vector80>:
.globl vector80
vector80:
  pushl $0
c0104160:	6a 00                	push   $0x0
  pushl $80
c0104162:	6a 50                	push   $0x50
  jmp __alltraps
c0104164:	e9 a7 07 00 00       	jmp    c0104910 <__alltraps>

c0104169 <vector81>:
.globl vector81
vector81:
  pushl $0
c0104169:	6a 00                	push   $0x0
  pushl $81
c010416b:	6a 51                	push   $0x51
  jmp __alltraps
c010416d:	e9 9e 07 00 00       	jmp    c0104910 <__alltraps>

c0104172 <vector82>:
.globl vector82
vector82:
  pushl $0
c0104172:	6a 00                	push   $0x0
  pushl $82
c0104174:	6a 52                	push   $0x52
  jmp __alltraps
c0104176:	e9 95 07 00 00       	jmp    c0104910 <__alltraps>

c010417b <vector83>:
.globl vector83
vector83:
  pushl $0
c010417b:	6a 00                	push   $0x0
  pushl $83
c010417d:	6a 53                	push   $0x53
  jmp __alltraps
c010417f:	e9 8c 07 00 00       	jmp    c0104910 <__alltraps>

c0104184 <vector84>:
.globl vector84
vector84:
  pushl $0
c0104184:	6a 00                	push   $0x0
  pushl $84
c0104186:	6a 54                	push   $0x54
  jmp __alltraps
c0104188:	e9 83 07 00 00       	jmp    c0104910 <__alltraps>

c010418d <vector85>:
.globl vector85
vector85:
  pushl $0
c010418d:	6a 00                	push   $0x0
  pushl $85
c010418f:	6a 55                	push   $0x55
  jmp __alltraps
c0104191:	e9 7a 07 00 00       	jmp    c0104910 <__alltraps>

c0104196 <vector86>:
.globl vector86
vector86:
  pushl $0
c0104196:	6a 00                	push   $0x0
  pushl $86
c0104198:	6a 56                	push   $0x56
  jmp __alltraps
c010419a:	e9 71 07 00 00       	jmp    c0104910 <__alltraps>

c010419f <vector87>:
.globl vector87
vector87:
  pushl $0
c010419f:	6a 00                	push   $0x0
  pushl $87
c01041a1:	6a 57                	push   $0x57
  jmp __alltraps
c01041a3:	e9 68 07 00 00       	jmp    c0104910 <__alltraps>

c01041a8 <vector88>:
.globl vector88
vector88:
  pushl $0
c01041a8:	6a 00                	push   $0x0
  pushl $88
c01041aa:	6a 58                	push   $0x58
  jmp __alltraps
c01041ac:	e9 5f 07 00 00       	jmp    c0104910 <__alltraps>

c01041b1 <vector89>:
.globl vector89
vector89:
  pushl $0
c01041b1:	6a 00                	push   $0x0
  pushl $89
c01041b3:	6a 59                	push   $0x59
  jmp __alltraps
c01041b5:	e9 56 07 00 00       	jmp    c0104910 <__alltraps>

c01041ba <vector90>:
.globl vector90
vector90:
  pushl $0
c01041ba:	6a 00                	push   $0x0
  pushl $90
c01041bc:	6a 5a                	push   $0x5a
  jmp __alltraps
c01041be:	e9 4d 07 00 00       	jmp    c0104910 <__alltraps>

c01041c3 <vector91>:
.globl vector91
vector91:
  pushl $0
c01041c3:	6a 00                	push   $0x0
  pushl $91
c01041c5:	6a 5b                	push   $0x5b
  jmp __alltraps
c01041c7:	e9 44 07 00 00       	jmp    c0104910 <__alltraps>

c01041cc <vector92>:
.globl vector92
vector92:
  pushl $0
c01041cc:	6a 00                	push   $0x0
  pushl $92
c01041ce:	6a 5c                	push   $0x5c
  jmp __alltraps
c01041d0:	e9 3b 07 00 00       	jmp    c0104910 <__alltraps>

c01041d5 <vector93>:
.globl vector93
vector93:
  pushl $0
c01041d5:	6a 00                	push   $0x0
  pushl $93
c01041d7:	6a 5d                	push   $0x5d
  jmp __alltraps
c01041d9:	e9 32 07 00 00       	jmp    c0104910 <__alltraps>

c01041de <vector94>:
.globl vector94
vector94:
  pushl $0
c01041de:	6a 00                	push   $0x0
  pushl $94
c01041e0:	6a 5e                	push   $0x5e
  jmp __alltraps
c01041e2:	e9 29 07 00 00       	jmp    c0104910 <__alltraps>

c01041e7 <vector95>:
.globl vector95
vector95:
  pushl $0
c01041e7:	6a 00                	push   $0x0
  pushl $95
c01041e9:	6a 5f                	push   $0x5f
  jmp __alltraps
c01041eb:	e9 20 07 00 00       	jmp    c0104910 <__alltraps>

c01041f0 <vector96>:
.globl vector96
vector96:
  pushl $0
c01041f0:	6a 00                	push   $0x0
  pushl $96
c01041f2:	6a 60                	push   $0x60
  jmp __alltraps
c01041f4:	e9 17 07 00 00       	jmp    c0104910 <__alltraps>

c01041f9 <vector97>:
.globl vector97
vector97:
  pushl $0
c01041f9:	6a 00                	push   $0x0
  pushl $97
c01041fb:	6a 61                	push   $0x61
  jmp __alltraps
c01041fd:	e9 0e 07 00 00       	jmp    c0104910 <__alltraps>

c0104202 <vector98>:
.globl vector98
vector98:
  pushl $0
c0104202:	6a 00                	push   $0x0
  pushl $98
c0104204:	6a 62                	push   $0x62
  jmp __alltraps
c0104206:	e9 05 07 00 00       	jmp    c0104910 <__alltraps>

c010420b <vector99>:
.globl vector99
vector99:
  pushl $0
c010420b:	6a 00                	push   $0x0
  pushl $99
c010420d:	6a 63                	push   $0x63
  jmp __alltraps
c010420f:	e9 fc 06 00 00       	jmp    c0104910 <__alltraps>

c0104214 <vector100>:
.globl vector100
vector100:
  pushl $0
c0104214:	6a 00                	push   $0x0
  pushl $100
c0104216:	6a 64                	push   $0x64
  jmp __alltraps
c0104218:	e9 f3 06 00 00       	jmp    c0104910 <__alltraps>

c010421d <vector101>:
.globl vector101
vector101:
  pushl $0
c010421d:	6a 00                	push   $0x0
  pushl $101
c010421f:	6a 65                	push   $0x65
  jmp __alltraps
c0104221:	e9 ea 06 00 00       	jmp    c0104910 <__alltraps>

c0104226 <vector102>:
.globl vector102
vector102:
  pushl $0
c0104226:	6a 00                	push   $0x0
  pushl $102
c0104228:	6a 66                	push   $0x66
  jmp __alltraps
c010422a:	e9 e1 06 00 00       	jmp    c0104910 <__alltraps>

c010422f <vector103>:
.globl vector103
vector103:
  pushl $0
c010422f:	6a 00                	push   $0x0
  pushl $103
c0104231:	6a 67                	push   $0x67
  jmp __alltraps
c0104233:	e9 d8 06 00 00       	jmp    c0104910 <__alltraps>

c0104238 <vector104>:
.globl vector104
vector104:
  pushl $0
c0104238:	6a 00                	push   $0x0
  pushl $104
c010423a:	6a 68                	push   $0x68
  jmp __alltraps
c010423c:	e9 cf 06 00 00       	jmp    c0104910 <__alltraps>

c0104241 <vector105>:
.globl vector105
vector105:
  pushl $0
c0104241:	6a 00                	push   $0x0
  pushl $105
c0104243:	6a 69                	push   $0x69
  jmp __alltraps
c0104245:	e9 c6 06 00 00       	jmp    c0104910 <__alltraps>

c010424a <vector106>:
.globl vector106
vector106:
  pushl $0
c010424a:	6a 00                	push   $0x0
  pushl $106
c010424c:	6a 6a                	push   $0x6a
  jmp __alltraps
c010424e:	e9 bd 06 00 00       	jmp    c0104910 <__alltraps>

c0104253 <vector107>:
.globl vector107
vector107:
  pushl $0
c0104253:	6a 00                	push   $0x0
  pushl $107
c0104255:	6a 6b                	push   $0x6b
  jmp __alltraps
c0104257:	e9 b4 06 00 00       	jmp    c0104910 <__alltraps>

c010425c <vector108>:
.globl vector108
vector108:
  pushl $0
c010425c:	6a 00                	push   $0x0
  pushl $108
c010425e:	6a 6c                	push   $0x6c
  jmp __alltraps
c0104260:	e9 ab 06 00 00       	jmp    c0104910 <__alltraps>

c0104265 <vector109>:
.globl vector109
vector109:
  pushl $0
c0104265:	6a 00                	push   $0x0
  pushl $109
c0104267:	6a 6d                	push   $0x6d
  jmp __alltraps
c0104269:	e9 a2 06 00 00       	jmp    c0104910 <__alltraps>

c010426e <vector110>:
.globl vector110
vector110:
  pushl $0
c010426e:	6a 00                	push   $0x0
  pushl $110
c0104270:	6a 6e                	push   $0x6e
  jmp __alltraps
c0104272:	e9 99 06 00 00       	jmp    c0104910 <__alltraps>

c0104277 <vector111>:
.globl vector111
vector111:
  pushl $0
c0104277:	6a 00                	push   $0x0
  pushl $111
c0104279:	6a 6f                	push   $0x6f
  jmp __alltraps
c010427b:	e9 90 06 00 00       	jmp    c0104910 <__alltraps>

c0104280 <vector112>:
.globl vector112
vector112:
  pushl $0
c0104280:	6a 00                	push   $0x0
  pushl $112
c0104282:	6a 70                	push   $0x70
  jmp __alltraps
c0104284:	e9 87 06 00 00       	jmp    c0104910 <__alltraps>

c0104289 <vector113>:
.globl vector113
vector113:
  pushl $0
c0104289:	6a 00                	push   $0x0
  pushl $113
c010428b:	6a 71                	push   $0x71
  jmp __alltraps
c010428d:	e9 7e 06 00 00       	jmp    c0104910 <__alltraps>

c0104292 <vector114>:
.globl vector114
vector114:
  pushl $0
c0104292:	6a 00                	push   $0x0
  pushl $114
c0104294:	6a 72                	push   $0x72
  jmp __alltraps
c0104296:	e9 75 06 00 00       	jmp    c0104910 <__alltraps>

c010429b <vector115>:
.globl vector115
vector115:
  pushl $0
c010429b:	6a 00                	push   $0x0
  pushl $115
c010429d:	6a 73                	push   $0x73
  jmp __alltraps
c010429f:	e9 6c 06 00 00       	jmp    c0104910 <__alltraps>

c01042a4 <vector116>:
.globl vector116
vector116:
  pushl $0
c01042a4:	6a 00                	push   $0x0
  pushl $116
c01042a6:	6a 74                	push   $0x74
  jmp __alltraps
c01042a8:	e9 63 06 00 00       	jmp    c0104910 <__alltraps>

c01042ad <vector117>:
.globl vector117
vector117:
  pushl $0
c01042ad:	6a 00                	push   $0x0
  pushl $117
c01042af:	6a 75                	push   $0x75
  jmp __alltraps
c01042b1:	e9 5a 06 00 00       	jmp    c0104910 <__alltraps>

c01042b6 <vector118>:
.globl vector118
vector118:
  pushl $0
c01042b6:	6a 00                	push   $0x0
  pushl $118
c01042b8:	6a 76                	push   $0x76
  jmp __alltraps
c01042ba:	e9 51 06 00 00       	jmp    c0104910 <__alltraps>

c01042bf <vector119>:
.globl vector119
vector119:
  pushl $0
c01042bf:	6a 00                	push   $0x0
  pushl $119
c01042c1:	6a 77                	push   $0x77
  jmp __alltraps
c01042c3:	e9 48 06 00 00       	jmp    c0104910 <__alltraps>

c01042c8 <vector120>:
.globl vector120
vector120:
  pushl $0
c01042c8:	6a 00                	push   $0x0
  pushl $120
c01042ca:	6a 78                	push   $0x78
  jmp __alltraps
c01042cc:	e9 3f 06 00 00       	jmp    c0104910 <__alltraps>

c01042d1 <vector121>:
.globl vector121
vector121:
  pushl $0
c01042d1:	6a 00                	push   $0x0
  pushl $121
c01042d3:	6a 79                	push   $0x79
  jmp __alltraps
c01042d5:	e9 36 06 00 00       	jmp    c0104910 <__alltraps>

c01042da <vector122>:
.globl vector122
vector122:
  pushl $0
c01042da:	6a 00                	push   $0x0
  pushl $122
c01042dc:	6a 7a                	push   $0x7a
  jmp __alltraps
c01042de:	e9 2d 06 00 00       	jmp    c0104910 <__alltraps>

c01042e3 <vector123>:
.globl vector123
vector123:
  pushl $0
c01042e3:	6a 00                	push   $0x0
  pushl $123
c01042e5:	6a 7b                	push   $0x7b
  jmp __alltraps
c01042e7:	e9 24 06 00 00       	jmp    c0104910 <__alltraps>

c01042ec <vector124>:
.globl vector124
vector124:
  pushl $0
c01042ec:	6a 00                	push   $0x0
  pushl $124
c01042ee:	6a 7c                	push   $0x7c
  jmp __alltraps
c01042f0:	e9 1b 06 00 00       	jmp    c0104910 <__alltraps>

c01042f5 <vector125>:
.globl vector125
vector125:
  pushl $0
c01042f5:	6a 00                	push   $0x0
  pushl $125
c01042f7:	6a 7d                	push   $0x7d
  jmp __alltraps
c01042f9:	e9 12 06 00 00       	jmp    c0104910 <__alltraps>

c01042fe <vector126>:
.globl vector126
vector126:
  pushl $0
c01042fe:	6a 00                	push   $0x0
  pushl $126
c0104300:	6a 7e                	push   $0x7e
  jmp __alltraps
c0104302:	e9 09 06 00 00       	jmp    c0104910 <__alltraps>

c0104307 <vector127>:
.globl vector127
vector127:
  pushl $0
c0104307:	6a 00                	push   $0x0
  pushl $127
c0104309:	6a 7f                	push   $0x7f
  jmp __alltraps
c010430b:	e9 00 06 00 00       	jmp    c0104910 <__alltraps>

c0104310 <vector128>:
.globl vector128
vector128:
  pushl $0
c0104310:	6a 00                	push   $0x0
  pushl $128
c0104312:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0104317:	e9 f4 05 00 00       	jmp    c0104910 <__alltraps>

c010431c <vector129>:
.globl vector129
vector129:
  pushl $0
c010431c:	6a 00                	push   $0x0
  pushl $129
c010431e:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0104323:	e9 e8 05 00 00       	jmp    c0104910 <__alltraps>

c0104328 <vector130>:
.globl vector130
vector130:
  pushl $0
c0104328:	6a 00                	push   $0x0
  pushl $130
c010432a:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c010432f:	e9 dc 05 00 00       	jmp    c0104910 <__alltraps>

c0104334 <vector131>:
.globl vector131
vector131:
  pushl $0
c0104334:	6a 00                	push   $0x0
  pushl $131
c0104336:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c010433b:	e9 d0 05 00 00       	jmp    c0104910 <__alltraps>

c0104340 <vector132>:
.globl vector132
vector132:
  pushl $0
c0104340:	6a 00                	push   $0x0
  pushl $132
c0104342:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0104347:	e9 c4 05 00 00       	jmp    c0104910 <__alltraps>

c010434c <vector133>:
.globl vector133
vector133:
  pushl $0
c010434c:	6a 00                	push   $0x0
  pushl $133
c010434e:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0104353:	e9 b8 05 00 00       	jmp    c0104910 <__alltraps>

c0104358 <vector134>:
.globl vector134
vector134:
  pushl $0
c0104358:	6a 00                	push   $0x0
  pushl $134
c010435a:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c010435f:	e9 ac 05 00 00       	jmp    c0104910 <__alltraps>

c0104364 <vector135>:
.globl vector135
vector135:
  pushl $0
c0104364:	6a 00                	push   $0x0
  pushl $135
c0104366:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c010436b:	e9 a0 05 00 00       	jmp    c0104910 <__alltraps>

c0104370 <vector136>:
.globl vector136
vector136:
  pushl $0
c0104370:	6a 00                	push   $0x0
  pushl $136
c0104372:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c0104377:	e9 94 05 00 00       	jmp    c0104910 <__alltraps>

c010437c <vector137>:
.globl vector137
vector137:
  pushl $0
c010437c:	6a 00                	push   $0x0
  pushl $137
c010437e:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c0104383:	e9 88 05 00 00       	jmp    c0104910 <__alltraps>

c0104388 <vector138>:
.globl vector138
vector138:
  pushl $0
c0104388:	6a 00                	push   $0x0
  pushl $138
c010438a:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c010438f:	e9 7c 05 00 00       	jmp    c0104910 <__alltraps>

c0104394 <vector139>:
.globl vector139
vector139:
  pushl $0
c0104394:	6a 00                	push   $0x0
  pushl $139
c0104396:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c010439b:	e9 70 05 00 00       	jmp    c0104910 <__alltraps>

c01043a0 <vector140>:
.globl vector140
vector140:
  pushl $0
c01043a0:	6a 00                	push   $0x0
  pushl $140
c01043a2:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c01043a7:	e9 64 05 00 00       	jmp    c0104910 <__alltraps>

c01043ac <vector141>:
.globl vector141
vector141:
  pushl $0
c01043ac:	6a 00                	push   $0x0
  pushl $141
c01043ae:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c01043b3:	e9 58 05 00 00       	jmp    c0104910 <__alltraps>

c01043b8 <vector142>:
.globl vector142
vector142:
  pushl $0
c01043b8:	6a 00                	push   $0x0
  pushl $142
c01043ba:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c01043bf:	e9 4c 05 00 00       	jmp    c0104910 <__alltraps>

c01043c4 <vector143>:
.globl vector143
vector143:
  pushl $0
c01043c4:	6a 00                	push   $0x0
  pushl $143
c01043c6:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c01043cb:	e9 40 05 00 00       	jmp    c0104910 <__alltraps>

c01043d0 <vector144>:
.globl vector144
vector144:
  pushl $0
c01043d0:	6a 00                	push   $0x0
  pushl $144
c01043d2:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c01043d7:	e9 34 05 00 00       	jmp    c0104910 <__alltraps>

c01043dc <vector145>:
.globl vector145
vector145:
  pushl $0
c01043dc:	6a 00                	push   $0x0
  pushl $145
c01043de:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c01043e3:	e9 28 05 00 00       	jmp    c0104910 <__alltraps>

c01043e8 <vector146>:
.globl vector146
vector146:
  pushl $0
c01043e8:	6a 00                	push   $0x0
  pushl $146
c01043ea:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c01043ef:	e9 1c 05 00 00       	jmp    c0104910 <__alltraps>

c01043f4 <vector147>:
.globl vector147
vector147:
  pushl $0
c01043f4:	6a 00                	push   $0x0
  pushl $147
c01043f6:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c01043fb:	e9 10 05 00 00       	jmp    c0104910 <__alltraps>

c0104400 <vector148>:
.globl vector148
vector148:
  pushl $0
c0104400:	6a 00                	push   $0x0
  pushl $148
c0104402:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c0104407:	e9 04 05 00 00       	jmp    c0104910 <__alltraps>

c010440c <vector149>:
.globl vector149
vector149:
  pushl $0
c010440c:	6a 00                	push   $0x0
  pushl $149
c010440e:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c0104413:	e9 f8 04 00 00       	jmp    c0104910 <__alltraps>

c0104418 <vector150>:
.globl vector150
vector150:
  pushl $0
c0104418:	6a 00                	push   $0x0
  pushl $150
c010441a:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c010441f:	e9 ec 04 00 00       	jmp    c0104910 <__alltraps>

c0104424 <vector151>:
.globl vector151
vector151:
  pushl $0
c0104424:	6a 00                	push   $0x0
  pushl $151
c0104426:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c010442b:	e9 e0 04 00 00       	jmp    c0104910 <__alltraps>

c0104430 <vector152>:
.globl vector152
vector152:
  pushl $0
c0104430:	6a 00                	push   $0x0
  pushl $152
c0104432:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c0104437:	e9 d4 04 00 00       	jmp    c0104910 <__alltraps>

c010443c <vector153>:
.globl vector153
vector153:
  pushl $0
c010443c:	6a 00                	push   $0x0
  pushl $153
c010443e:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c0104443:	e9 c8 04 00 00       	jmp    c0104910 <__alltraps>

c0104448 <vector154>:
.globl vector154
vector154:
  pushl $0
c0104448:	6a 00                	push   $0x0
  pushl $154
c010444a:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c010444f:	e9 bc 04 00 00       	jmp    c0104910 <__alltraps>

c0104454 <vector155>:
.globl vector155
vector155:
  pushl $0
c0104454:	6a 00                	push   $0x0
  pushl $155
c0104456:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c010445b:	e9 b0 04 00 00       	jmp    c0104910 <__alltraps>

c0104460 <vector156>:
.globl vector156
vector156:
  pushl $0
c0104460:	6a 00                	push   $0x0
  pushl $156
c0104462:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c0104467:	e9 a4 04 00 00       	jmp    c0104910 <__alltraps>

c010446c <vector157>:
.globl vector157
vector157:
  pushl $0
c010446c:	6a 00                	push   $0x0
  pushl $157
c010446e:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c0104473:	e9 98 04 00 00       	jmp    c0104910 <__alltraps>

c0104478 <vector158>:
.globl vector158
vector158:
  pushl $0
c0104478:	6a 00                	push   $0x0
  pushl $158
c010447a:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c010447f:	e9 8c 04 00 00       	jmp    c0104910 <__alltraps>

c0104484 <vector159>:
.globl vector159
vector159:
  pushl $0
c0104484:	6a 00                	push   $0x0
  pushl $159
c0104486:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c010448b:	e9 80 04 00 00       	jmp    c0104910 <__alltraps>

c0104490 <vector160>:
.globl vector160
vector160:
  pushl $0
c0104490:	6a 00                	push   $0x0
  pushl $160
c0104492:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c0104497:	e9 74 04 00 00       	jmp    c0104910 <__alltraps>

c010449c <vector161>:
.globl vector161
vector161:
  pushl $0
c010449c:	6a 00                	push   $0x0
  pushl $161
c010449e:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c01044a3:	e9 68 04 00 00       	jmp    c0104910 <__alltraps>

c01044a8 <vector162>:
.globl vector162
vector162:
  pushl $0
c01044a8:	6a 00                	push   $0x0
  pushl $162
c01044aa:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c01044af:	e9 5c 04 00 00       	jmp    c0104910 <__alltraps>

c01044b4 <vector163>:
.globl vector163
vector163:
  pushl $0
c01044b4:	6a 00                	push   $0x0
  pushl $163
c01044b6:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c01044bb:	e9 50 04 00 00       	jmp    c0104910 <__alltraps>

c01044c0 <vector164>:
.globl vector164
vector164:
  pushl $0
c01044c0:	6a 00                	push   $0x0
  pushl $164
c01044c2:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c01044c7:	e9 44 04 00 00       	jmp    c0104910 <__alltraps>

c01044cc <vector165>:
.globl vector165
vector165:
  pushl $0
c01044cc:	6a 00                	push   $0x0
  pushl $165
c01044ce:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c01044d3:	e9 38 04 00 00       	jmp    c0104910 <__alltraps>

c01044d8 <vector166>:
.globl vector166
vector166:
  pushl $0
c01044d8:	6a 00                	push   $0x0
  pushl $166
c01044da:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c01044df:	e9 2c 04 00 00       	jmp    c0104910 <__alltraps>

c01044e4 <vector167>:
.globl vector167
vector167:
  pushl $0
c01044e4:	6a 00                	push   $0x0
  pushl $167
c01044e6:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c01044eb:	e9 20 04 00 00       	jmp    c0104910 <__alltraps>

c01044f0 <vector168>:
.globl vector168
vector168:
  pushl $0
c01044f0:	6a 00                	push   $0x0
  pushl $168
c01044f2:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c01044f7:	e9 14 04 00 00       	jmp    c0104910 <__alltraps>

c01044fc <vector169>:
.globl vector169
vector169:
  pushl $0
c01044fc:	6a 00                	push   $0x0
  pushl $169
c01044fe:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c0104503:	e9 08 04 00 00       	jmp    c0104910 <__alltraps>

c0104508 <vector170>:
.globl vector170
vector170:
  pushl $0
c0104508:	6a 00                	push   $0x0
  pushl $170
c010450a:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c010450f:	e9 fc 03 00 00       	jmp    c0104910 <__alltraps>

c0104514 <vector171>:
.globl vector171
vector171:
  pushl $0
c0104514:	6a 00                	push   $0x0
  pushl $171
c0104516:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c010451b:	e9 f0 03 00 00       	jmp    c0104910 <__alltraps>

c0104520 <vector172>:
.globl vector172
vector172:
  pushl $0
c0104520:	6a 00                	push   $0x0
  pushl $172
c0104522:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c0104527:	e9 e4 03 00 00       	jmp    c0104910 <__alltraps>

c010452c <vector173>:
.globl vector173
vector173:
  pushl $0
c010452c:	6a 00                	push   $0x0
  pushl $173
c010452e:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c0104533:	e9 d8 03 00 00       	jmp    c0104910 <__alltraps>

c0104538 <vector174>:
.globl vector174
vector174:
  pushl $0
c0104538:	6a 00                	push   $0x0
  pushl $174
c010453a:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c010453f:	e9 cc 03 00 00       	jmp    c0104910 <__alltraps>

c0104544 <vector175>:
.globl vector175
vector175:
  pushl $0
c0104544:	6a 00                	push   $0x0
  pushl $175
c0104546:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c010454b:	e9 c0 03 00 00       	jmp    c0104910 <__alltraps>

c0104550 <vector176>:
.globl vector176
vector176:
  pushl $0
c0104550:	6a 00                	push   $0x0
  pushl $176
c0104552:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c0104557:	e9 b4 03 00 00       	jmp    c0104910 <__alltraps>

c010455c <vector177>:
.globl vector177
vector177:
  pushl $0
c010455c:	6a 00                	push   $0x0
  pushl $177
c010455e:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c0104563:	e9 a8 03 00 00       	jmp    c0104910 <__alltraps>

c0104568 <vector178>:
.globl vector178
vector178:
  pushl $0
c0104568:	6a 00                	push   $0x0
  pushl $178
c010456a:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c010456f:	e9 9c 03 00 00       	jmp    c0104910 <__alltraps>

c0104574 <vector179>:
.globl vector179
vector179:
  pushl $0
c0104574:	6a 00                	push   $0x0
  pushl $179
c0104576:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c010457b:	e9 90 03 00 00       	jmp    c0104910 <__alltraps>

c0104580 <vector180>:
.globl vector180
vector180:
  pushl $0
c0104580:	6a 00                	push   $0x0
  pushl $180
c0104582:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c0104587:	e9 84 03 00 00       	jmp    c0104910 <__alltraps>

c010458c <vector181>:
.globl vector181
vector181:
  pushl $0
c010458c:	6a 00                	push   $0x0
  pushl $181
c010458e:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c0104593:	e9 78 03 00 00       	jmp    c0104910 <__alltraps>

c0104598 <vector182>:
.globl vector182
vector182:
  pushl $0
c0104598:	6a 00                	push   $0x0
  pushl $182
c010459a:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c010459f:	e9 6c 03 00 00       	jmp    c0104910 <__alltraps>

c01045a4 <vector183>:
.globl vector183
vector183:
  pushl $0
c01045a4:	6a 00                	push   $0x0
  pushl $183
c01045a6:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c01045ab:	e9 60 03 00 00       	jmp    c0104910 <__alltraps>

c01045b0 <vector184>:
.globl vector184
vector184:
  pushl $0
c01045b0:	6a 00                	push   $0x0
  pushl $184
c01045b2:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c01045b7:	e9 54 03 00 00       	jmp    c0104910 <__alltraps>

c01045bc <vector185>:
.globl vector185
vector185:
  pushl $0
c01045bc:	6a 00                	push   $0x0
  pushl $185
c01045be:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c01045c3:	e9 48 03 00 00       	jmp    c0104910 <__alltraps>

c01045c8 <vector186>:
.globl vector186
vector186:
  pushl $0
c01045c8:	6a 00                	push   $0x0
  pushl $186
c01045ca:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c01045cf:	e9 3c 03 00 00       	jmp    c0104910 <__alltraps>

c01045d4 <vector187>:
.globl vector187
vector187:
  pushl $0
c01045d4:	6a 00                	push   $0x0
  pushl $187
c01045d6:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c01045db:	e9 30 03 00 00       	jmp    c0104910 <__alltraps>

c01045e0 <vector188>:
.globl vector188
vector188:
  pushl $0
c01045e0:	6a 00                	push   $0x0
  pushl $188
c01045e2:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c01045e7:	e9 24 03 00 00       	jmp    c0104910 <__alltraps>

c01045ec <vector189>:
.globl vector189
vector189:
  pushl $0
c01045ec:	6a 00                	push   $0x0
  pushl $189
c01045ee:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c01045f3:	e9 18 03 00 00       	jmp    c0104910 <__alltraps>

c01045f8 <vector190>:
.globl vector190
vector190:
  pushl $0
c01045f8:	6a 00                	push   $0x0
  pushl $190
c01045fa:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c01045ff:	e9 0c 03 00 00       	jmp    c0104910 <__alltraps>

c0104604 <vector191>:
.globl vector191
vector191:
  pushl $0
c0104604:	6a 00                	push   $0x0
  pushl $191
c0104606:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c010460b:	e9 00 03 00 00       	jmp    c0104910 <__alltraps>

c0104610 <vector192>:
.globl vector192
vector192:
  pushl $0
c0104610:	6a 00                	push   $0x0
  pushl $192
c0104612:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c0104617:	e9 f4 02 00 00       	jmp    c0104910 <__alltraps>

c010461c <vector193>:
.globl vector193
vector193:
  pushl $0
c010461c:	6a 00                	push   $0x0
  pushl $193
c010461e:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c0104623:	e9 e8 02 00 00       	jmp    c0104910 <__alltraps>

c0104628 <vector194>:
.globl vector194
vector194:
  pushl $0
c0104628:	6a 00                	push   $0x0
  pushl $194
c010462a:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c010462f:	e9 dc 02 00 00       	jmp    c0104910 <__alltraps>

c0104634 <vector195>:
.globl vector195
vector195:
  pushl $0
c0104634:	6a 00                	push   $0x0
  pushl $195
c0104636:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c010463b:	e9 d0 02 00 00       	jmp    c0104910 <__alltraps>

c0104640 <vector196>:
.globl vector196
vector196:
  pushl $0
c0104640:	6a 00                	push   $0x0
  pushl $196
c0104642:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c0104647:	e9 c4 02 00 00       	jmp    c0104910 <__alltraps>

c010464c <vector197>:
.globl vector197
vector197:
  pushl $0
c010464c:	6a 00                	push   $0x0
  pushl $197
c010464e:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c0104653:	e9 b8 02 00 00       	jmp    c0104910 <__alltraps>

c0104658 <vector198>:
.globl vector198
vector198:
  pushl $0
c0104658:	6a 00                	push   $0x0
  pushl $198
c010465a:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c010465f:	e9 ac 02 00 00       	jmp    c0104910 <__alltraps>

c0104664 <vector199>:
.globl vector199
vector199:
  pushl $0
c0104664:	6a 00                	push   $0x0
  pushl $199
c0104666:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c010466b:	e9 a0 02 00 00       	jmp    c0104910 <__alltraps>

c0104670 <vector200>:
.globl vector200
vector200:
  pushl $0
c0104670:	6a 00                	push   $0x0
  pushl $200
c0104672:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c0104677:	e9 94 02 00 00       	jmp    c0104910 <__alltraps>

c010467c <vector201>:
.globl vector201
vector201:
  pushl $0
c010467c:	6a 00                	push   $0x0
  pushl $201
c010467e:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c0104683:	e9 88 02 00 00       	jmp    c0104910 <__alltraps>

c0104688 <vector202>:
.globl vector202
vector202:
  pushl $0
c0104688:	6a 00                	push   $0x0
  pushl $202
c010468a:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c010468f:	e9 7c 02 00 00       	jmp    c0104910 <__alltraps>

c0104694 <vector203>:
.globl vector203
vector203:
  pushl $0
c0104694:	6a 00                	push   $0x0
  pushl $203
c0104696:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c010469b:	e9 70 02 00 00       	jmp    c0104910 <__alltraps>

c01046a0 <vector204>:
.globl vector204
vector204:
  pushl $0
c01046a0:	6a 00                	push   $0x0
  pushl $204
c01046a2:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c01046a7:	e9 64 02 00 00       	jmp    c0104910 <__alltraps>

c01046ac <vector205>:
.globl vector205
vector205:
  pushl $0
c01046ac:	6a 00                	push   $0x0
  pushl $205
c01046ae:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c01046b3:	e9 58 02 00 00       	jmp    c0104910 <__alltraps>

c01046b8 <vector206>:
.globl vector206
vector206:
  pushl $0
c01046b8:	6a 00                	push   $0x0
  pushl $206
c01046ba:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c01046bf:	e9 4c 02 00 00       	jmp    c0104910 <__alltraps>

c01046c4 <vector207>:
.globl vector207
vector207:
  pushl $0
c01046c4:	6a 00                	push   $0x0
  pushl $207
c01046c6:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c01046cb:	e9 40 02 00 00       	jmp    c0104910 <__alltraps>

c01046d0 <vector208>:
.globl vector208
vector208:
  pushl $0
c01046d0:	6a 00                	push   $0x0
  pushl $208
c01046d2:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c01046d7:	e9 34 02 00 00       	jmp    c0104910 <__alltraps>

c01046dc <vector209>:
.globl vector209
vector209:
  pushl $0
c01046dc:	6a 00                	push   $0x0
  pushl $209
c01046de:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c01046e3:	e9 28 02 00 00       	jmp    c0104910 <__alltraps>

c01046e8 <vector210>:
.globl vector210
vector210:
  pushl $0
c01046e8:	6a 00                	push   $0x0
  pushl $210
c01046ea:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c01046ef:	e9 1c 02 00 00       	jmp    c0104910 <__alltraps>

c01046f4 <vector211>:
.globl vector211
vector211:
  pushl $0
c01046f4:	6a 00                	push   $0x0
  pushl $211
c01046f6:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c01046fb:	e9 10 02 00 00       	jmp    c0104910 <__alltraps>

c0104700 <vector212>:
.globl vector212
vector212:
  pushl $0
c0104700:	6a 00                	push   $0x0
  pushl $212
c0104702:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c0104707:	e9 04 02 00 00       	jmp    c0104910 <__alltraps>

c010470c <vector213>:
.globl vector213
vector213:
  pushl $0
c010470c:	6a 00                	push   $0x0
  pushl $213
c010470e:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c0104713:	e9 f8 01 00 00       	jmp    c0104910 <__alltraps>

c0104718 <vector214>:
.globl vector214
vector214:
  pushl $0
c0104718:	6a 00                	push   $0x0
  pushl $214
c010471a:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c010471f:	e9 ec 01 00 00       	jmp    c0104910 <__alltraps>

c0104724 <vector215>:
.globl vector215
vector215:
  pushl $0
c0104724:	6a 00                	push   $0x0
  pushl $215
c0104726:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c010472b:	e9 e0 01 00 00       	jmp    c0104910 <__alltraps>

c0104730 <vector216>:
.globl vector216
vector216:
  pushl $0
c0104730:	6a 00                	push   $0x0
  pushl $216
c0104732:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c0104737:	e9 d4 01 00 00       	jmp    c0104910 <__alltraps>

c010473c <vector217>:
.globl vector217
vector217:
  pushl $0
c010473c:	6a 00                	push   $0x0
  pushl $217
c010473e:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c0104743:	e9 c8 01 00 00       	jmp    c0104910 <__alltraps>

c0104748 <vector218>:
.globl vector218
vector218:
  pushl $0
c0104748:	6a 00                	push   $0x0
  pushl $218
c010474a:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c010474f:	e9 bc 01 00 00       	jmp    c0104910 <__alltraps>

c0104754 <vector219>:
.globl vector219
vector219:
  pushl $0
c0104754:	6a 00                	push   $0x0
  pushl $219
c0104756:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c010475b:	e9 b0 01 00 00       	jmp    c0104910 <__alltraps>

c0104760 <vector220>:
.globl vector220
vector220:
  pushl $0
c0104760:	6a 00                	push   $0x0
  pushl $220
c0104762:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c0104767:	e9 a4 01 00 00       	jmp    c0104910 <__alltraps>

c010476c <vector221>:
.globl vector221
vector221:
  pushl $0
c010476c:	6a 00                	push   $0x0
  pushl $221
c010476e:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c0104773:	e9 98 01 00 00       	jmp    c0104910 <__alltraps>

c0104778 <vector222>:
.globl vector222
vector222:
  pushl $0
c0104778:	6a 00                	push   $0x0
  pushl $222
c010477a:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c010477f:	e9 8c 01 00 00       	jmp    c0104910 <__alltraps>

c0104784 <vector223>:
.globl vector223
vector223:
  pushl $0
c0104784:	6a 00                	push   $0x0
  pushl $223
c0104786:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c010478b:	e9 80 01 00 00       	jmp    c0104910 <__alltraps>

c0104790 <vector224>:
.globl vector224
vector224:
  pushl $0
c0104790:	6a 00                	push   $0x0
  pushl $224
c0104792:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c0104797:	e9 74 01 00 00       	jmp    c0104910 <__alltraps>

c010479c <vector225>:
.globl vector225
vector225:
  pushl $0
c010479c:	6a 00                	push   $0x0
  pushl $225
c010479e:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c01047a3:	e9 68 01 00 00       	jmp    c0104910 <__alltraps>

c01047a8 <vector226>:
.globl vector226
vector226:
  pushl $0
c01047a8:	6a 00                	push   $0x0
  pushl $226
c01047aa:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c01047af:	e9 5c 01 00 00       	jmp    c0104910 <__alltraps>

c01047b4 <vector227>:
.globl vector227
vector227:
  pushl $0
c01047b4:	6a 00                	push   $0x0
  pushl $227
c01047b6:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c01047bb:	e9 50 01 00 00       	jmp    c0104910 <__alltraps>

c01047c0 <vector228>:
.globl vector228
vector228:
  pushl $0
c01047c0:	6a 00                	push   $0x0
  pushl $228
c01047c2:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c01047c7:	e9 44 01 00 00       	jmp    c0104910 <__alltraps>

c01047cc <vector229>:
.globl vector229
vector229:
  pushl $0
c01047cc:	6a 00                	push   $0x0
  pushl $229
c01047ce:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c01047d3:	e9 38 01 00 00       	jmp    c0104910 <__alltraps>

c01047d8 <vector230>:
.globl vector230
vector230:
  pushl $0
c01047d8:	6a 00                	push   $0x0
  pushl $230
c01047da:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c01047df:	e9 2c 01 00 00       	jmp    c0104910 <__alltraps>

c01047e4 <vector231>:
.globl vector231
vector231:
  pushl $0
c01047e4:	6a 00                	push   $0x0
  pushl $231
c01047e6:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c01047eb:	e9 20 01 00 00       	jmp    c0104910 <__alltraps>

c01047f0 <vector232>:
.globl vector232
vector232:
  pushl $0
c01047f0:	6a 00                	push   $0x0
  pushl $232
c01047f2:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c01047f7:	e9 14 01 00 00       	jmp    c0104910 <__alltraps>

c01047fc <vector233>:
.globl vector233
vector233:
  pushl $0
c01047fc:	6a 00                	push   $0x0
  pushl $233
c01047fe:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c0104803:	e9 08 01 00 00       	jmp    c0104910 <__alltraps>

c0104808 <vector234>:
.globl vector234
vector234:
  pushl $0
c0104808:	6a 00                	push   $0x0
  pushl $234
c010480a:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c010480f:	e9 fc 00 00 00       	jmp    c0104910 <__alltraps>

c0104814 <vector235>:
.globl vector235
vector235:
  pushl $0
c0104814:	6a 00                	push   $0x0
  pushl $235
c0104816:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c010481b:	e9 f0 00 00 00       	jmp    c0104910 <__alltraps>

c0104820 <vector236>:
.globl vector236
vector236:
  pushl $0
c0104820:	6a 00                	push   $0x0
  pushl $236
c0104822:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c0104827:	e9 e4 00 00 00       	jmp    c0104910 <__alltraps>

c010482c <vector237>:
.globl vector237
vector237:
  pushl $0
c010482c:	6a 00                	push   $0x0
  pushl $237
c010482e:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c0104833:	e9 d8 00 00 00       	jmp    c0104910 <__alltraps>

c0104838 <vector238>:
.globl vector238
vector238:
  pushl $0
c0104838:	6a 00                	push   $0x0
  pushl $238
c010483a:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c010483f:	e9 cc 00 00 00       	jmp    c0104910 <__alltraps>

c0104844 <vector239>:
.globl vector239
vector239:
  pushl $0
c0104844:	6a 00                	push   $0x0
  pushl $239
c0104846:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c010484b:	e9 c0 00 00 00       	jmp    c0104910 <__alltraps>

c0104850 <vector240>:
.globl vector240
vector240:
  pushl $0
c0104850:	6a 00                	push   $0x0
  pushl $240
c0104852:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c0104857:	e9 b4 00 00 00       	jmp    c0104910 <__alltraps>

c010485c <vector241>:
.globl vector241
vector241:
  pushl $0
c010485c:	6a 00                	push   $0x0
  pushl $241
c010485e:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c0104863:	e9 a8 00 00 00       	jmp    c0104910 <__alltraps>

c0104868 <vector242>:
.globl vector242
vector242:
  pushl $0
c0104868:	6a 00                	push   $0x0
  pushl $242
c010486a:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c010486f:	e9 9c 00 00 00       	jmp    c0104910 <__alltraps>

c0104874 <vector243>:
.globl vector243
vector243:
  pushl $0
c0104874:	6a 00                	push   $0x0
  pushl $243
c0104876:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c010487b:	e9 90 00 00 00       	jmp    c0104910 <__alltraps>

c0104880 <vector244>:
.globl vector244
vector244:
  pushl $0
c0104880:	6a 00                	push   $0x0
  pushl $244
c0104882:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c0104887:	e9 84 00 00 00       	jmp    c0104910 <__alltraps>

c010488c <vector245>:
.globl vector245
vector245:
  pushl $0
c010488c:	6a 00                	push   $0x0
  pushl $245
c010488e:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c0104893:	e9 78 00 00 00       	jmp    c0104910 <__alltraps>

c0104898 <vector246>:
.globl vector246
vector246:
  pushl $0
c0104898:	6a 00                	push   $0x0
  pushl $246
c010489a:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c010489f:	e9 6c 00 00 00       	jmp    c0104910 <__alltraps>

c01048a4 <vector247>:
.globl vector247
vector247:
  pushl $0
c01048a4:	6a 00                	push   $0x0
  pushl $247
c01048a6:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c01048ab:	e9 60 00 00 00       	jmp    c0104910 <__alltraps>

c01048b0 <vector248>:
.globl vector248
vector248:
  pushl $0
c01048b0:	6a 00                	push   $0x0
  pushl $248
c01048b2:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c01048b7:	e9 54 00 00 00       	jmp    c0104910 <__alltraps>

c01048bc <vector249>:
.globl vector249
vector249:
  pushl $0
c01048bc:	6a 00                	push   $0x0
  pushl $249
c01048be:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c01048c3:	e9 48 00 00 00       	jmp    c0104910 <__alltraps>

c01048c8 <vector250>:
.globl vector250
vector250:
  pushl $0
c01048c8:	6a 00                	push   $0x0
  pushl $250
c01048ca:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c01048cf:	e9 3c 00 00 00       	jmp    c0104910 <__alltraps>

c01048d4 <vector251>:
.globl vector251
vector251:
  pushl $0
c01048d4:	6a 00                	push   $0x0
  pushl $251
c01048d6:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c01048db:	e9 30 00 00 00       	jmp    c0104910 <__alltraps>

c01048e0 <vector252>:
.globl vector252
vector252:
  pushl $0
c01048e0:	6a 00                	push   $0x0
  pushl $252
c01048e2:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c01048e7:	e9 24 00 00 00       	jmp    c0104910 <__alltraps>

c01048ec <vector253>:
.globl vector253
vector253:
  pushl $0
c01048ec:	6a 00                	push   $0x0
  pushl $253
c01048ee:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c01048f3:	e9 18 00 00 00       	jmp    c0104910 <__alltraps>

c01048f8 <vector254>:
.globl vector254
vector254:
  pushl $0
c01048f8:	6a 00                	push   $0x0
  pushl $254
c01048fa:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c01048ff:	e9 0c 00 00 00       	jmp    c0104910 <__alltraps>

c0104904 <vector255>:
.globl vector255
vector255:
  pushl $0
c0104904:	6a 00                	push   $0x0
  pushl $255
c0104906:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c010490b:	e9 00 00 00 00       	jmp    c0104910 <__alltraps>

c0104910 <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0104910:	1e                   	push   %ds
    pushl %es
c0104911:	06                   	push   %es
    pushl %fs
c0104912:	0f a0                	push   %fs
    pushl %gs
c0104914:	0f a8                	push   %gs
    pushal
c0104916:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0104917:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c010491c:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c010491e:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0104920:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0104921:	e8 e1 f4 ff ff       	call   c0103e07 <trap>

    # pop the pushed stack pointer
    popl %esp
c0104926:	5c                   	pop    %esp

c0104927 <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c0104927:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c0104928:	0f a9                	pop    %gs
    popl %fs
c010492a:	0f a1                	pop    %fs
    popl %es
c010492c:	07                   	pop    %es
    popl %ds
c010492d:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c010492e:	83 c4 08             	add    $0x8,%esp
    iret
c0104931:	cf                   	iret   

c0104932 <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0104932:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0104936:	eb ef                	jmp    c0104927 <__trapret>

c0104938 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104938:	55                   	push   %ebp
c0104939:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010493b:	a1 60 80 1b c0       	mov    0xc01b8060,%eax
c0104940:	8b 55 08             	mov    0x8(%ebp),%edx
c0104943:	29 c2                	sub    %eax,%edx
c0104945:	89 d0                	mov    %edx,%eax
c0104947:	c1 f8 02             	sar    $0x2,%eax
c010494a:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c0104950:	5d                   	pop    %ebp
c0104951:	c3                   	ret    

c0104952 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104952:	55                   	push   %ebp
c0104953:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0104955:	ff 75 08             	pushl  0x8(%ebp)
c0104958:	e8 db ff ff ff       	call   c0104938 <page2ppn>
c010495d:	83 c4 04             	add    $0x4,%esp
c0104960:	c1 e0 0c             	shl    $0xc,%eax
}
c0104963:	c9                   	leave  
c0104964:	c3                   	ret    

c0104965 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104965:	55                   	push   %ebp
c0104966:	89 e5                	mov    %esp,%ebp
c0104968:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c010496b:	8b 45 08             	mov    0x8(%ebp),%eax
c010496e:	c1 e8 0c             	shr    $0xc,%eax
c0104971:	89 c2                	mov    %eax,%edx
c0104973:	a1 80 5f 1b c0       	mov    0xc01b5f80,%eax
c0104978:	39 c2                	cmp    %eax,%edx
c010497a:	72 14                	jb     c0104990 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c010497c:	83 ec 04             	sub    $0x4,%esp
c010497f:	68 90 d7 10 c0       	push   $0xc010d790
c0104984:	6a 5e                	push   $0x5e
c0104986:	68 af d7 10 c0       	push   $0xc010d7af
c010498b:	e8 5e ce ff ff       	call   c01017ee <__panic>
    }
    return &pages[PPN(pa)];
c0104990:	8b 0d 60 80 1b c0    	mov    0xc01b8060,%ecx
c0104996:	8b 45 08             	mov    0x8(%ebp),%eax
c0104999:	c1 e8 0c             	shr    $0xc,%eax
c010499c:	89 c2                	mov    %eax,%edx
c010499e:	89 d0                	mov    %edx,%eax
c01049a0:	c1 e0 03             	shl    $0x3,%eax
c01049a3:	01 d0                	add    %edx,%eax
c01049a5:	c1 e0 02             	shl    $0x2,%eax
c01049a8:	01 c8                	add    %ecx,%eax
}
c01049aa:	c9                   	leave  
c01049ab:	c3                   	ret    

c01049ac <page2kva>:

static inline void *
page2kva(struct Page *page) {
c01049ac:	55                   	push   %ebp
c01049ad:	89 e5                	mov    %esp,%ebp
c01049af:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c01049b2:	ff 75 08             	pushl  0x8(%ebp)
c01049b5:	e8 98 ff ff ff       	call   c0104952 <page2pa>
c01049ba:	83 c4 04             	add    $0x4,%esp
c01049bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01049c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049c3:	c1 e8 0c             	shr    $0xc,%eax
c01049c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01049c9:	a1 80 5f 1b c0       	mov    0xc01b5f80,%eax
c01049ce:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01049d1:	72 14                	jb     c01049e7 <page2kva+0x3b>
c01049d3:	ff 75 f4             	pushl  -0xc(%ebp)
c01049d6:	68 c0 d7 10 c0       	push   $0xc010d7c0
c01049db:	6a 65                	push   $0x65
c01049dd:	68 af d7 10 c0       	push   $0xc010d7af
c01049e2:	e8 07 ce ff ff       	call   c01017ee <__panic>
c01049e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049ea:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c01049ef:	c9                   	leave  
c01049f0:	c3                   	ret    

c01049f1 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c01049f1:	55                   	push   %ebp
c01049f2:	89 e5                	mov    %esp,%ebp
c01049f4:	83 ec 08             	sub    $0x8,%esp
    if (!(pte & PTE_P)) {
c01049f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01049fa:	83 e0 01             	and    $0x1,%eax
c01049fd:	85 c0                	test   %eax,%eax
c01049ff:	75 14                	jne    c0104a15 <pte2page+0x24>
        panic("pte2page called with invalid pte");
c0104a01:	83 ec 04             	sub    $0x4,%esp
c0104a04:	68 e4 d7 10 c0       	push   $0xc010d7e4
c0104a09:	6a 70                	push   $0x70
c0104a0b:	68 af d7 10 c0       	push   $0xc010d7af
c0104a10:	e8 d9 cd ff ff       	call   c01017ee <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0104a15:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a18:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104a1d:	83 ec 0c             	sub    $0xc,%esp
c0104a20:	50                   	push   %eax
c0104a21:	e8 3f ff ff ff       	call   c0104965 <pa2page>
c0104a26:	83 c4 10             	add    $0x10,%esp
}
c0104a29:	c9                   	leave  
c0104a2a:	c3                   	ret    

c0104a2b <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0104a2b:	55                   	push   %ebp
c0104a2c:	89 e5                	mov    %esp,%ebp
c0104a2e:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c0104a31:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a34:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104a39:	83 ec 0c             	sub    $0xc,%esp
c0104a3c:	50                   	push   %eax
c0104a3d:	e8 23 ff ff ff       	call   c0104965 <pa2page>
c0104a42:	83 c4 10             	add    $0x10,%esp
}
c0104a45:	c9                   	leave  
c0104a46:	c3                   	ret    

c0104a47 <page_ref>:

static inline int
page_ref(struct Page *page) {
c0104a47:	55                   	push   %ebp
c0104a48:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0104a4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a4d:	8b 00                	mov    (%eax),%eax
}
c0104a4f:	5d                   	pop    %ebp
c0104a50:	c3                   	ret    

c0104a51 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0104a51:	55                   	push   %ebp
c0104a52:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0104a54:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a57:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104a5a:	89 10                	mov    %edx,(%eax)
}
c0104a5c:	90                   	nop
c0104a5d:	5d                   	pop    %ebp
c0104a5e:	c3                   	ret    

c0104a5f <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0104a5f:	55                   	push   %ebp
c0104a60:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0104a62:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a65:	8b 00                	mov    (%eax),%eax
c0104a67:	8d 50 01             	lea    0x1(%eax),%edx
c0104a6a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a6d:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104a6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a72:	8b 00                	mov    (%eax),%eax
}
c0104a74:	5d                   	pop    %ebp
c0104a75:	c3                   	ret    

c0104a76 <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0104a76:	55                   	push   %ebp
c0104a77:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0104a79:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a7c:	8b 00                	mov    (%eax),%eax
c0104a7e:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104a81:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a84:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104a86:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a89:	8b 00                	mov    (%eax),%eax
}
c0104a8b:	5d                   	pop    %ebp
c0104a8c:	c3                   	ret    

c0104a8d <__intr_save>:
__intr_save(void) {
c0104a8d:	55                   	push   %ebp
c0104a8e:	89 e5                	mov    %esp,%ebp
c0104a90:	83 ec 18             	sub    $0x18,%esp
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0104a93:	9c                   	pushf  
c0104a94:	58                   	pop    %eax
c0104a95:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0104a98:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0104a9b:	25 00 02 00 00       	and    $0x200,%eax
c0104aa0:	85 c0                	test   %eax,%eax
c0104aa2:	74 0c                	je     c0104ab0 <__intr_save+0x23>
        intr_disable();
c0104aa4:	e8 56 eb ff ff       	call   c01035ff <intr_disable>
        return 1;
c0104aa9:	b8 01 00 00 00       	mov    $0x1,%eax
c0104aae:	eb 05                	jmp    c0104ab5 <__intr_save+0x28>
    return 0;
c0104ab0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104ab5:	c9                   	leave  
c0104ab6:	c3                   	ret    

c0104ab7 <__intr_restore>:
__intr_restore(bool flag) {
c0104ab7:	55                   	push   %ebp
c0104ab8:	89 e5                	mov    %esp,%ebp
c0104aba:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0104abd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104ac1:	74 05                	je     c0104ac8 <__intr_restore+0x11>
        intr_enable();
c0104ac3:	e8 2b eb ff ff       	call   c01035f3 <intr_enable>
}
c0104ac8:	90                   	nop
c0104ac9:	c9                   	leave  
c0104aca:	c3                   	ret    

c0104acb <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c0104acb:	55                   	push   %ebp
c0104acc:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c0104ace:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ad1:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0104ad4:	b8 23 00 00 00       	mov    $0x23,%eax
c0104ad9:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c0104adb:	b8 23 00 00 00       	mov    $0x23,%eax
c0104ae0:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0104ae2:	b8 10 00 00 00       	mov    $0x10,%eax
c0104ae7:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0104ae9:	b8 10 00 00 00       	mov    $0x10,%eax
c0104aee:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0104af0:	b8 10 00 00 00       	mov    $0x10,%eax
c0104af5:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0104af7:	ea fe 4a 10 c0 08 00 	ljmp   $0x8,$0xc0104afe
}
c0104afe:	90                   	nop
c0104aff:	5d                   	pop    %ebp
c0104b00:	c3                   	ret    

c0104b01 <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c0104b01:	f3 0f 1e fb          	endbr32 
c0104b05:	55                   	push   %ebp
c0104b06:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c0104b08:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b0b:	a3 a4 5f 1b c0       	mov    %eax,0xc01b5fa4
}
c0104b10:	90                   	nop
c0104b11:	5d                   	pop    %ebp
c0104b12:	c3                   	ret    

c0104b13 <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c0104b13:	f3 0f 1e fb          	endbr32 
c0104b17:	55                   	push   %ebp
c0104b18:	89 e5                	mov    %esp,%ebp
c0104b1a:	83 ec 10             	sub    $0x10,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c0104b1d:	b8 00 20 13 c0       	mov    $0xc0132000,%eax
c0104b22:	50                   	push   %eax
c0104b23:	e8 d9 ff ff ff       	call   c0104b01 <load_esp0>
c0104b28:	83 c4 04             	add    $0x4,%esp
    ts.ts_ss0 = KERNEL_DS;
c0104b2b:	66 c7 05 a8 5f 1b c0 	movw   $0x10,0xc01b5fa8
c0104b32:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c0104b34:	66 c7 05 28 2a 13 c0 	movw   $0x68,0xc0132a28
c0104b3b:	68 00 
c0104b3d:	b8 a0 5f 1b c0       	mov    $0xc01b5fa0,%eax
c0104b42:	66 a3 2a 2a 13 c0    	mov    %ax,0xc0132a2a
c0104b48:	b8 a0 5f 1b c0       	mov    $0xc01b5fa0,%eax
c0104b4d:	c1 e8 10             	shr    $0x10,%eax
c0104b50:	a2 2c 2a 13 c0       	mov    %al,0xc0132a2c
c0104b55:	0f b6 05 2d 2a 13 c0 	movzbl 0xc0132a2d,%eax
c0104b5c:	83 e0 f0             	and    $0xfffffff0,%eax
c0104b5f:	83 c8 09             	or     $0x9,%eax
c0104b62:	a2 2d 2a 13 c0       	mov    %al,0xc0132a2d
c0104b67:	0f b6 05 2d 2a 13 c0 	movzbl 0xc0132a2d,%eax
c0104b6e:	83 e0 ef             	and    $0xffffffef,%eax
c0104b71:	a2 2d 2a 13 c0       	mov    %al,0xc0132a2d
c0104b76:	0f b6 05 2d 2a 13 c0 	movzbl 0xc0132a2d,%eax
c0104b7d:	83 e0 9f             	and    $0xffffff9f,%eax
c0104b80:	a2 2d 2a 13 c0       	mov    %al,0xc0132a2d
c0104b85:	0f b6 05 2d 2a 13 c0 	movzbl 0xc0132a2d,%eax
c0104b8c:	83 c8 80             	or     $0xffffff80,%eax
c0104b8f:	a2 2d 2a 13 c0       	mov    %al,0xc0132a2d
c0104b94:	0f b6 05 2e 2a 13 c0 	movzbl 0xc0132a2e,%eax
c0104b9b:	83 e0 f0             	and    $0xfffffff0,%eax
c0104b9e:	a2 2e 2a 13 c0       	mov    %al,0xc0132a2e
c0104ba3:	0f b6 05 2e 2a 13 c0 	movzbl 0xc0132a2e,%eax
c0104baa:	83 e0 ef             	and    $0xffffffef,%eax
c0104bad:	a2 2e 2a 13 c0       	mov    %al,0xc0132a2e
c0104bb2:	0f b6 05 2e 2a 13 c0 	movzbl 0xc0132a2e,%eax
c0104bb9:	83 e0 df             	and    $0xffffffdf,%eax
c0104bbc:	a2 2e 2a 13 c0       	mov    %al,0xc0132a2e
c0104bc1:	0f b6 05 2e 2a 13 c0 	movzbl 0xc0132a2e,%eax
c0104bc8:	83 c8 40             	or     $0x40,%eax
c0104bcb:	a2 2e 2a 13 c0       	mov    %al,0xc0132a2e
c0104bd0:	0f b6 05 2e 2a 13 c0 	movzbl 0xc0132a2e,%eax
c0104bd7:	83 e0 7f             	and    $0x7f,%eax
c0104bda:	a2 2e 2a 13 c0       	mov    %al,0xc0132a2e
c0104bdf:	b8 a0 5f 1b c0       	mov    $0xc01b5fa0,%eax
c0104be4:	c1 e8 18             	shr    $0x18,%eax
c0104be7:	a2 2f 2a 13 c0       	mov    %al,0xc0132a2f

    // reload all segment registers
    lgdt(&gdt_pd);
c0104bec:	68 30 2a 13 c0       	push   $0xc0132a30
c0104bf1:	e8 d5 fe ff ff       	call   c0104acb <lgdt>
c0104bf6:	83 c4 04             	add    $0x4,%esp
c0104bf9:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c0104bff:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0104c03:	0f 00 d8             	ltr    %ax
}
c0104c06:	90                   	nop

    // load the TSS
    ltr(GD_TSS);
}
c0104c07:	90                   	nop
c0104c08:	c9                   	leave  
c0104c09:	c3                   	ret    

c0104c0a <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c0104c0a:	f3 0f 1e fb          	endbr32 
c0104c0e:	55                   	push   %ebp
c0104c0f:	89 e5                	mov    %esp,%ebp
c0104c11:	83 ec 08             	sub    $0x8,%esp
    pmm_manager = &default_pmm_manager;
c0104c14:	c7 05 58 80 1b c0 2c 	movl   $0xc010ee2c,0xc01b8058
c0104c1b:	ee 10 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c0104c1e:	a1 58 80 1b c0       	mov    0xc01b8058,%eax
c0104c23:	8b 00                	mov    (%eax),%eax
c0104c25:	83 ec 08             	sub    $0x8,%esp
c0104c28:	50                   	push   %eax
c0104c29:	68 10 d8 10 c0       	push   $0xc010d810
c0104c2e:	e8 7f b6 ff ff       	call   c01002b2 <cprintf>
c0104c33:	83 c4 10             	add    $0x10,%esp
    pmm_manager->init();
c0104c36:	a1 58 80 1b c0       	mov    0xc01b8058,%eax
c0104c3b:	8b 40 04             	mov    0x4(%eax),%eax
c0104c3e:	ff d0                	call   *%eax
}
c0104c40:	90                   	nop
c0104c41:	c9                   	leave  
c0104c42:	c3                   	ret    

c0104c43 <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c0104c43:	f3 0f 1e fb          	endbr32 
c0104c47:	55                   	push   %ebp
c0104c48:	89 e5                	mov    %esp,%ebp
c0104c4a:	83 ec 08             	sub    $0x8,%esp
    pmm_manager->init_memmap(base, n);
c0104c4d:	a1 58 80 1b c0       	mov    0xc01b8058,%eax
c0104c52:	8b 40 08             	mov    0x8(%eax),%eax
c0104c55:	83 ec 08             	sub    $0x8,%esp
c0104c58:	ff 75 0c             	pushl  0xc(%ebp)
c0104c5b:	ff 75 08             	pushl  0x8(%ebp)
c0104c5e:	ff d0                	call   *%eax
c0104c60:	83 c4 10             	add    $0x10,%esp
}
c0104c63:	90                   	nop
c0104c64:	c9                   	leave  
c0104c65:	c3                   	ret    

c0104c66 <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c0104c66:	f3 0f 1e fb          	endbr32 
c0104c6a:	55                   	push   %ebp
c0104c6b:	89 e5                	mov    %esp,%ebp
c0104c6d:	83 ec 18             	sub    $0x18,%esp
    struct Page *page=NULL;
c0104c70:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c0104c77:	e8 11 fe ff ff       	call   c0104a8d <__intr_save>
c0104c7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c0104c7f:	a1 58 80 1b c0       	mov    0xc01b8058,%eax
c0104c84:	8b 40 0c             	mov    0xc(%eax),%eax
c0104c87:	83 ec 0c             	sub    $0xc,%esp
c0104c8a:	ff 75 08             	pushl  0x8(%ebp)
c0104c8d:	ff d0                	call   *%eax
c0104c8f:	83 c4 10             	add    $0x10,%esp
c0104c92:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c0104c95:	83 ec 0c             	sub    $0xc,%esp
c0104c98:	ff 75 f0             	pushl  -0x10(%ebp)
c0104c9b:	e8 17 fe ff ff       	call   c0104ab7 <__intr_restore>
c0104ca0:	83 c4 10             	add    $0x10,%esp

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c0104ca3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104ca7:	75 28                	jne    c0104cd1 <alloc_pages+0x6b>
c0104ca9:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0104cad:	77 22                	ja     c0104cd1 <alloc_pages+0x6b>
c0104caf:	a1 10 60 1b c0       	mov    0xc01b6010,%eax
c0104cb4:	85 c0                	test   %eax,%eax
c0104cb6:	74 19                	je     c0104cd1 <alloc_pages+0x6b>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c0104cb8:	8b 55 08             	mov    0x8(%ebp),%edx
c0104cbb:	a1 64 80 1b c0       	mov    0xc01b8064,%eax
c0104cc0:	83 ec 04             	sub    $0x4,%esp
c0104cc3:	6a 00                	push   $0x0
c0104cc5:	52                   	push   %edx
c0104cc6:	50                   	push   %eax
c0104cc7:	e8 cd 2b 00 00       	call   c0107899 <swap_out>
c0104ccc:	83 c4 10             	add    $0x10,%esp
    {
c0104ccf:	eb a6                	jmp    c0104c77 <alloc_pages+0x11>
    }
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c0104cd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0104cd4:	c9                   	leave  
c0104cd5:	c3                   	ret    

c0104cd6 <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c0104cd6:	f3 0f 1e fb          	endbr32 
c0104cda:	55                   	push   %ebp
c0104cdb:	89 e5                	mov    %esp,%ebp
c0104cdd:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0104ce0:	e8 a8 fd ff ff       	call   c0104a8d <__intr_save>
c0104ce5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c0104ce8:	a1 58 80 1b c0       	mov    0xc01b8058,%eax
c0104ced:	8b 40 10             	mov    0x10(%eax),%eax
c0104cf0:	83 ec 08             	sub    $0x8,%esp
c0104cf3:	ff 75 0c             	pushl  0xc(%ebp)
c0104cf6:	ff 75 08             	pushl  0x8(%ebp)
c0104cf9:	ff d0                	call   *%eax
c0104cfb:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c0104cfe:	83 ec 0c             	sub    $0xc,%esp
c0104d01:	ff 75 f4             	pushl  -0xc(%ebp)
c0104d04:	e8 ae fd ff ff       	call   c0104ab7 <__intr_restore>
c0104d09:	83 c4 10             	add    $0x10,%esp
}
c0104d0c:	90                   	nop
c0104d0d:	c9                   	leave  
c0104d0e:	c3                   	ret    

c0104d0f <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c0104d0f:	f3 0f 1e fb          	endbr32 
c0104d13:	55                   	push   %ebp
c0104d14:	89 e5                	mov    %esp,%ebp
c0104d16:	83 ec 18             	sub    $0x18,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c0104d19:	e8 6f fd ff ff       	call   c0104a8d <__intr_save>
c0104d1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c0104d21:	a1 58 80 1b c0       	mov    0xc01b8058,%eax
c0104d26:	8b 40 14             	mov    0x14(%eax),%eax
c0104d29:	ff d0                	call   *%eax
c0104d2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c0104d2e:	83 ec 0c             	sub    $0xc,%esp
c0104d31:	ff 75 f4             	pushl  -0xc(%ebp)
c0104d34:	e8 7e fd ff ff       	call   c0104ab7 <__intr_restore>
c0104d39:	83 c4 10             	add    $0x10,%esp
    return ret;
c0104d3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0104d3f:	c9                   	leave  
c0104d40:	c3                   	ret    

c0104d41 <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c0104d41:	f3 0f 1e fb          	endbr32 
c0104d45:	55                   	push   %ebp
c0104d46:	89 e5                	mov    %esp,%ebp
c0104d48:	57                   	push   %edi
c0104d49:	56                   	push   %esi
c0104d4a:	53                   	push   %ebx
c0104d4b:	83 ec 7c             	sub    $0x7c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c0104d4e:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c0104d55:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0104d5c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c0104d63:	83 ec 0c             	sub    $0xc,%esp
c0104d66:	68 27 d8 10 c0       	push   $0xc010d827
c0104d6b:	e8 42 b5 ff ff       	call   c01002b2 <cprintf>
c0104d70:	83 c4 10             	add    $0x10,%esp
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0104d73:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0104d7a:	e9 f4 00 00 00       	jmp    c0104e73 <page_init+0x132>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0104d7f:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0104d82:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104d85:	89 d0                	mov    %edx,%eax
c0104d87:	c1 e0 02             	shl    $0x2,%eax
c0104d8a:	01 d0                	add    %edx,%eax
c0104d8c:	c1 e0 02             	shl    $0x2,%eax
c0104d8f:	01 c8                	add    %ecx,%eax
c0104d91:	8b 50 08             	mov    0x8(%eax),%edx
c0104d94:	8b 40 04             	mov    0x4(%eax),%eax
c0104d97:	89 45 a0             	mov    %eax,-0x60(%ebp)
c0104d9a:	89 55 a4             	mov    %edx,-0x5c(%ebp)
c0104d9d:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0104da0:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104da3:	89 d0                	mov    %edx,%eax
c0104da5:	c1 e0 02             	shl    $0x2,%eax
c0104da8:	01 d0                	add    %edx,%eax
c0104daa:	c1 e0 02             	shl    $0x2,%eax
c0104dad:	01 c8                	add    %ecx,%eax
c0104daf:	8b 48 0c             	mov    0xc(%eax),%ecx
c0104db2:	8b 58 10             	mov    0x10(%eax),%ebx
c0104db5:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0104db8:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c0104dbb:	01 c8                	add    %ecx,%eax
c0104dbd:	11 da                	adc    %ebx,%edx
c0104dbf:	89 45 98             	mov    %eax,-0x68(%ebp)
c0104dc2:	89 55 9c             	mov    %edx,-0x64(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c0104dc5:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0104dc8:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104dcb:	89 d0                	mov    %edx,%eax
c0104dcd:	c1 e0 02             	shl    $0x2,%eax
c0104dd0:	01 d0                	add    %edx,%eax
c0104dd2:	c1 e0 02             	shl    $0x2,%eax
c0104dd5:	01 c8                	add    %ecx,%eax
c0104dd7:	83 c0 14             	add    $0x14,%eax
c0104dda:	8b 00                	mov    (%eax),%eax
c0104ddc:	89 45 84             	mov    %eax,-0x7c(%ebp)
c0104ddf:	8b 45 98             	mov    -0x68(%ebp),%eax
c0104de2:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0104de5:	83 c0 ff             	add    $0xffffffff,%eax
c0104de8:	83 d2 ff             	adc    $0xffffffff,%edx
c0104deb:	89 c1                	mov    %eax,%ecx
c0104ded:	89 d3                	mov    %edx,%ebx
c0104def:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0104df2:	89 55 80             	mov    %edx,-0x80(%ebp)
c0104df5:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104df8:	89 d0                	mov    %edx,%eax
c0104dfa:	c1 e0 02             	shl    $0x2,%eax
c0104dfd:	01 d0                	add    %edx,%eax
c0104dff:	c1 e0 02             	shl    $0x2,%eax
c0104e02:	03 45 80             	add    -0x80(%ebp),%eax
c0104e05:	8b 50 10             	mov    0x10(%eax),%edx
c0104e08:	8b 40 0c             	mov    0xc(%eax),%eax
c0104e0b:	ff 75 84             	pushl  -0x7c(%ebp)
c0104e0e:	53                   	push   %ebx
c0104e0f:	51                   	push   %ecx
c0104e10:	ff 75 a4             	pushl  -0x5c(%ebp)
c0104e13:	ff 75 a0             	pushl  -0x60(%ebp)
c0104e16:	52                   	push   %edx
c0104e17:	50                   	push   %eax
c0104e18:	68 34 d8 10 c0       	push   $0xc010d834
c0104e1d:	e8 90 b4 ff ff       	call   c01002b2 <cprintf>
c0104e22:	83 c4 20             	add    $0x20,%esp
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c0104e25:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0104e28:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104e2b:	89 d0                	mov    %edx,%eax
c0104e2d:	c1 e0 02             	shl    $0x2,%eax
c0104e30:	01 d0                	add    %edx,%eax
c0104e32:	c1 e0 02             	shl    $0x2,%eax
c0104e35:	01 c8                	add    %ecx,%eax
c0104e37:	83 c0 14             	add    $0x14,%eax
c0104e3a:	8b 00                	mov    (%eax),%eax
c0104e3c:	83 f8 01             	cmp    $0x1,%eax
c0104e3f:	75 2e                	jne    c0104e6f <page_init+0x12e>
            if (maxpa < end && begin < KMEMSIZE) {
c0104e41:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104e44:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0104e47:	3b 45 98             	cmp    -0x68(%ebp),%eax
c0104e4a:	89 d0                	mov    %edx,%eax
c0104e4c:	1b 45 9c             	sbb    -0x64(%ebp),%eax
c0104e4f:	73 1e                	jae    c0104e6f <page_init+0x12e>
c0104e51:	ba ff ff ff 37       	mov    $0x37ffffff,%edx
c0104e56:	b8 00 00 00 00       	mov    $0x0,%eax
c0104e5b:	3b 55 a0             	cmp    -0x60(%ebp),%edx
c0104e5e:	1b 45 a4             	sbb    -0x5c(%ebp),%eax
c0104e61:	72 0c                	jb     c0104e6f <page_init+0x12e>
                maxpa = end;
c0104e63:	8b 45 98             	mov    -0x68(%ebp),%eax
c0104e66:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0104e69:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0104e6c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    for (i = 0; i < memmap->nr_map; i ++) {
c0104e6f:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0104e73:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0104e76:	8b 00                	mov    (%eax),%eax
c0104e78:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0104e7b:	0f 8c fe fe ff ff    	jl     c0104d7f <page_init+0x3e>
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c0104e81:	ba 00 00 00 38       	mov    $0x38000000,%edx
c0104e86:	b8 00 00 00 00       	mov    $0x0,%eax
c0104e8b:	3b 55 e0             	cmp    -0x20(%ebp),%edx
c0104e8e:	1b 45 e4             	sbb    -0x1c(%ebp),%eax
c0104e91:	73 0e                	jae    c0104ea1 <page_init+0x160>
        maxpa = KMEMSIZE;
c0104e93:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c0104e9a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c0104ea1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104ea4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0104ea7:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0104eab:	c1 ea 0c             	shr    $0xc,%edx
c0104eae:	a3 80 5f 1b c0       	mov    %eax,0xc01b5f80
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c0104eb3:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
c0104eba:	b8 60 81 1b c0       	mov    $0xc01b8160,%eax
c0104ebf:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104ec2:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0104ec5:	01 d0                	add    %edx,%eax
c0104ec7:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0104eca:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0104ecd:	ba 00 00 00 00       	mov    $0x0,%edx
c0104ed2:	f7 75 c0             	divl   -0x40(%ebp)
c0104ed5:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0104ed8:	29 d0                	sub    %edx,%eax
c0104eda:	a3 60 80 1b c0       	mov    %eax,0xc01b8060

    for (i = 0; i < npage; i ++) {
c0104edf:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0104ee6:	eb 30                	jmp    c0104f18 <page_init+0x1d7>
        SetPageReserved(pages + i);
c0104ee8:	8b 0d 60 80 1b c0    	mov    0xc01b8060,%ecx
c0104eee:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104ef1:	89 d0                	mov    %edx,%eax
c0104ef3:	c1 e0 03             	shl    $0x3,%eax
c0104ef6:	01 d0                	add    %edx,%eax
c0104ef8:	c1 e0 02             	shl    $0x2,%eax
c0104efb:	01 c8                	add    %ecx,%eax
c0104efd:	83 c0 04             	add    $0x4,%eax
c0104f00:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
c0104f07:	89 45 90             	mov    %eax,-0x70(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0104f0a:	8b 45 90             	mov    -0x70(%ebp),%eax
c0104f0d:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0104f10:	0f ab 10             	bts    %edx,(%eax)
}
c0104f13:	90                   	nop
    for (i = 0; i < npage; i ++) {
c0104f14:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0104f18:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104f1b:	a1 80 5f 1b c0       	mov    0xc01b5f80,%eax
c0104f20:	39 c2                	cmp    %eax,%edx
c0104f22:	72 c4                	jb     c0104ee8 <page_init+0x1a7>
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c0104f24:	8b 15 80 5f 1b c0    	mov    0xc01b5f80,%edx
c0104f2a:	89 d0                	mov    %edx,%eax
c0104f2c:	c1 e0 03             	shl    $0x3,%eax
c0104f2f:	01 d0                	add    %edx,%eax
c0104f31:	c1 e0 02             	shl    $0x2,%eax
c0104f34:	89 c2                	mov    %eax,%edx
c0104f36:	a1 60 80 1b c0       	mov    0xc01b8060,%eax
c0104f3b:	01 d0                	add    %edx,%eax
c0104f3d:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0104f40:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
c0104f47:	77 17                	ja     c0104f60 <page_init+0x21f>
c0104f49:	ff 75 b8             	pushl  -0x48(%ebp)
c0104f4c:	68 64 d8 10 c0       	push   $0xc010d864
c0104f51:	68 ea 00 00 00       	push   $0xea
c0104f56:	68 88 d8 10 c0       	push   $0xc010d888
c0104f5b:	e8 8e c8 ff ff       	call   c01017ee <__panic>
c0104f60:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0104f63:	05 00 00 00 40       	add    $0x40000000,%eax
c0104f68:	89 45 b4             	mov    %eax,-0x4c(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c0104f6b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0104f72:	e9 53 01 00 00       	jmp    c01050ca <page_init+0x389>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0104f77:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0104f7a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104f7d:	89 d0                	mov    %edx,%eax
c0104f7f:	c1 e0 02             	shl    $0x2,%eax
c0104f82:	01 d0                	add    %edx,%eax
c0104f84:	c1 e0 02             	shl    $0x2,%eax
c0104f87:	01 c8                	add    %ecx,%eax
c0104f89:	8b 50 08             	mov    0x8(%eax),%edx
c0104f8c:	8b 40 04             	mov    0x4(%eax),%eax
c0104f8f:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0104f92:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0104f95:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0104f98:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104f9b:	89 d0                	mov    %edx,%eax
c0104f9d:	c1 e0 02             	shl    $0x2,%eax
c0104fa0:	01 d0                	add    %edx,%eax
c0104fa2:	c1 e0 02             	shl    $0x2,%eax
c0104fa5:	01 c8                	add    %ecx,%eax
c0104fa7:	8b 48 0c             	mov    0xc(%eax),%ecx
c0104faa:	8b 58 10             	mov    0x10(%eax),%ebx
c0104fad:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0104fb0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0104fb3:	01 c8                	add    %ecx,%eax
c0104fb5:	11 da                	adc    %ebx,%edx
c0104fb7:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0104fba:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c0104fbd:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0104fc0:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104fc3:	89 d0                	mov    %edx,%eax
c0104fc5:	c1 e0 02             	shl    $0x2,%eax
c0104fc8:	01 d0                	add    %edx,%eax
c0104fca:	c1 e0 02             	shl    $0x2,%eax
c0104fcd:	01 c8                	add    %ecx,%eax
c0104fcf:	83 c0 14             	add    $0x14,%eax
c0104fd2:	8b 00                	mov    (%eax),%eax
c0104fd4:	83 f8 01             	cmp    $0x1,%eax
c0104fd7:	0f 85 e9 00 00 00    	jne    c01050c6 <page_init+0x385>
            if (begin < freemem) {
c0104fdd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0104fe0:	ba 00 00 00 00       	mov    $0x0,%edx
c0104fe5:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0104fe8:	39 45 d0             	cmp    %eax,-0x30(%ebp)
c0104feb:	19 d1                	sbb    %edx,%ecx
c0104fed:	73 0d                	jae    c0104ffc <page_init+0x2bb>
                begin = freemem;
c0104fef:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0104ff2:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0104ff5:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c0104ffc:	ba 00 00 00 38       	mov    $0x38000000,%edx
c0105001:	b8 00 00 00 00       	mov    $0x0,%eax
c0105006:	3b 55 c8             	cmp    -0x38(%ebp),%edx
c0105009:	1b 45 cc             	sbb    -0x34(%ebp),%eax
c010500c:	73 0e                	jae    c010501c <page_init+0x2db>
                end = KMEMSIZE;
c010500e:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c0105015:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c010501c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010501f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105022:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0105025:	89 d0                	mov    %edx,%eax
c0105027:	1b 45 cc             	sbb    -0x34(%ebp),%eax
c010502a:	0f 83 96 00 00 00    	jae    c01050c6 <page_init+0x385>
                begin = ROUNDUP(begin, PGSIZE);
c0105030:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
c0105037:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010503a:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010503d:	01 d0                	add    %edx,%eax
c010503f:	83 e8 01             	sub    $0x1,%eax
c0105042:	89 45 ac             	mov    %eax,-0x54(%ebp)
c0105045:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0105048:	ba 00 00 00 00       	mov    $0x0,%edx
c010504d:	f7 75 b0             	divl   -0x50(%ebp)
c0105050:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0105053:	29 d0                	sub    %edx,%eax
c0105055:	ba 00 00 00 00       	mov    $0x0,%edx
c010505a:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010505d:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c0105060:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105063:	89 45 a8             	mov    %eax,-0x58(%ebp)
c0105066:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0105069:	ba 00 00 00 00       	mov    $0x0,%edx
c010506e:	89 c3                	mov    %eax,%ebx
c0105070:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
c0105076:	89 de                	mov    %ebx,%esi
c0105078:	89 d0                	mov    %edx,%eax
c010507a:	83 e0 00             	and    $0x0,%eax
c010507d:	89 c7                	mov    %eax,%edi
c010507f:	89 75 c8             	mov    %esi,-0x38(%ebp)
c0105082:	89 7d cc             	mov    %edi,-0x34(%ebp)
                if (begin < end) {
c0105085:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105088:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010508b:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010508e:	89 d0                	mov    %edx,%eax
c0105090:	1b 45 cc             	sbb    -0x34(%ebp),%eax
c0105093:	73 31                	jae    c01050c6 <page_init+0x385>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c0105095:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105098:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010509b:	2b 45 d0             	sub    -0x30(%ebp),%eax
c010509e:	1b 55 d4             	sbb    -0x2c(%ebp),%edx
c01050a1:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01050a5:	c1 ea 0c             	shr    $0xc,%edx
c01050a8:	89 c3                	mov    %eax,%ebx
c01050aa:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01050ad:	83 ec 0c             	sub    $0xc,%esp
c01050b0:	50                   	push   %eax
c01050b1:	e8 af f8 ff ff       	call   c0104965 <pa2page>
c01050b6:	83 c4 10             	add    $0x10,%esp
c01050b9:	83 ec 08             	sub    $0x8,%esp
c01050bc:	53                   	push   %ebx
c01050bd:	50                   	push   %eax
c01050be:	e8 80 fb ff ff       	call   c0104c43 <init_memmap>
c01050c3:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < memmap->nr_map; i ++) {
c01050c6:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01050ca:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01050cd:	8b 00                	mov    (%eax),%eax
c01050cf:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c01050d2:	0f 8c 9f fe ff ff    	jl     c0104f77 <page_init+0x236>
                }
            }
        }
    }
}
c01050d8:	90                   	nop
c01050d9:	90                   	nop
c01050da:	8d 65 f4             	lea    -0xc(%ebp),%esp
c01050dd:	5b                   	pop    %ebx
c01050de:	5e                   	pop    %esi
c01050df:	5f                   	pop    %edi
c01050e0:	5d                   	pop    %ebp
c01050e1:	c3                   	ret    

c01050e2 <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c01050e2:	f3 0f 1e fb          	endbr32 
c01050e6:	55                   	push   %ebp
c01050e7:	89 e5                	mov    %esp,%ebp
c01050e9:	83 ec 28             	sub    $0x28,%esp
    assert(PGOFF(la) == PGOFF(pa));
c01050ec:	8b 45 0c             	mov    0xc(%ebp),%eax
c01050ef:	33 45 14             	xor    0x14(%ebp),%eax
c01050f2:	25 ff 0f 00 00       	and    $0xfff,%eax
c01050f7:	85 c0                	test   %eax,%eax
c01050f9:	74 19                	je     c0105114 <boot_map_segment+0x32>
c01050fb:	68 96 d8 10 c0       	push   $0xc010d896
c0105100:	68 ad d8 10 c0       	push   $0xc010d8ad
c0105105:	68 08 01 00 00       	push   $0x108
c010510a:	68 88 d8 10 c0       	push   $0xc010d888
c010510f:	e8 da c6 ff ff       	call   c01017ee <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c0105114:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c010511b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010511e:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105123:	89 c2                	mov    %eax,%edx
c0105125:	8b 45 10             	mov    0x10(%ebp),%eax
c0105128:	01 c2                	add    %eax,%edx
c010512a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010512d:	01 d0                	add    %edx,%eax
c010512f:	83 e8 01             	sub    $0x1,%eax
c0105132:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105135:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105138:	ba 00 00 00 00       	mov    $0x0,%edx
c010513d:	f7 75 f0             	divl   -0x10(%ebp)
c0105140:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105143:	29 d0                	sub    %edx,%eax
c0105145:	c1 e8 0c             	shr    $0xc,%eax
c0105148:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c010514b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010514e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105151:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105154:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105159:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c010515c:	8b 45 14             	mov    0x14(%ebp),%eax
c010515f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105162:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105165:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010516a:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c010516d:	eb 57                	jmp    c01051c6 <boot_map_segment+0xe4>
        pte_t *ptep = get_pte(pgdir, la, 1);
c010516f:	83 ec 04             	sub    $0x4,%esp
c0105172:	6a 01                	push   $0x1
c0105174:	ff 75 0c             	pushl  0xc(%ebp)
c0105177:	ff 75 08             	pushl  0x8(%ebp)
c010517a:	e8 61 01 00 00       	call   c01052e0 <get_pte>
c010517f:	83 c4 10             	add    $0x10,%esp
c0105182:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c0105185:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105189:	75 19                	jne    c01051a4 <boot_map_segment+0xc2>
c010518b:	68 c2 d8 10 c0       	push   $0xc010d8c2
c0105190:	68 ad d8 10 c0       	push   $0xc010d8ad
c0105195:	68 0e 01 00 00       	push   $0x10e
c010519a:	68 88 d8 10 c0       	push   $0xc010d888
c010519f:	e8 4a c6 ff ff       	call   c01017ee <__panic>
        *ptep = pa | PTE_P | perm;
c01051a4:	8b 45 14             	mov    0x14(%ebp),%eax
c01051a7:	0b 45 18             	or     0x18(%ebp),%eax
c01051aa:	83 c8 01             	or     $0x1,%eax
c01051ad:	89 c2                	mov    %eax,%edx
c01051af:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01051b2:	89 10                	mov    %edx,(%eax)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01051b4:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01051b8:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c01051bf:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c01051c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01051ca:	75 a3                	jne    c010516f <boot_map_segment+0x8d>
    }
}
c01051cc:	90                   	nop
c01051cd:	90                   	nop
c01051ce:	c9                   	leave  
c01051cf:	c3                   	ret    

c01051d0 <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c01051d0:	f3 0f 1e fb          	endbr32 
c01051d4:	55                   	push   %ebp
c01051d5:	89 e5                	mov    %esp,%ebp
c01051d7:	83 ec 18             	sub    $0x18,%esp
    struct Page *p = alloc_page();
c01051da:	83 ec 0c             	sub    $0xc,%esp
c01051dd:	6a 01                	push   $0x1
c01051df:	e8 82 fa ff ff       	call   c0104c66 <alloc_pages>
c01051e4:	83 c4 10             	add    $0x10,%esp
c01051e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c01051ea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01051ee:	75 17                	jne    c0105207 <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c01051f0:	83 ec 04             	sub    $0x4,%esp
c01051f3:	68 cf d8 10 c0       	push   $0xc010d8cf
c01051f8:	68 1a 01 00 00       	push   $0x11a
c01051fd:	68 88 d8 10 c0       	push   $0xc010d888
c0105202:	e8 e7 c5 ff ff       	call   c01017ee <__panic>
    }
    return page2kva(p);
c0105207:	83 ec 0c             	sub    $0xc,%esp
c010520a:	ff 75 f4             	pushl  -0xc(%ebp)
c010520d:	e8 9a f7 ff ff       	call   c01049ac <page2kva>
c0105212:	83 c4 10             	add    $0x10,%esp
}
c0105215:	c9                   	leave  
c0105216:	c3                   	ret    

c0105217 <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c0105217:	f3 0f 1e fb          	endbr32 
c010521b:	55                   	push   %ebp
c010521c:	89 e5                	mov    %esp,%ebp
c010521e:	83 ec 18             	sub    $0x18,%esp
    // We've already enabled paging
    boot_cr3 = PADDR(boot_pgdir);
c0105221:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c0105226:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105229:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0105230:	77 17                	ja     c0105249 <pmm_init+0x32>
c0105232:	ff 75 f4             	pushl  -0xc(%ebp)
c0105235:	68 64 d8 10 c0       	push   $0xc010d864
c010523a:	68 24 01 00 00       	push   $0x124
c010523f:	68 88 d8 10 c0       	push   $0xc010d888
c0105244:	e8 a5 c5 ff ff       	call   c01017ee <__panic>
c0105249:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010524c:	05 00 00 00 40       	add    $0x40000000,%eax
c0105251:	a3 5c 80 1b c0       	mov    %eax,0xc01b805c
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c0105256:	e8 af f9 ff ff       	call   c0104c0a <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c010525b:	e8 e1 fa ff ff       	call   c0104d41 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c0105260:	e8 0b 08 00 00       	call   c0105a70 <check_alloc_page>

    check_pgdir();
c0105265:	e8 2d 08 00 00       	call   c0105a97 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c010526a:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c010526f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105272:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c0105279:	77 17                	ja     c0105292 <pmm_init+0x7b>
c010527b:	ff 75 f0             	pushl  -0x10(%ebp)
c010527e:	68 64 d8 10 c0       	push   $0xc010d864
c0105283:	68 3a 01 00 00       	push   $0x13a
c0105288:	68 88 d8 10 c0       	push   $0xc010d888
c010528d:	e8 5c c5 ff ff       	call   c01017ee <__panic>
c0105292:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105295:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010529b:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c01052a0:	05 ac 0f 00 00       	add    $0xfac,%eax
c01052a5:	83 ca 03             	or     $0x3,%edx
c01052a8:	89 10                	mov    %edx,(%eax)

    // map all physical memory to linear memory with base linear addr KERNBASE
    // linear_addr KERNBASE ~ KERNBASE + KMEMSIZE = phy_addr 0 ~ KMEMSIZE
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c01052aa:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c01052af:	83 ec 0c             	sub    $0xc,%esp
c01052b2:	6a 02                	push   $0x2
c01052b4:	6a 00                	push   $0x0
c01052b6:	68 00 00 00 38       	push   $0x38000000
c01052bb:	68 00 00 00 c0       	push   $0xc0000000
c01052c0:	50                   	push   %eax
c01052c1:	e8 1c fe ff ff       	call   c01050e2 <boot_map_segment>
c01052c6:	83 c4 20             	add    $0x20,%esp

    // Since we are using bootloader's GDT,
    // we should reload gdt (second time, the last time) to get user segments and the TSS
    // map virtual_addr 0 ~ 4G = linear_addr 0 ~ 4G
    // then set kernel stack (ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c01052c9:	e8 45 f8 ff ff       	call   c0104b13 <gdt_init>

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c01052ce:	e8 2e 0d 00 00       	call   c0106001 <check_boot_pgdir>

    print_pgdir();
c01052d3:	e8 5c 11 00 00       	call   c0106434 <print_pgdir>
    
    kmalloc_init();
c01052d8:	e8 10 34 00 00       	call   c01086ed <kmalloc_init>

}
c01052dd:	90                   	nop
c01052de:	c9                   	leave  
c01052df:	c3                   	ret    

c01052e0 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c01052e0:	f3 0f 1e fb          	endbr32 
c01052e4:	55                   	push   %ebp
c01052e5:	89 e5                	mov    %esp,%ebp
c01052e7:	83 ec 28             	sub    $0x28,%esp
                          // (6) clear page content using memset
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    pde_t *pdep = &pgdir[PDX(la)];
c01052ea:	8b 45 0c             	mov    0xc(%ebp),%eax
c01052ed:	c1 e8 16             	shr    $0x16,%eax
c01052f0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01052f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01052fa:	01 d0                	add    %edx,%eax
c01052fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(*pdep & PTE_P)) {
c01052ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105302:	8b 00                	mov    (%eax),%eax
c0105304:	83 e0 01             	and    $0x1,%eax
c0105307:	85 c0                	test   %eax,%eax
c0105309:	0f 85 9f 00 00 00    	jne    c01053ae <get_pte+0xce>
        struct Page *page;
        if (!create || (page = alloc_page()) == NULL) {
c010530f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105313:	74 16                	je     c010532b <get_pte+0x4b>
c0105315:	83 ec 0c             	sub    $0xc,%esp
c0105318:	6a 01                	push   $0x1
c010531a:	e8 47 f9 ff ff       	call   c0104c66 <alloc_pages>
c010531f:	83 c4 10             	add    $0x10,%esp
c0105322:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105325:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105329:	75 0a                	jne    c0105335 <get_pte+0x55>
            return NULL;
c010532b:	b8 00 00 00 00       	mov    $0x0,%eax
c0105330:	e9 ca 00 00 00       	jmp    c01053ff <get_pte+0x11f>
        }
        set_page_ref(page, 1);
c0105335:	83 ec 08             	sub    $0x8,%esp
c0105338:	6a 01                	push   $0x1
c010533a:	ff 75 f0             	pushl  -0x10(%ebp)
c010533d:	e8 0f f7 ff ff       	call   c0104a51 <set_page_ref>
c0105342:	83 c4 10             	add    $0x10,%esp
        uintptr_t pa = page2pa(page);
c0105345:	83 ec 0c             	sub    $0xc,%esp
c0105348:	ff 75 f0             	pushl  -0x10(%ebp)
c010534b:	e8 02 f6 ff ff       	call   c0104952 <page2pa>
c0105350:	83 c4 10             	add    $0x10,%esp
c0105353:	89 45 ec             	mov    %eax,-0x14(%ebp)
        memset(KADDR(pa), 0, PGSIZE);
c0105356:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105359:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010535c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010535f:	c1 e8 0c             	shr    $0xc,%eax
c0105362:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105365:	a1 80 5f 1b c0       	mov    0xc01b5f80,%eax
c010536a:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c010536d:	72 17                	jb     c0105386 <get_pte+0xa6>
c010536f:	ff 75 e8             	pushl  -0x18(%ebp)
c0105372:	68 c0 d7 10 c0       	push   $0xc010d7c0
c0105377:	68 82 01 00 00       	push   $0x182
c010537c:	68 88 d8 10 c0       	push   $0xc010d888
c0105381:	e8 68 c4 ff ff       	call   c01017ee <__panic>
c0105386:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105389:	2d 00 00 00 40       	sub    $0x40000000,%eax
c010538e:	83 ec 04             	sub    $0x4,%esp
c0105391:	68 00 10 00 00       	push   $0x1000
c0105396:	6a 00                	push   $0x0
c0105398:	50                   	push   %eax
c0105399:	e8 c4 6e 00 00       	call   c010c262 <memset>
c010539e:	83 c4 10             	add    $0x10,%esp
        *pdep = pa | PTE_U | PTE_W | PTE_P;
c01053a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01053a4:	83 c8 07             	or     $0x7,%eax
c01053a7:	89 c2                	mov    %eax,%edx
c01053a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01053ac:	89 10                	mov    %edx,(%eax)
    }
    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
c01053ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01053b1:	8b 00                	mov    (%eax),%eax
c01053b3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01053b8:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01053bb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01053be:	c1 e8 0c             	shr    $0xc,%eax
c01053c1:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01053c4:	a1 80 5f 1b c0       	mov    0xc01b5f80,%eax
c01053c9:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c01053cc:	72 17                	jb     c01053e5 <get_pte+0x105>
c01053ce:	ff 75 e0             	pushl  -0x20(%ebp)
c01053d1:	68 c0 d7 10 c0       	push   $0xc010d7c0
c01053d6:	68 85 01 00 00       	push   $0x185
c01053db:	68 88 d8 10 c0       	push   $0xc010d888
c01053e0:	e8 09 c4 ff ff       	call   c01017ee <__panic>
c01053e5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01053e8:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01053ed:	89 c2                	mov    %eax,%edx
c01053ef:	8b 45 0c             	mov    0xc(%ebp),%eax
c01053f2:	c1 e8 0c             	shr    $0xc,%eax
c01053f5:	25 ff 03 00 00       	and    $0x3ff,%eax
c01053fa:	c1 e0 02             	shl    $0x2,%eax
c01053fd:	01 d0                	add    %edx,%eax
}
c01053ff:	c9                   	leave  
c0105400:	c3                   	ret    

c0105401 <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c0105401:	f3 0f 1e fb          	endbr32 
c0105405:	55                   	push   %ebp
c0105406:	89 e5                	mov    %esp,%ebp
c0105408:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c010540b:	83 ec 04             	sub    $0x4,%esp
c010540e:	6a 00                	push   $0x0
c0105410:	ff 75 0c             	pushl  0xc(%ebp)
c0105413:	ff 75 08             	pushl  0x8(%ebp)
c0105416:	e8 c5 fe ff ff       	call   c01052e0 <get_pte>
c010541b:	83 c4 10             	add    $0x10,%esp
c010541e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c0105421:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105425:	74 08                	je     c010542f <get_page+0x2e>
        *ptep_store = ptep;
c0105427:	8b 45 10             	mov    0x10(%ebp),%eax
c010542a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010542d:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c010542f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105433:	74 1f                	je     c0105454 <get_page+0x53>
c0105435:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105438:	8b 00                	mov    (%eax),%eax
c010543a:	83 e0 01             	and    $0x1,%eax
c010543d:	85 c0                	test   %eax,%eax
c010543f:	74 13                	je     c0105454 <get_page+0x53>
        return pte2page(*ptep);
c0105441:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105444:	8b 00                	mov    (%eax),%eax
c0105446:	83 ec 0c             	sub    $0xc,%esp
c0105449:	50                   	push   %eax
c010544a:	e8 a2 f5 ff ff       	call   c01049f1 <pte2page>
c010544f:	83 c4 10             	add    $0x10,%esp
c0105452:	eb 05                	jmp    c0105459 <get_page+0x58>
    }
    return NULL;
c0105454:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105459:	c9                   	leave  
c010545a:	c3                   	ret    

c010545b <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c010545b:	55                   	push   %ebp
c010545c:	89 e5                	mov    %esp,%ebp
c010545e:	83 ec 18             	sub    $0x18,%esp
                                  //(4) and free this page when page reference reachs 0
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    if (*ptep & PTE_P) {
c0105461:	8b 45 10             	mov    0x10(%ebp),%eax
c0105464:	8b 00                	mov    (%eax),%eax
c0105466:	83 e0 01             	and    $0x1,%eax
c0105469:	85 c0                	test   %eax,%eax
c010546b:	74 50                	je     c01054bd <page_remove_pte+0x62>
        struct Page *page = pte2page(*ptep);
c010546d:	8b 45 10             	mov    0x10(%ebp),%eax
c0105470:	8b 00                	mov    (%eax),%eax
c0105472:	83 ec 0c             	sub    $0xc,%esp
c0105475:	50                   	push   %eax
c0105476:	e8 76 f5 ff ff       	call   c01049f1 <pte2page>
c010547b:	83 c4 10             	add    $0x10,%esp
c010547e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (page_ref_dec(page) == 0) {
c0105481:	83 ec 0c             	sub    $0xc,%esp
c0105484:	ff 75 f4             	pushl  -0xc(%ebp)
c0105487:	e8 ea f5 ff ff       	call   c0104a76 <page_ref_dec>
c010548c:	83 c4 10             	add    $0x10,%esp
c010548f:	85 c0                	test   %eax,%eax
c0105491:	75 10                	jne    c01054a3 <page_remove_pte+0x48>
            free_page(page);
c0105493:	83 ec 08             	sub    $0x8,%esp
c0105496:	6a 01                	push   $0x1
c0105498:	ff 75 f4             	pushl  -0xc(%ebp)
c010549b:	e8 36 f8 ff ff       	call   c0104cd6 <free_pages>
c01054a0:	83 c4 10             	add    $0x10,%esp
        }
        *ptep = 0;
c01054a3:	8b 45 10             	mov    0x10(%ebp),%eax
c01054a6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        tlb_invalidate(pgdir, la);
c01054ac:	83 ec 08             	sub    $0x8,%esp
c01054af:	ff 75 0c             	pushl  0xc(%ebp)
c01054b2:	ff 75 08             	pushl  0x8(%ebp)
c01054b5:	e8 ac 04 00 00       	call   c0105966 <tlb_invalidate>
c01054ba:	83 c4 10             	add    $0x10,%esp
    }
}
c01054bd:	90                   	nop
c01054be:	c9                   	leave  
c01054bf:	c3                   	ret    

c01054c0 <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c01054c0:	f3 0f 1e fb          	endbr32 
c01054c4:	55                   	push   %ebp
c01054c5:	89 e5                	mov    %esp,%ebp
c01054c7:	83 ec 18             	sub    $0x18,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c01054ca:	8b 45 0c             	mov    0xc(%ebp),%eax
c01054cd:	25 ff 0f 00 00       	and    $0xfff,%eax
c01054d2:	85 c0                	test   %eax,%eax
c01054d4:	75 0c                	jne    c01054e2 <unmap_range+0x22>
c01054d6:	8b 45 10             	mov    0x10(%ebp),%eax
c01054d9:	25 ff 0f 00 00       	and    $0xfff,%eax
c01054de:	85 c0                	test   %eax,%eax
c01054e0:	74 19                	je     c01054fb <unmap_range+0x3b>
c01054e2:	68 e8 d8 10 c0       	push   $0xc010d8e8
c01054e7:	68 ad d8 10 c0       	push   $0xc010d8ad
c01054ec:	68 bf 01 00 00       	push   $0x1bf
c01054f1:	68 88 d8 10 c0       	push   $0xc010d888
c01054f6:	e8 f3 c2 ff ff       	call   c01017ee <__panic>
    assert(USER_ACCESS(start, end));
c01054fb:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105502:	76 11                	jbe    c0105515 <unmap_range+0x55>
c0105504:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105507:	3b 45 10             	cmp    0x10(%ebp),%eax
c010550a:	73 09                	jae    c0105515 <unmap_range+0x55>
c010550c:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105513:	76 19                	jbe    c010552e <unmap_range+0x6e>
c0105515:	68 11 d9 10 c0       	push   $0xc010d911
c010551a:	68 ad d8 10 c0       	push   $0xc010d8ad
c010551f:	68 c0 01 00 00       	push   $0x1c0
c0105524:	68 88 d8 10 c0       	push   $0xc010d888
c0105529:	e8 c0 c2 ff ff       	call   c01017ee <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c010552e:	83 ec 04             	sub    $0x4,%esp
c0105531:	6a 00                	push   $0x0
c0105533:	ff 75 0c             	pushl  0xc(%ebp)
c0105536:	ff 75 08             	pushl  0x8(%ebp)
c0105539:	e8 a2 fd ff ff       	call   c01052e0 <get_pte>
c010553e:	83 c4 10             	add    $0x10,%esp
c0105541:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105544:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105548:	75 18                	jne    c0105562 <unmap_range+0xa2>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c010554a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010554d:	05 00 00 40 00       	add    $0x400000,%eax
c0105552:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105555:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105558:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c010555d:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0105560:	eb 24                	jmp    c0105586 <unmap_range+0xc6>
        }
        if (*ptep != 0) {
c0105562:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105565:	8b 00                	mov    (%eax),%eax
c0105567:	85 c0                	test   %eax,%eax
c0105569:	74 14                	je     c010557f <unmap_range+0xbf>
            page_remove_pte(pgdir, start, ptep);
c010556b:	83 ec 04             	sub    $0x4,%esp
c010556e:	ff 75 f4             	pushl  -0xc(%ebp)
c0105571:	ff 75 0c             	pushl  0xc(%ebp)
c0105574:	ff 75 08             	pushl  0x8(%ebp)
c0105577:	e8 df fe ff ff       	call   c010545b <page_remove_pte>
c010557c:	83 c4 10             	add    $0x10,%esp
        }
        start += PGSIZE;
c010557f:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105586:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010558a:	74 08                	je     c0105594 <unmap_range+0xd4>
c010558c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010558f:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105592:	72 9a                	jb     c010552e <unmap_range+0x6e>
}
c0105594:	90                   	nop
c0105595:	c9                   	leave  
c0105596:	c3                   	ret    

c0105597 <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105597:	f3 0f 1e fb          	endbr32 
c010559b:	55                   	push   %ebp
c010559c:	89 e5                	mov    %esp,%ebp
c010559e:	83 ec 18             	sub    $0x18,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c01055a1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01055a4:	25 ff 0f 00 00       	and    $0xfff,%eax
c01055a9:	85 c0                	test   %eax,%eax
c01055ab:	75 0c                	jne    c01055b9 <exit_range+0x22>
c01055ad:	8b 45 10             	mov    0x10(%ebp),%eax
c01055b0:	25 ff 0f 00 00       	and    $0xfff,%eax
c01055b5:	85 c0                	test   %eax,%eax
c01055b7:	74 19                	je     c01055d2 <exit_range+0x3b>
c01055b9:	68 e8 d8 10 c0       	push   $0xc010d8e8
c01055be:	68 ad d8 10 c0       	push   $0xc010d8ad
c01055c3:	68 d1 01 00 00       	push   $0x1d1
c01055c8:	68 88 d8 10 c0       	push   $0xc010d888
c01055cd:	e8 1c c2 ff ff       	call   c01017ee <__panic>
    assert(USER_ACCESS(start, end));
c01055d2:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c01055d9:	76 11                	jbe    c01055ec <exit_range+0x55>
c01055db:	8b 45 0c             	mov    0xc(%ebp),%eax
c01055de:	3b 45 10             	cmp    0x10(%ebp),%eax
c01055e1:	73 09                	jae    c01055ec <exit_range+0x55>
c01055e3:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c01055ea:	76 19                	jbe    c0105605 <exit_range+0x6e>
c01055ec:	68 11 d9 10 c0       	push   $0xc010d911
c01055f1:	68 ad d8 10 c0       	push   $0xc010d8ad
c01055f6:	68 d2 01 00 00       	push   $0x1d2
c01055fb:	68 88 d8 10 c0       	push   $0xc010d888
c0105600:	e8 e9 c1 ff ff       	call   c01017ee <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0105605:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105608:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010560b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010560e:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105613:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0105616:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105619:	c1 e8 16             	shr    $0x16,%eax
c010561c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c010561f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105622:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105629:	8b 45 08             	mov    0x8(%ebp),%eax
c010562c:	01 d0                	add    %edx,%eax
c010562e:	8b 00                	mov    (%eax),%eax
c0105630:	83 e0 01             	and    $0x1,%eax
c0105633:	85 c0                	test   %eax,%eax
c0105635:	74 40                	je     c0105677 <exit_range+0xe0>
            free_page(pde2page(pgdir[pde_idx]));
c0105637:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010563a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105641:	8b 45 08             	mov    0x8(%ebp),%eax
c0105644:	01 d0                	add    %edx,%eax
c0105646:	8b 00                	mov    (%eax),%eax
c0105648:	83 ec 0c             	sub    $0xc,%esp
c010564b:	50                   	push   %eax
c010564c:	e8 da f3 ff ff       	call   c0104a2b <pde2page>
c0105651:	83 c4 10             	add    $0x10,%esp
c0105654:	83 ec 08             	sub    $0x8,%esp
c0105657:	6a 01                	push   $0x1
c0105659:	50                   	push   %eax
c010565a:	e8 77 f6 ff ff       	call   c0104cd6 <free_pages>
c010565f:	83 c4 10             	add    $0x10,%esp
            pgdir[pde_idx] = 0;
c0105662:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105665:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010566c:	8b 45 08             	mov    0x8(%ebp),%eax
c010566f:	01 d0                	add    %edx,%eax
c0105671:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0105677:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c010567e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105682:	74 08                	je     c010568c <exit_range+0xf5>
c0105684:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105687:	3b 45 10             	cmp    0x10(%ebp),%eax
c010568a:	72 8a                	jb     c0105616 <exit_range+0x7f>
}
c010568c:	90                   	nop
c010568d:	c9                   	leave  
c010568e:	c3                   	ret    

c010568f <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c010568f:	f3 0f 1e fb          	endbr32 
c0105693:	55                   	push   %ebp
c0105694:	89 e5                	mov    %esp,%ebp
c0105696:	83 ec 38             	sub    $0x38,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105699:	8b 45 10             	mov    0x10(%ebp),%eax
c010569c:	25 ff 0f 00 00       	and    $0xfff,%eax
c01056a1:	85 c0                	test   %eax,%eax
c01056a3:	75 0c                	jne    c01056b1 <copy_range+0x22>
c01056a5:	8b 45 14             	mov    0x14(%ebp),%eax
c01056a8:	25 ff 0f 00 00       	and    $0xfff,%eax
c01056ad:	85 c0                	test   %eax,%eax
c01056af:	74 19                	je     c01056ca <copy_range+0x3b>
c01056b1:	68 e8 d8 10 c0       	push   $0xc010d8e8
c01056b6:	68 ad d8 10 c0       	push   $0xc010d8ad
c01056bb:	68 e7 01 00 00       	push   $0x1e7
c01056c0:	68 88 d8 10 c0       	push   $0xc010d888
c01056c5:	e8 24 c1 ff ff       	call   c01017ee <__panic>
    assert(USER_ACCESS(start, end));
c01056ca:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c01056d1:	76 11                	jbe    c01056e4 <copy_range+0x55>
c01056d3:	8b 45 10             	mov    0x10(%ebp),%eax
c01056d6:	3b 45 14             	cmp    0x14(%ebp),%eax
c01056d9:	73 09                	jae    c01056e4 <copy_range+0x55>
c01056db:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c01056e2:	76 19                	jbe    c01056fd <copy_range+0x6e>
c01056e4:	68 11 d9 10 c0       	push   $0xc010d911
c01056e9:	68 ad d8 10 c0       	push   $0xc010d8ad
c01056ee:	68 e8 01 00 00       	push   $0x1e8
c01056f3:	68 88 d8 10 c0       	push   $0xc010d888
c01056f8:	e8 f1 c0 ff ff       	call   c01017ee <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c01056fd:	83 ec 04             	sub    $0x4,%esp
c0105700:	6a 00                	push   $0x0
c0105702:	ff 75 10             	pushl  0x10(%ebp)
c0105705:	ff 75 0c             	pushl  0xc(%ebp)
c0105708:	e8 d3 fb ff ff       	call   c01052e0 <get_pte>
c010570d:	83 c4 10             	add    $0x10,%esp
c0105710:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105713:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105717:	75 1b                	jne    c0105734 <copy_range+0xa5>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105719:	8b 45 10             	mov    0x10(%ebp),%eax
c010571c:	05 00 00 40 00       	add    $0x400000,%eax
c0105721:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0105724:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105727:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c010572c:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c010572f:	e9 1f 01 00 00       	jmp    c0105853 <copy_range+0x1c4>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0105734:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105737:	8b 00                	mov    (%eax),%eax
c0105739:	83 e0 01             	and    $0x1,%eax
c010573c:	85 c0                	test   %eax,%eax
c010573e:	0f 84 08 01 00 00    	je     c010584c <copy_range+0x1bd>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0105744:	83 ec 04             	sub    $0x4,%esp
c0105747:	6a 01                	push   $0x1
c0105749:	ff 75 10             	pushl  0x10(%ebp)
c010574c:	ff 75 08             	pushl  0x8(%ebp)
c010574f:	e8 8c fb ff ff       	call   c01052e0 <get_pte>
c0105754:	83 c4 10             	add    $0x10,%esp
c0105757:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010575a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010575e:	75 0a                	jne    c010576a <copy_range+0xdb>
                return -E_NO_MEM;
c0105760:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105765:	e9 00 01 00 00       	jmp    c010586a <copy_range+0x1db>
            }
        uint32_t perm = (*ptep & PTE_USER);
c010576a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010576d:	8b 00                	mov    (%eax),%eax
c010576f:	83 e0 07             	and    $0x7,%eax
c0105772:	89 45 ec             	mov    %eax,-0x14(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c0105775:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105778:	8b 00                	mov    (%eax),%eax
c010577a:	83 ec 0c             	sub    $0xc,%esp
c010577d:	50                   	push   %eax
c010577e:	e8 6e f2 ff ff       	call   c01049f1 <pte2page>
c0105783:	83 c4 10             	add    $0x10,%esp
c0105786:	89 45 e8             	mov    %eax,-0x18(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c0105789:	83 ec 0c             	sub    $0xc,%esp
c010578c:	6a 01                	push   $0x1
c010578e:	e8 d3 f4 ff ff       	call   c0104c66 <alloc_pages>
c0105793:	83 c4 10             	add    $0x10,%esp
c0105796:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(page!=NULL);
c0105799:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010579d:	75 19                	jne    c01057b8 <copy_range+0x129>
c010579f:	68 29 d9 10 c0       	push   $0xc010d929
c01057a4:	68 ad d8 10 c0       	push   $0xc010d8ad
c01057a9:	68 fb 01 00 00       	push   $0x1fb
c01057ae:	68 88 d8 10 c0       	push   $0xc010d888
c01057b3:	e8 36 c0 ff ff       	call   c01017ee <__panic>
        assert(npage!=NULL);
c01057b8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01057bc:	75 19                	jne    c01057d7 <copy_range+0x148>
c01057be:	68 34 d9 10 c0       	push   $0xc010d934
c01057c3:	68 ad d8 10 c0       	push   $0xc010d8ad
c01057c8:	68 fc 01 00 00       	push   $0x1fc
c01057cd:	68 88 d8 10 c0       	push   $0xc010d888
c01057d2:	e8 17 c0 ff ff       	call   c01017ee <__panic>
        int ret=0;
c01057d7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
         * (1) find src_kvaddr: the kernel virtual address of page
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
        void * kva_src = page2kva(page);
c01057de:	83 ec 0c             	sub    $0xc,%esp
c01057e1:	ff 75 e8             	pushl  -0x18(%ebp)
c01057e4:	e8 c3 f1 ff ff       	call   c01049ac <page2kva>
c01057e9:	83 c4 10             	add    $0x10,%esp
c01057ec:	89 45 dc             	mov    %eax,-0x24(%ebp)
        void * kva_dst = page2kva(npage);
c01057ef:	83 ec 0c             	sub    $0xc,%esp
c01057f2:	ff 75 e4             	pushl  -0x1c(%ebp)
c01057f5:	e8 b2 f1 ff ff       	call   c01049ac <page2kva>
c01057fa:	83 c4 10             	add    $0x10,%esp
c01057fd:	89 45 d8             	mov    %eax,-0x28(%ebp)
    
        memcpy(kva_dst, kva_src, PGSIZE);
c0105800:	83 ec 04             	sub    $0x4,%esp
c0105803:	68 00 10 00 00       	push   $0x1000
c0105808:	ff 75 dc             	pushl  -0x24(%ebp)
c010580b:	ff 75 d8             	pushl  -0x28(%ebp)
c010580e:	e8 39 6b 00 00       	call   c010c34c <memcpy>
c0105813:	83 c4 10             	add    $0x10,%esp

        ret = page_insert(to, npage, start, perm);
c0105816:	ff 75 ec             	pushl  -0x14(%ebp)
c0105819:	ff 75 10             	pushl  0x10(%ebp)
c010581c:	ff 75 e4             	pushl  -0x1c(%ebp)
c010581f:	ff 75 08             	pushl  0x8(%ebp)
c0105822:	e8 82 00 00 00       	call   c01058a9 <page_insert>
c0105827:	83 c4 10             	add    $0x10,%esp
c010582a:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ret == 0);
c010582d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105831:	74 19                	je     c010584c <copy_range+0x1bd>
c0105833:	68 40 d9 10 c0       	push   $0xc010d940
c0105838:	68 ad d8 10 c0       	push   $0xc010d8ad
c010583d:	68 12 02 00 00       	push   $0x212
c0105842:	68 88 d8 10 c0       	push   $0xc010d888
c0105847:	e8 a2 bf ff ff       	call   c01017ee <__panic>
        }
        start += PGSIZE;
c010584c:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0105853:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105857:	74 0c                	je     c0105865 <copy_range+0x1d6>
c0105859:	8b 45 10             	mov    0x10(%ebp),%eax
c010585c:	3b 45 14             	cmp    0x14(%ebp),%eax
c010585f:	0f 82 98 fe ff ff    	jb     c01056fd <copy_range+0x6e>
    return 0;
c0105865:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010586a:	c9                   	leave  
c010586b:	c3                   	ret    

c010586c <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c010586c:	f3 0f 1e fb          	endbr32 
c0105870:	55                   	push   %ebp
c0105871:	89 e5                	mov    %esp,%ebp
c0105873:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105876:	83 ec 04             	sub    $0x4,%esp
c0105879:	6a 00                	push   $0x0
c010587b:	ff 75 0c             	pushl  0xc(%ebp)
c010587e:	ff 75 08             	pushl  0x8(%ebp)
c0105881:	e8 5a fa ff ff       	call   c01052e0 <get_pte>
c0105886:	83 c4 10             	add    $0x10,%esp
c0105889:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c010588c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105890:	74 14                	je     c01058a6 <page_remove+0x3a>
        page_remove_pte(pgdir, la, ptep);
c0105892:	83 ec 04             	sub    $0x4,%esp
c0105895:	ff 75 f4             	pushl  -0xc(%ebp)
c0105898:	ff 75 0c             	pushl  0xc(%ebp)
c010589b:	ff 75 08             	pushl  0x8(%ebp)
c010589e:	e8 b8 fb ff ff       	call   c010545b <page_remove_pte>
c01058a3:	83 c4 10             	add    $0x10,%esp
    }
}
c01058a6:	90                   	nop
c01058a7:	c9                   	leave  
c01058a8:	c3                   	ret    

c01058a9 <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c01058a9:	f3 0f 1e fb          	endbr32 
c01058ad:	55                   	push   %ebp
c01058ae:	89 e5                	mov    %esp,%ebp
c01058b0:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c01058b3:	83 ec 04             	sub    $0x4,%esp
c01058b6:	6a 01                	push   $0x1
c01058b8:	ff 75 10             	pushl  0x10(%ebp)
c01058bb:	ff 75 08             	pushl  0x8(%ebp)
c01058be:	e8 1d fa ff ff       	call   c01052e0 <get_pte>
c01058c3:	83 c4 10             	add    $0x10,%esp
c01058c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c01058c9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01058cd:	75 0a                	jne    c01058d9 <page_insert+0x30>
        return -E_NO_MEM;
c01058cf:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01058d4:	e9 8b 00 00 00       	jmp    c0105964 <page_insert+0xbb>
    }
    page_ref_inc(page);
c01058d9:	83 ec 0c             	sub    $0xc,%esp
c01058dc:	ff 75 0c             	pushl  0xc(%ebp)
c01058df:	e8 7b f1 ff ff       	call   c0104a5f <page_ref_inc>
c01058e4:	83 c4 10             	add    $0x10,%esp
    if (*ptep & PTE_P) {
c01058e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058ea:	8b 00                	mov    (%eax),%eax
c01058ec:	83 e0 01             	and    $0x1,%eax
c01058ef:	85 c0                	test   %eax,%eax
c01058f1:	74 40                	je     c0105933 <page_insert+0x8a>
        struct Page *p = pte2page(*ptep);
c01058f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058f6:	8b 00                	mov    (%eax),%eax
c01058f8:	83 ec 0c             	sub    $0xc,%esp
c01058fb:	50                   	push   %eax
c01058fc:	e8 f0 f0 ff ff       	call   c01049f1 <pte2page>
c0105901:	83 c4 10             	add    $0x10,%esp
c0105904:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0105907:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010590a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010590d:	75 10                	jne    c010591f <page_insert+0x76>
            page_ref_dec(page);
c010590f:	83 ec 0c             	sub    $0xc,%esp
c0105912:	ff 75 0c             	pushl  0xc(%ebp)
c0105915:	e8 5c f1 ff ff       	call   c0104a76 <page_ref_dec>
c010591a:	83 c4 10             	add    $0x10,%esp
c010591d:	eb 14                	jmp    c0105933 <page_insert+0x8a>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c010591f:	83 ec 04             	sub    $0x4,%esp
c0105922:	ff 75 f4             	pushl  -0xc(%ebp)
c0105925:	ff 75 10             	pushl  0x10(%ebp)
c0105928:	ff 75 08             	pushl  0x8(%ebp)
c010592b:	e8 2b fb ff ff       	call   c010545b <page_remove_pte>
c0105930:	83 c4 10             	add    $0x10,%esp
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0105933:	83 ec 0c             	sub    $0xc,%esp
c0105936:	ff 75 0c             	pushl  0xc(%ebp)
c0105939:	e8 14 f0 ff ff       	call   c0104952 <page2pa>
c010593e:	83 c4 10             	add    $0x10,%esp
c0105941:	0b 45 14             	or     0x14(%ebp),%eax
c0105944:	83 c8 01             	or     $0x1,%eax
c0105947:	89 c2                	mov    %eax,%edx
c0105949:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010594c:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c010594e:	83 ec 08             	sub    $0x8,%esp
c0105951:	ff 75 10             	pushl  0x10(%ebp)
c0105954:	ff 75 08             	pushl  0x8(%ebp)
c0105957:	e8 0a 00 00 00       	call   c0105966 <tlb_invalidate>
c010595c:	83 c4 10             	add    $0x10,%esp
    return 0;
c010595f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105964:	c9                   	leave  
c0105965:	c3                   	ret    

c0105966 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0105966:	f3 0f 1e fb          	endbr32 
c010596a:	55                   	push   %ebp
c010596b:	89 e5                	mov    %esp,%ebp
c010596d:	83 ec 18             	sub    $0x18,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c0105970:	0f 20 d8             	mov    %cr3,%eax
c0105973:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr3;
c0105976:	8b 55 f0             	mov    -0x10(%ebp),%edx
    if (rcr3() == PADDR(pgdir)) {
c0105979:	8b 45 08             	mov    0x8(%ebp),%eax
c010597c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010597f:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0105986:	77 17                	ja     c010599f <tlb_invalidate+0x39>
c0105988:	ff 75 f4             	pushl  -0xc(%ebp)
c010598b:	68 64 d8 10 c0       	push   $0xc010d864
c0105990:	68 43 02 00 00       	push   $0x243
c0105995:	68 88 d8 10 c0       	push   $0xc010d888
c010599a:	e8 4f be ff ff       	call   c01017ee <__panic>
c010599f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059a2:	05 00 00 00 40       	add    $0x40000000,%eax
c01059a7:	39 d0                	cmp    %edx,%eax
c01059a9:	75 0d                	jne    c01059b8 <tlb_invalidate+0x52>
        invlpg((void *)la);
c01059ab:	8b 45 0c             	mov    0xc(%ebp),%eax
c01059ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c01059b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01059b4:	0f 01 38             	invlpg (%eax)
}
c01059b7:	90                   	nop
    }
}
c01059b8:	90                   	nop
c01059b9:	c9                   	leave  
c01059ba:	c3                   	ret    

c01059bb <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c01059bb:	f3 0f 1e fb          	endbr32 
c01059bf:	55                   	push   %ebp
c01059c0:	89 e5                	mov    %esp,%ebp
c01059c2:	83 ec 18             	sub    $0x18,%esp
    struct Page *page = alloc_page();
c01059c5:	83 ec 0c             	sub    $0xc,%esp
c01059c8:	6a 01                	push   $0x1
c01059ca:	e8 97 f2 ff ff       	call   c0104c66 <alloc_pages>
c01059cf:	83 c4 10             	add    $0x10,%esp
c01059d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c01059d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01059d9:	0f 84 8c 00 00 00    	je     c0105a6b <pgdir_alloc_page+0xb0>
        if (page_insert(pgdir, page, la, perm) != 0) {
c01059df:	ff 75 10             	pushl  0x10(%ebp)
c01059e2:	ff 75 0c             	pushl  0xc(%ebp)
c01059e5:	ff 75 f4             	pushl  -0xc(%ebp)
c01059e8:	ff 75 08             	pushl  0x8(%ebp)
c01059eb:	e8 b9 fe ff ff       	call   c01058a9 <page_insert>
c01059f0:	83 c4 10             	add    $0x10,%esp
c01059f3:	85 c0                	test   %eax,%eax
c01059f5:	74 17                	je     c0105a0e <pgdir_alloc_page+0x53>
            free_page(page);
c01059f7:	83 ec 08             	sub    $0x8,%esp
c01059fa:	6a 01                	push   $0x1
c01059fc:	ff 75 f4             	pushl  -0xc(%ebp)
c01059ff:	e8 d2 f2 ff ff       	call   c0104cd6 <free_pages>
c0105a04:	83 c4 10             	add    $0x10,%esp
            return NULL;
c0105a07:	b8 00 00 00 00       	mov    $0x0,%eax
c0105a0c:	eb 60                	jmp    c0105a6e <pgdir_alloc_page+0xb3>
        }
        if (swap_init_ok){
c0105a0e:	a1 10 60 1b c0       	mov    0xc01b6010,%eax
c0105a13:	85 c0                	test   %eax,%eax
c0105a15:	74 54                	je     c0105a6b <pgdir_alloc_page+0xb0>
            if(check_mm_struct!=NULL) {
c0105a17:	a1 64 80 1b c0       	mov    0xc01b8064,%eax
c0105a1c:	85 c0                	test   %eax,%eax
c0105a1e:	74 4b                	je     c0105a6b <pgdir_alloc_page+0xb0>
                swap_map_swappable(check_mm_struct, la, page, 0);
c0105a20:	a1 64 80 1b c0       	mov    0xc01b8064,%eax
c0105a25:	6a 00                	push   $0x0
c0105a27:	ff 75 f4             	pushl  -0xc(%ebp)
c0105a2a:	ff 75 0c             	pushl  0xc(%ebp)
c0105a2d:	50                   	push   %eax
c0105a2e:	e8 1f 1e 00 00       	call   c0107852 <swap_map_swappable>
c0105a33:	83 c4 10             	add    $0x10,%esp
                page->pra_vaddr=la;
c0105a36:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a39:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105a3c:	89 50 20             	mov    %edx,0x20(%eax)
                assert(page_ref(page) == 1);
c0105a3f:	83 ec 0c             	sub    $0xc,%esp
c0105a42:	ff 75 f4             	pushl  -0xc(%ebp)
c0105a45:	e8 fd ef ff ff       	call   c0104a47 <page_ref>
c0105a4a:	83 c4 10             	add    $0x10,%esp
c0105a4d:	83 f8 01             	cmp    $0x1,%eax
c0105a50:	74 19                	je     c0105a6b <pgdir_alloc_page+0xb0>
c0105a52:	68 49 d9 10 c0       	push   $0xc010d949
c0105a57:	68 ad d8 10 c0       	push   $0xc010d8ad
c0105a5c:	68 57 02 00 00       	push   $0x257
c0105a61:	68 88 d8 10 c0       	push   $0xc010d888
c0105a66:	e8 83 bd ff ff       	call   c01017ee <__panic>
            }
        }

    }

    return page;
c0105a6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105a6e:	c9                   	leave  
c0105a6f:	c3                   	ret    

c0105a70 <check_alloc_page>:

static void
check_alloc_page(void) {
c0105a70:	f3 0f 1e fb          	endbr32 
c0105a74:	55                   	push   %ebp
c0105a75:	89 e5                	mov    %esp,%ebp
c0105a77:	83 ec 08             	sub    $0x8,%esp
    pmm_manager->check();
c0105a7a:	a1 58 80 1b c0       	mov    0xc01b8058,%eax
c0105a7f:	8b 40 18             	mov    0x18(%eax),%eax
c0105a82:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c0105a84:	83 ec 0c             	sub    $0xc,%esp
c0105a87:	68 60 d9 10 c0       	push   $0xc010d960
c0105a8c:	e8 21 a8 ff ff       	call   c01002b2 <cprintf>
c0105a91:	83 c4 10             	add    $0x10,%esp
}
c0105a94:	90                   	nop
c0105a95:	c9                   	leave  
c0105a96:	c3                   	ret    

c0105a97 <check_pgdir>:

static void
check_pgdir(void) {
c0105a97:	f3 0f 1e fb          	endbr32 
c0105a9b:	55                   	push   %ebp
c0105a9c:	89 e5                	mov    %esp,%ebp
c0105a9e:	83 ec 28             	sub    $0x28,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c0105aa1:	a1 80 5f 1b c0       	mov    0xc01b5f80,%eax
c0105aa6:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0105aab:	76 19                	jbe    c0105ac6 <check_pgdir+0x2f>
c0105aad:	68 7f d9 10 c0       	push   $0xc010d97f
c0105ab2:	68 ad d8 10 c0       	push   $0xc010d8ad
c0105ab7:	68 6f 02 00 00       	push   $0x26f
c0105abc:	68 88 d8 10 c0       	push   $0xc010d888
c0105ac1:	e8 28 bd ff ff       	call   c01017ee <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c0105ac6:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c0105acb:	85 c0                	test   %eax,%eax
c0105acd:	74 0e                	je     c0105add <check_pgdir+0x46>
c0105acf:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c0105ad4:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105ad9:	85 c0                	test   %eax,%eax
c0105adb:	74 19                	je     c0105af6 <check_pgdir+0x5f>
c0105add:	68 9c d9 10 c0       	push   $0xc010d99c
c0105ae2:	68 ad d8 10 c0       	push   $0xc010d8ad
c0105ae7:	68 70 02 00 00       	push   $0x270
c0105aec:	68 88 d8 10 c0       	push   $0xc010d888
c0105af1:	e8 f8 bc ff ff       	call   c01017ee <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c0105af6:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c0105afb:	83 ec 04             	sub    $0x4,%esp
c0105afe:	6a 00                	push   $0x0
c0105b00:	6a 00                	push   $0x0
c0105b02:	50                   	push   %eax
c0105b03:	e8 f9 f8 ff ff       	call   c0105401 <get_page>
c0105b08:	83 c4 10             	add    $0x10,%esp
c0105b0b:	85 c0                	test   %eax,%eax
c0105b0d:	74 19                	je     c0105b28 <check_pgdir+0x91>
c0105b0f:	68 d4 d9 10 c0       	push   $0xc010d9d4
c0105b14:	68 ad d8 10 c0       	push   $0xc010d8ad
c0105b19:	68 71 02 00 00       	push   $0x271
c0105b1e:	68 88 d8 10 c0       	push   $0xc010d888
c0105b23:	e8 c6 bc ff ff       	call   c01017ee <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c0105b28:	83 ec 0c             	sub    $0xc,%esp
c0105b2b:	6a 01                	push   $0x1
c0105b2d:	e8 34 f1 ff ff       	call   c0104c66 <alloc_pages>
c0105b32:	83 c4 10             	add    $0x10,%esp
c0105b35:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c0105b38:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c0105b3d:	6a 00                	push   $0x0
c0105b3f:	6a 00                	push   $0x0
c0105b41:	ff 75 f4             	pushl  -0xc(%ebp)
c0105b44:	50                   	push   %eax
c0105b45:	e8 5f fd ff ff       	call   c01058a9 <page_insert>
c0105b4a:	83 c4 10             	add    $0x10,%esp
c0105b4d:	85 c0                	test   %eax,%eax
c0105b4f:	74 19                	je     c0105b6a <check_pgdir+0xd3>
c0105b51:	68 fc d9 10 c0       	push   $0xc010d9fc
c0105b56:	68 ad d8 10 c0       	push   $0xc010d8ad
c0105b5b:	68 75 02 00 00       	push   $0x275
c0105b60:	68 88 d8 10 c0       	push   $0xc010d888
c0105b65:	e8 84 bc ff ff       	call   c01017ee <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0105b6a:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c0105b6f:	83 ec 04             	sub    $0x4,%esp
c0105b72:	6a 00                	push   $0x0
c0105b74:	6a 00                	push   $0x0
c0105b76:	50                   	push   %eax
c0105b77:	e8 64 f7 ff ff       	call   c01052e0 <get_pte>
c0105b7c:	83 c4 10             	add    $0x10,%esp
c0105b7f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105b82:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105b86:	75 19                	jne    c0105ba1 <check_pgdir+0x10a>
c0105b88:	68 28 da 10 c0       	push   $0xc010da28
c0105b8d:	68 ad d8 10 c0       	push   $0xc010d8ad
c0105b92:	68 78 02 00 00       	push   $0x278
c0105b97:	68 88 d8 10 c0       	push   $0xc010d888
c0105b9c:	e8 4d bc ff ff       	call   c01017ee <__panic>
    assert(pte2page(*ptep) == p1);
c0105ba1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ba4:	8b 00                	mov    (%eax),%eax
c0105ba6:	83 ec 0c             	sub    $0xc,%esp
c0105ba9:	50                   	push   %eax
c0105baa:	e8 42 ee ff ff       	call   c01049f1 <pte2page>
c0105baf:	83 c4 10             	add    $0x10,%esp
c0105bb2:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0105bb5:	74 19                	je     c0105bd0 <check_pgdir+0x139>
c0105bb7:	68 55 da 10 c0       	push   $0xc010da55
c0105bbc:	68 ad d8 10 c0       	push   $0xc010d8ad
c0105bc1:	68 79 02 00 00       	push   $0x279
c0105bc6:	68 88 d8 10 c0       	push   $0xc010d888
c0105bcb:	e8 1e bc ff ff       	call   c01017ee <__panic>
    assert(page_ref(p1) == 1);
c0105bd0:	83 ec 0c             	sub    $0xc,%esp
c0105bd3:	ff 75 f4             	pushl  -0xc(%ebp)
c0105bd6:	e8 6c ee ff ff       	call   c0104a47 <page_ref>
c0105bdb:	83 c4 10             	add    $0x10,%esp
c0105bde:	83 f8 01             	cmp    $0x1,%eax
c0105be1:	74 19                	je     c0105bfc <check_pgdir+0x165>
c0105be3:	68 6b da 10 c0       	push   $0xc010da6b
c0105be8:	68 ad d8 10 c0       	push   $0xc010d8ad
c0105bed:	68 7a 02 00 00       	push   $0x27a
c0105bf2:	68 88 d8 10 c0       	push   $0xc010d888
c0105bf7:	e8 f2 bb ff ff       	call   c01017ee <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c0105bfc:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c0105c01:	8b 00                	mov    (%eax),%eax
c0105c03:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105c08:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105c0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105c0e:	c1 e8 0c             	shr    $0xc,%eax
c0105c11:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105c14:	a1 80 5f 1b c0       	mov    0xc01b5f80,%eax
c0105c19:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0105c1c:	72 17                	jb     c0105c35 <check_pgdir+0x19e>
c0105c1e:	ff 75 ec             	pushl  -0x14(%ebp)
c0105c21:	68 c0 d7 10 c0       	push   $0xc010d7c0
c0105c26:	68 7c 02 00 00       	push   $0x27c
c0105c2b:	68 88 d8 10 c0       	push   $0xc010d888
c0105c30:	e8 b9 bb ff ff       	call   c01017ee <__panic>
c0105c35:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105c38:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0105c3d:	83 c0 04             	add    $0x4,%eax
c0105c40:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c0105c43:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c0105c48:	83 ec 04             	sub    $0x4,%esp
c0105c4b:	6a 00                	push   $0x0
c0105c4d:	68 00 10 00 00       	push   $0x1000
c0105c52:	50                   	push   %eax
c0105c53:	e8 88 f6 ff ff       	call   c01052e0 <get_pte>
c0105c58:	83 c4 10             	add    $0x10,%esp
c0105c5b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0105c5e:	74 19                	je     c0105c79 <check_pgdir+0x1e2>
c0105c60:	68 80 da 10 c0       	push   $0xc010da80
c0105c65:	68 ad d8 10 c0       	push   $0xc010d8ad
c0105c6a:	68 7d 02 00 00       	push   $0x27d
c0105c6f:	68 88 d8 10 c0       	push   $0xc010d888
c0105c74:	e8 75 bb ff ff       	call   c01017ee <__panic>

    p2 = alloc_page();
c0105c79:	83 ec 0c             	sub    $0xc,%esp
c0105c7c:	6a 01                	push   $0x1
c0105c7e:	e8 e3 ef ff ff       	call   c0104c66 <alloc_pages>
c0105c83:	83 c4 10             	add    $0x10,%esp
c0105c86:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c0105c89:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c0105c8e:	6a 06                	push   $0x6
c0105c90:	68 00 10 00 00       	push   $0x1000
c0105c95:	ff 75 e4             	pushl  -0x1c(%ebp)
c0105c98:	50                   	push   %eax
c0105c99:	e8 0b fc ff ff       	call   c01058a9 <page_insert>
c0105c9e:	83 c4 10             	add    $0x10,%esp
c0105ca1:	85 c0                	test   %eax,%eax
c0105ca3:	74 19                	je     c0105cbe <check_pgdir+0x227>
c0105ca5:	68 a8 da 10 c0       	push   $0xc010daa8
c0105caa:	68 ad d8 10 c0       	push   $0xc010d8ad
c0105caf:	68 80 02 00 00       	push   $0x280
c0105cb4:	68 88 d8 10 c0       	push   $0xc010d888
c0105cb9:	e8 30 bb ff ff       	call   c01017ee <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0105cbe:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c0105cc3:	83 ec 04             	sub    $0x4,%esp
c0105cc6:	6a 00                	push   $0x0
c0105cc8:	68 00 10 00 00       	push   $0x1000
c0105ccd:	50                   	push   %eax
c0105cce:	e8 0d f6 ff ff       	call   c01052e0 <get_pte>
c0105cd3:	83 c4 10             	add    $0x10,%esp
c0105cd6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105cd9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105cdd:	75 19                	jne    c0105cf8 <check_pgdir+0x261>
c0105cdf:	68 e0 da 10 c0       	push   $0xc010dae0
c0105ce4:	68 ad d8 10 c0       	push   $0xc010d8ad
c0105ce9:	68 81 02 00 00       	push   $0x281
c0105cee:	68 88 d8 10 c0       	push   $0xc010d888
c0105cf3:	e8 f6 ba ff ff       	call   c01017ee <__panic>
    assert(*ptep & PTE_U);
c0105cf8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105cfb:	8b 00                	mov    (%eax),%eax
c0105cfd:	83 e0 04             	and    $0x4,%eax
c0105d00:	85 c0                	test   %eax,%eax
c0105d02:	75 19                	jne    c0105d1d <check_pgdir+0x286>
c0105d04:	68 10 db 10 c0       	push   $0xc010db10
c0105d09:	68 ad d8 10 c0       	push   $0xc010d8ad
c0105d0e:	68 82 02 00 00       	push   $0x282
c0105d13:	68 88 d8 10 c0       	push   $0xc010d888
c0105d18:	e8 d1 ba ff ff       	call   c01017ee <__panic>
    assert(*ptep & PTE_W);
c0105d1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d20:	8b 00                	mov    (%eax),%eax
c0105d22:	83 e0 02             	and    $0x2,%eax
c0105d25:	85 c0                	test   %eax,%eax
c0105d27:	75 19                	jne    c0105d42 <check_pgdir+0x2ab>
c0105d29:	68 1e db 10 c0       	push   $0xc010db1e
c0105d2e:	68 ad d8 10 c0       	push   $0xc010d8ad
c0105d33:	68 83 02 00 00       	push   $0x283
c0105d38:	68 88 d8 10 c0       	push   $0xc010d888
c0105d3d:	e8 ac ba ff ff       	call   c01017ee <__panic>
    assert(boot_pgdir[0] & PTE_U);
c0105d42:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c0105d47:	8b 00                	mov    (%eax),%eax
c0105d49:	83 e0 04             	and    $0x4,%eax
c0105d4c:	85 c0                	test   %eax,%eax
c0105d4e:	75 19                	jne    c0105d69 <check_pgdir+0x2d2>
c0105d50:	68 2c db 10 c0       	push   $0xc010db2c
c0105d55:	68 ad d8 10 c0       	push   $0xc010d8ad
c0105d5a:	68 84 02 00 00       	push   $0x284
c0105d5f:	68 88 d8 10 c0       	push   $0xc010d888
c0105d64:	e8 85 ba ff ff       	call   c01017ee <__panic>
    assert(page_ref(p2) == 1);
c0105d69:	83 ec 0c             	sub    $0xc,%esp
c0105d6c:	ff 75 e4             	pushl  -0x1c(%ebp)
c0105d6f:	e8 d3 ec ff ff       	call   c0104a47 <page_ref>
c0105d74:	83 c4 10             	add    $0x10,%esp
c0105d77:	83 f8 01             	cmp    $0x1,%eax
c0105d7a:	74 19                	je     c0105d95 <check_pgdir+0x2fe>
c0105d7c:	68 42 db 10 c0       	push   $0xc010db42
c0105d81:	68 ad d8 10 c0       	push   $0xc010d8ad
c0105d86:	68 85 02 00 00       	push   $0x285
c0105d8b:	68 88 d8 10 c0       	push   $0xc010d888
c0105d90:	e8 59 ba ff ff       	call   c01017ee <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c0105d95:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c0105d9a:	6a 00                	push   $0x0
c0105d9c:	68 00 10 00 00       	push   $0x1000
c0105da1:	ff 75 f4             	pushl  -0xc(%ebp)
c0105da4:	50                   	push   %eax
c0105da5:	e8 ff fa ff ff       	call   c01058a9 <page_insert>
c0105daa:	83 c4 10             	add    $0x10,%esp
c0105dad:	85 c0                	test   %eax,%eax
c0105daf:	74 19                	je     c0105dca <check_pgdir+0x333>
c0105db1:	68 54 db 10 c0       	push   $0xc010db54
c0105db6:	68 ad d8 10 c0       	push   $0xc010d8ad
c0105dbb:	68 87 02 00 00       	push   $0x287
c0105dc0:	68 88 d8 10 c0       	push   $0xc010d888
c0105dc5:	e8 24 ba ff ff       	call   c01017ee <__panic>
    assert(page_ref(p1) == 2);
c0105dca:	83 ec 0c             	sub    $0xc,%esp
c0105dcd:	ff 75 f4             	pushl  -0xc(%ebp)
c0105dd0:	e8 72 ec ff ff       	call   c0104a47 <page_ref>
c0105dd5:	83 c4 10             	add    $0x10,%esp
c0105dd8:	83 f8 02             	cmp    $0x2,%eax
c0105ddb:	74 19                	je     c0105df6 <check_pgdir+0x35f>
c0105ddd:	68 80 db 10 c0       	push   $0xc010db80
c0105de2:	68 ad d8 10 c0       	push   $0xc010d8ad
c0105de7:	68 88 02 00 00       	push   $0x288
c0105dec:	68 88 d8 10 c0       	push   $0xc010d888
c0105df1:	e8 f8 b9 ff ff       	call   c01017ee <__panic>
    assert(page_ref(p2) == 0);
c0105df6:	83 ec 0c             	sub    $0xc,%esp
c0105df9:	ff 75 e4             	pushl  -0x1c(%ebp)
c0105dfc:	e8 46 ec ff ff       	call   c0104a47 <page_ref>
c0105e01:	83 c4 10             	add    $0x10,%esp
c0105e04:	85 c0                	test   %eax,%eax
c0105e06:	74 19                	je     c0105e21 <check_pgdir+0x38a>
c0105e08:	68 92 db 10 c0       	push   $0xc010db92
c0105e0d:	68 ad d8 10 c0       	push   $0xc010d8ad
c0105e12:	68 89 02 00 00       	push   $0x289
c0105e17:	68 88 d8 10 c0       	push   $0xc010d888
c0105e1c:	e8 cd b9 ff ff       	call   c01017ee <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0105e21:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c0105e26:	83 ec 04             	sub    $0x4,%esp
c0105e29:	6a 00                	push   $0x0
c0105e2b:	68 00 10 00 00       	push   $0x1000
c0105e30:	50                   	push   %eax
c0105e31:	e8 aa f4 ff ff       	call   c01052e0 <get_pte>
c0105e36:	83 c4 10             	add    $0x10,%esp
c0105e39:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105e3c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105e40:	75 19                	jne    c0105e5b <check_pgdir+0x3c4>
c0105e42:	68 e0 da 10 c0       	push   $0xc010dae0
c0105e47:	68 ad d8 10 c0       	push   $0xc010d8ad
c0105e4c:	68 8a 02 00 00       	push   $0x28a
c0105e51:	68 88 d8 10 c0       	push   $0xc010d888
c0105e56:	e8 93 b9 ff ff       	call   c01017ee <__panic>
    assert(pte2page(*ptep) == p1);
c0105e5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105e5e:	8b 00                	mov    (%eax),%eax
c0105e60:	83 ec 0c             	sub    $0xc,%esp
c0105e63:	50                   	push   %eax
c0105e64:	e8 88 eb ff ff       	call   c01049f1 <pte2page>
c0105e69:	83 c4 10             	add    $0x10,%esp
c0105e6c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0105e6f:	74 19                	je     c0105e8a <check_pgdir+0x3f3>
c0105e71:	68 55 da 10 c0       	push   $0xc010da55
c0105e76:	68 ad d8 10 c0       	push   $0xc010d8ad
c0105e7b:	68 8b 02 00 00       	push   $0x28b
c0105e80:	68 88 d8 10 c0       	push   $0xc010d888
c0105e85:	e8 64 b9 ff ff       	call   c01017ee <__panic>
    assert((*ptep & PTE_U) == 0);
c0105e8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105e8d:	8b 00                	mov    (%eax),%eax
c0105e8f:	83 e0 04             	and    $0x4,%eax
c0105e92:	85 c0                	test   %eax,%eax
c0105e94:	74 19                	je     c0105eaf <check_pgdir+0x418>
c0105e96:	68 a4 db 10 c0       	push   $0xc010dba4
c0105e9b:	68 ad d8 10 c0       	push   $0xc010d8ad
c0105ea0:	68 8c 02 00 00       	push   $0x28c
c0105ea5:	68 88 d8 10 c0       	push   $0xc010d888
c0105eaa:	e8 3f b9 ff ff       	call   c01017ee <__panic>

    page_remove(boot_pgdir, 0x0);
c0105eaf:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c0105eb4:	83 ec 08             	sub    $0x8,%esp
c0105eb7:	6a 00                	push   $0x0
c0105eb9:	50                   	push   %eax
c0105eba:	e8 ad f9 ff ff       	call   c010586c <page_remove>
c0105ebf:	83 c4 10             	add    $0x10,%esp
    assert(page_ref(p1) == 1);
c0105ec2:	83 ec 0c             	sub    $0xc,%esp
c0105ec5:	ff 75 f4             	pushl  -0xc(%ebp)
c0105ec8:	e8 7a eb ff ff       	call   c0104a47 <page_ref>
c0105ecd:	83 c4 10             	add    $0x10,%esp
c0105ed0:	83 f8 01             	cmp    $0x1,%eax
c0105ed3:	74 19                	je     c0105eee <check_pgdir+0x457>
c0105ed5:	68 6b da 10 c0       	push   $0xc010da6b
c0105eda:	68 ad d8 10 c0       	push   $0xc010d8ad
c0105edf:	68 8f 02 00 00       	push   $0x28f
c0105ee4:	68 88 d8 10 c0       	push   $0xc010d888
c0105ee9:	e8 00 b9 ff ff       	call   c01017ee <__panic>
    assert(page_ref(p2) == 0);
c0105eee:	83 ec 0c             	sub    $0xc,%esp
c0105ef1:	ff 75 e4             	pushl  -0x1c(%ebp)
c0105ef4:	e8 4e eb ff ff       	call   c0104a47 <page_ref>
c0105ef9:	83 c4 10             	add    $0x10,%esp
c0105efc:	85 c0                	test   %eax,%eax
c0105efe:	74 19                	je     c0105f19 <check_pgdir+0x482>
c0105f00:	68 92 db 10 c0       	push   $0xc010db92
c0105f05:	68 ad d8 10 c0       	push   $0xc010d8ad
c0105f0a:	68 90 02 00 00       	push   $0x290
c0105f0f:	68 88 d8 10 c0       	push   $0xc010d888
c0105f14:	e8 d5 b8 ff ff       	call   c01017ee <__panic>

    page_remove(boot_pgdir, PGSIZE);
c0105f19:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c0105f1e:	83 ec 08             	sub    $0x8,%esp
c0105f21:	68 00 10 00 00       	push   $0x1000
c0105f26:	50                   	push   %eax
c0105f27:	e8 40 f9 ff ff       	call   c010586c <page_remove>
c0105f2c:	83 c4 10             	add    $0x10,%esp
    assert(page_ref(p1) == 0);
c0105f2f:	83 ec 0c             	sub    $0xc,%esp
c0105f32:	ff 75 f4             	pushl  -0xc(%ebp)
c0105f35:	e8 0d eb ff ff       	call   c0104a47 <page_ref>
c0105f3a:	83 c4 10             	add    $0x10,%esp
c0105f3d:	85 c0                	test   %eax,%eax
c0105f3f:	74 19                	je     c0105f5a <check_pgdir+0x4c3>
c0105f41:	68 b9 db 10 c0       	push   $0xc010dbb9
c0105f46:	68 ad d8 10 c0       	push   $0xc010d8ad
c0105f4b:	68 93 02 00 00       	push   $0x293
c0105f50:	68 88 d8 10 c0       	push   $0xc010d888
c0105f55:	e8 94 b8 ff ff       	call   c01017ee <__panic>
    assert(page_ref(p2) == 0);
c0105f5a:	83 ec 0c             	sub    $0xc,%esp
c0105f5d:	ff 75 e4             	pushl  -0x1c(%ebp)
c0105f60:	e8 e2 ea ff ff       	call   c0104a47 <page_ref>
c0105f65:	83 c4 10             	add    $0x10,%esp
c0105f68:	85 c0                	test   %eax,%eax
c0105f6a:	74 19                	je     c0105f85 <check_pgdir+0x4ee>
c0105f6c:	68 92 db 10 c0       	push   $0xc010db92
c0105f71:	68 ad d8 10 c0       	push   $0xc010d8ad
c0105f76:	68 94 02 00 00       	push   $0x294
c0105f7b:	68 88 d8 10 c0       	push   $0xc010d888
c0105f80:	e8 69 b8 ff ff       	call   c01017ee <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c0105f85:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c0105f8a:	8b 00                	mov    (%eax),%eax
c0105f8c:	83 ec 0c             	sub    $0xc,%esp
c0105f8f:	50                   	push   %eax
c0105f90:	e8 96 ea ff ff       	call   c0104a2b <pde2page>
c0105f95:	83 c4 10             	add    $0x10,%esp
c0105f98:	83 ec 0c             	sub    $0xc,%esp
c0105f9b:	50                   	push   %eax
c0105f9c:	e8 a6 ea ff ff       	call   c0104a47 <page_ref>
c0105fa1:	83 c4 10             	add    $0x10,%esp
c0105fa4:	83 f8 01             	cmp    $0x1,%eax
c0105fa7:	74 19                	je     c0105fc2 <check_pgdir+0x52b>
c0105fa9:	68 cc db 10 c0       	push   $0xc010dbcc
c0105fae:	68 ad d8 10 c0       	push   $0xc010d8ad
c0105fb3:	68 96 02 00 00       	push   $0x296
c0105fb8:	68 88 d8 10 c0       	push   $0xc010d888
c0105fbd:	e8 2c b8 ff ff       	call   c01017ee <__panic>
    free_page(pde2page(boot_pgdir[0]));
c0105fc2:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c0105fc7:	8b 00                	mov    (%eax),%eax
c0105fc9:	83 ec 0c             	sub    $0xc,%esp
c0105fcc:	50                   	push   %eax
c0105fcd:	e8 59 ea ff ff       	call   c0104a2b <pde2page>
c0105fd2:	83 c4 10             	add    $0x10,%esp
c0105fd5:	83 ec 08             	sub    $0x8,%esp
c0105fd8:	6a 01                	push   $0x1
c0105fda:	50                   	push   %eax
c0105fdb:	e8 f6 ec ff ff       	call   c0104cd6 <free_pages>
c0105fe0:	83 c4 10             	add    $0x10,%esp
    boot_pgdir[0] = 0;
c0105fe3:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c0105fe8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c0105fee:	83 ec 0c             	sub    $0xc,%esp
c0105ff1:	68 f3 db 10 c0       	push   $0xc010dbf3
c0105ff6:	e8 b7 a2 ff ff       	call   c01002b2 <cprintf>
c0105ffb:	83 c4 10             	add    $0x10,%esp
}
c0105ffe:	90                   	nop
c0105fff:	c9                   	leave  
c0106000:	c3                   	ret    

c0106001 <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c0106001:	f3 0f 1e fb          	endbr32 
c0106005:	55                   	push   %ebp
c0106006:	89 e5                	mov    %esp,%ebp
c0106008:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c010600b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106012:	e9 a3 00 00 00       	jmp    c01060ba <check_boot_pgdir+0xb9>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c0106017:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010601a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010601d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106020:	c1 e8 0c             	shr    $0xc,%eax
c0106023:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0106026:	a1 80 5f 1b c0       	mov    0xc01b5f80,%eax
c010602b:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c010602e:	72 17                	jb     c0106047 <check_boot_pgdir+0x46>
c0106030:	ff 75 e4             	pushl  -0x1c(%ebp)
c0106033:	68 c0 d7 10 c0       	push   $0xc010d7c0
c0106038:	68 a2 02 00 00       	push   $0x2a2
c010603d:	68 88 d8 10 c0       	push   $0xc010d888
c0106042:	e8 a7 b7 ff ff       	call   c01017ee <__panic>
c0106047:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010604a:	2d 00 00 00 40       	sub    $0x40000000,%eax
c010604f:	89 c2                	mov    %eax,%edx
c0106051:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c0106056:	83 ec 04             	sub    $0x4,%esp
c0106059:	6a 00                	push   $0x0
c010605b:	52                   	push   %edx
c010605c:	50                   	push   %eax
c010605d:	e8 7e f2 ff ff       	call   c01052e0 <get_pte>
c0106062:	83 c4 10             	add    $0x10,%esp
c0106065:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106068:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010606c:	75 19                	jne    c0106087 <check_boot_pgdir+0x86>
c010606e:	68 10 dc 10 c0       	push   $0xc010dc10
c0106073:	68 ad d8 10 c0       	push   $0xc010d8ad
c0106078:	68 a2 02 00 00       	push   $0x2a2
c010607d:	68 88 d8 10 c0       	push   $0xc010d888
c0106082:	e8 67 b7 ff ff       	call   c01017ee <__panic>
        assert(PTE_ADDR(*ptep) == i);
c0106087:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010608a:	8b 00                	mov    (%eax),%eax
c010608c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106091:	89 c2                	mov    %eax,%edx
c0106093:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106096:	39 c2                	cmp    %eax,%edx
c0106098:	74 19                	je     c01060b3 <check_boot_pgdir+0xb2>
c010609a:	68 4d dc 10 c0       	push   $0xc010dc4d
c010609f:	68 ad d8 10 c0       	push   $0xc010d8ad
c01060a4:	68 a3 02 00 00       	push   $0x2a3
c01060a9:	68 88 d8 10 c0       	push   $0xc010d888
c01060ae:	e8 3b b7 ff ff       	call   c01017ee <__panic>
    for (i = 0; i < npage; i += PGSIZE) {
c01060b3:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c01060ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01060bd:	a1 80 5f 1b c0       	mov    0xc01b5f80,%eax
c01060c2:	39 c2                	cmp    %eax,%edx
c01060c4:	0f 82 4d ff ff ff    	jb     c0106017 <check_boot_pgdir+0x16>
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c01060ca:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c01060cf:	05 ac 0f 00 00       	add    $0xfac,%eax
c01060d4:	8b 00                	mov    (%eax),%eax
c01060d6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01060db:	89 c2                	mov    %eax,%edx
c01060dd:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c01060e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01060e5:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c01060ec:	77 17                	ja     c0106105 <check_boot_pgdir+0x104>
c01060ee:	ff 75 f0             	pushl  -0x10(%ebp)
c01060f1:	68 64 d8 10 c0       	push   $0xc010d864
c01060f6:	68 a6 02 00 00       	push   $0x2a6
c01060fb:	68 88 d8 10 c0       	push   $0xc010d888
c0106100:	e8 e9 b6 ff ff       	call   c01017ee <__panic>
c0106105:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106108:	05 00 00 00 40       	add    $0x40000000,%eax
c010610d:	39 d0                	cmp    %edx,%eax
c010610f:	74 19                	je     c010612a <check_boot_pgdir+0x129>
c0106111:	68 64 dc 10 c0       	push   $0xc010dc64
c0106116:	68 ad d8 10 c0       	push   $0xc010d8ad
c010611b:	68 a6 02 00 00       	push   $0x2a6
c0106120:	68 88 d8 10 c0       	push   $0xc010d888
c0106125:	e8 c4 b6 ff ff       	call   c01017ee <__panic>

    assert(boot_pgdir[0] == 0);
c010612a:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c010612f:	8b 00                	mov    (%eax),%eax
c0106131:	85 c0                	test   %eax,%eax
c0106133:	74 19                	je     c010614e <check_boot_pgdir+0x14d>
c0106135:	68 98 dc 10 c0       	push   $0xc010dc98
c010613a:	68 ad d8 10 c0       	push   $0xc010d8ad
c010613f:	68 a8 02 00 00       	push   $0x2a8
c0106144:	68 88 d8 10 c0       	push   $0xc010d888
c0106149:	e8 a0 b6 ff ff       	call   c01017ee <__panic>

    struct Page *p;
    p = alloc_page();
c010614e:	83 ec 0c             	sub    $0xc,%esp
c0106151:	6a 01                	push   $0x1
c0106153:	e8 0e eb ff ff       	call   c0104c66 <alloc_pages>
c0106158:	83 c4 10             	add    $0x10,%esp
c010615b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c010615e:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c0106163:	6a 02                	push   $0x2
c0106165:	68 00 01 00 00       	push   $0x100
c010616a:	ff 75 ec             	pushl  -0x14(%ebp)
c010616d:	50                   	push   %eax
c010616e:	e8 36 f7 ff ff       	call   c01058a9 <page_insert>
c0106173:	83 c4 10             	add    $0x10,%esp
c0106176:	85 c0                	test   %eax,%eax
c0106178:	74 19                	je     c0106193 <check_boot_pgdir+0x192>
c010617a:	68 ac dc 10 c0       	push   $0xc010dcac
c010617f:	68 ad d8 10 c0       	push   $0xc010d8ad
c0106184:	68 ac 02 00 00       	push   $0x2ac
c0106189:	68 88 d8 10 c0       	push   $0xc010d888
c010618e:	e8 5b b6 ff ff       	call   c01017ee <__panic>
    assert(page_ref(p) == 1);
c0106193:	83 ec 0c             	sub    $0xc,%esp
c0106196:	ff 75 ec             	pushl  -0x14(%ebp)
c0106199:	e8 a9 e8 ff ff       	call   c0104a47 <page_ref>
c010619e:	83 c4 10             	add    $0x10,%esp
c01061a1:	83 f8 01             	cmp    $0x1,%eax
c01061a4:	74 19                	je     c01061bf <check_boot_pgdir+0x1be>
c01061a6:	68 da dc 10 c0       	push   $0xc010dcda
c01061ab:	68 ad d8 10 c0       	push   $0xc010d8ad
c01061b0:	68 ad 02 00 00       	push   $0x2ad
c01061b5:	68 88 d8 10 c0       	push   $0xc010d888
c01061ba:	e8 2f b6 ff ff       	call   c01017ee <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c01061bf:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c01061c4:	6a 02                	push   $0x2
c01061c6:	68 00 11 00 00       	push   $0x1100
c01061cb:	ff 75 ec             	pushl  -0x14(%ebp)
c01061ce:	50                   	push   %eax
c01061cf:	e8 d5 f6 ff ff       	call   c01058a9 <page_insert>
c01061d4:	83 c4 10             	add    $0x10,%esp
c01061d7:	85 c0                	test   %eax,%eax
c01061d9:	74 19                	je     c01061f4 <check_boot_pgdir+0x1f3>
c01061db:	68 ec dc 10 c0       	push   $0xc010dcec
c01061e0:	68 ad d8 10 c0       	push   $0xc010d8ad
c01061e5:	68 ae 02 00 00       	push   $0x2ae
c01061ea:	68 88 d8 10 c0       	push   $0xc010d888
c01061ef:	e8 fa b5 ff ff       	call   c01017ee <__panic>
    assert(page_ref(p) == 2);
c01061f4:	83 ec 0c             	sub    $0xc,%esp
c01061f7:	ff 75 ec             	pushl  -0x14(%ebp)
c01061fa:	e8 48 e8 ff ff       	call   c0104a47 <page_ref>
c01061ff:	83 c4 10             	add    $0x10,%esp
c0106202:	83 f8 02             	cmp    $0x2,%eax
c0106205:	74 19                	je     c0106220 <check_boot_pgdir+0x21f>
c0106207:	68 23 dd 10 c0       	push   $0xc010dd23
c010620c:	68 ad d8 10 c0       	push   $0xc010d8ad
c0106211:	68 af 02 00 00       	push   $0x2af
c0106216:	68 88 d8 10 c0       	push   $0xc010d888
c010621b:	e8 ce b5 ff ff       	call   c01017ee <__panic>

    const char *str = "ucore: Hello world!!";
c0106220:	c7 45 e8 34 dd 10 c0 	movl   $0xc010dd34,-0x18(%ebp)
    strcpy((void *)0x100, str);
c0106227:	83 ec 08             	sub    $0x8,%esp
c010622a:	ff 75 e8             	pushl  -0x18(%ebp)
c010622d:	68 00 01 00 00       	push   $0x100
c0106232:	e8 38 5d 00 00       	call   c010bf6f <strcpy>
c0106237:	83 c4 10             	add    $0x10,%esp
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c010623a:	83 ec 08             	sub    $0x8,%esp
c010623d:	68 00 11 00 00       	push   $0x1100
c0106242:	68 00 01 00 00       	push   $0x100
c0106247:	e8 a4 5d 00 00       	call   c010bff0 <strcmp>
c010624c:	83 c4 10             	add    $0x10,%esp
c010624f:	85 c0                	test   %eax,%eax
c0106251:	74 19                	je     c010626c <check_boot_pgdir+0x26b>
c0106253:	68 4c dd 10 c0       	push   $0xc010dd4c
c0106258:	68 ad d8 10 c0       	push   $0xc010d8ad
c010625d:	68 b3 02 00 00       	push   $0x2b3
c0106262:	68 88 d8 10 c0       	push   $0xc010d888
c0106267:	e8 82 b5 ff ff       	call   c01017ee <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c010626c:	83 ec 0c             	sub    $0xc,%esp
c010626f:	ff 75 ec             	pushl  -0x14(%ebp)
c0106272:	e8 35 e7 ff ff       	call   c01049ac <page2kva>
c0106277:	83 c4 10             	add    $0x10,%esp
c010627a:	05 00 01 00 00       	add    $0x100,%eax
c010627f:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0106282:	83 ec 0c             	sub    $0xc,%esp
c0106285:	68 00 01 00 00       	push   $0x100
c010628a:	e8 80 5c 00 00       	call   c010bf0f <strlen>
c010628f:	83 c4 10             	add    $0x10,%esp
c0106292:	85 c0                	test   %eax,%eax
c0106294:	74 19                	je     c01062af <check_boot_pgdir+0x2ae>
c0106296:	68 84 dd 10 c0       	push   $0xc010dd84
c010629b:	68 ad d8 10 c0       	push   $0xc010d8ad
c01062a0:	68 b6 02 00 00       	push   $0x2b6
c01062a5:	68 88 d8 10 c0       	push   $0xc010d888
c01062aa:	e8 3f b5 ff ff       	call   c01017ee <__panic>

    free_page(p);
c01062af:	83 ec 08             	sub    $0x8,%esp
c01062b2:	6a 01                	push   $0x1
c01062b4:	ff 75 ec             	pushl  -0x14(%ebp)
c01062b7:	e8 1a ea ff ff       	call   c0104cd6 <free_pages>
c01062bc:	83 c4 10             	add    $0x10,%esp
    free_page(pde2page(boot_pgdir[0]));
c01062bf:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c01062c4:	8b 00                	mov    (%eax),%eax
c01062c6:	83 ec 0c             	sub    $0xc,%esp
c01062c9:	50                   	push   %eax
c01062ca:	e8 5c e7 ff ff       	call   c0104a2b <pde2page>
c01062cf:	83 c4 10             	add    $0x10,%esp
c01062d2:	83 ec 08             	sub    $0x8,%esp
c01062d5:	6a 01                	push   $0x1
c01062d7:	50                   	push   %eax
c01062d8:	e8 f9 e9 ff ff       	call   c0104cd6 <free_pages>
c01062dd:	83 c4 10             	add    $0x10,%esp
    boot_pgdir[0] = 0;
c01062e0:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c01062e5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    
    tlb_invalidate(boot_pgdir, 0x100);
c01062eb:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c01062f0:	83 ec 08             	sub    $0x8,%esp
c01062f3:	68 00 01 00 00       	push   $0x100
c01062f8:	50                   	push   %eax
c01062f9:	e8 68 f6 ff ff       	call   c0105966 <tlb_invalidate>
c01062fe:	83 c4 10             	add    $0x10,%esp
    tlb_invalidate(boot_pgdir, 0x100+PGSIZE);
c0106301:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c0106306:	83 ec 08             	sub    $0x8,%esp
c0106309:	68 00 11 00 00       	push   $0x1100
c010630e:	50                   	push   %eax
c010630f:	e8 52 f6 ff ff       	call   c0105966 <tlb_invalidate>
c0106314:	83 c4 10             	add    $0x10,%esp
    
    cprintf("check_boot_pgdir() succeeded!\n");
c0106317:	83 ec 0c             	sub    $0xc,%esp
c010631a:	68 a8 dd 10 c0       	push   $0xc010dda8
c010631f:	e8 8e 9f ff ff       	call   c01002b2 <cprintf>
c0106324:	83 c4 10             	add    $0x10,%esp
}
c0106327:	90                   	nop
c0106328:	c9                   	leave  
c0106329:	c3                   	ret    

c010632a <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c010632a:	f3 0f 1e fb          	endbr32 
c010632e:	55                   	push   %ebp
c010632f:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0106331:	8b 45 08             	mov    0x8(%ebp),%eax
c0106334:	83 e0 04             	and    $0x4,%eax
c0106337:	85 c0                	test   %eax,%eax
c0106339:	74 07                	je     c0106342 <perm2str+0x18>
c010633b:	b8 75 00 00 00       	mov    $0x75,%eax
c0106340:	eb 05                	jmp    c0106347 <perm2str+0x1d>
c0106342:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106347:	a2 08 60 1b c0       	mov    %al,0xc01b6008
    str[1] = 'r';
c010634c:	c6 05 09 60 1b c0 72 	movb   $0x72,0xc01b6009
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0106353:	8b 45 08             	mov    0x8(%ebp),%eax
c0106356:	83 e0 02             	and    $0x2,%eax
c0106359:	85 c0                	test   %eax,%eax
c010635b:	74 07                	je     c0106364 <perm2str+0x3a>
c010635d:	b8 77 00 00 00       	mov    $0x77,%eax
c0106362:	eb 05                	jmp    c0106369 <perm2str+0x3f>
c0106364:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106369:	a2 0a 60 1b c0       	mov    %al,0xc01b600a
    str[3] = '\0';
c010636e:	c6 05 0b 60 1b c0 00 	movb   $0x0,0xc01b600b
    return str;
c0106375:	b8 08 60 1b c0       	mov    $0xc01b6008,%eax
}
c010637a:	5d                   	pop    %ebp
c010637b:	c3                   	ret    

c010637c <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c010637c:	f3 0f 1e fb          	endbr32 
c0106380:	55                   	push   %ebp
c0106381:	89 e5                	mov    %esp,%ebp
c0106383:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0106386:	8b 45 10             	mov    0x10(%ebp),%eax
c0106389:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010638c:	72 0e                	jb     c010639c <get_pgtable_items+0x20>
        return 0;
c010638e:	b8 00 00 00 00       	mov    $0x0,%eax
c0106393:	e9 9a 00 00 00       	jmp    c0106432 <get_pgtable_items+0xb6>
    }
    while (start < right && !(table[start] & PTE_P)) {
        start ++;
c0106398:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    while (start < right && !(table[start] & PTE_P)) {
c010639c:	8b 45 10             	mov    0x10(%ebp),%eax
c010639f:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01063a2:	73 18                	jae    c01063bc <get_pgtable_items+0x40>
c01063a4:	8b 45 10             	mov    0x10(%ebp),%eax
c01063a7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01063ae:	8b 45 14             	mov    0x14(%ebp),%eax
c01063b1:	01 d0                	add    %edx,%eax
c01063b3:	8b 00                	mov    (%eax),%eax
c01063b5:	83 e0 01             	and    $0x1,%eax
c01063b8:	85 c0                	test   %eax,%eax
c01063ba:	74 dc                	je     c0106398 <get_pgtable_items+0x1c>
    }
    if (start < right) {
c01063bc:	8b 45 10             	mov    0x10(%ebp),%eax
c01063bf:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01063c2:	73 69                	jae    c010642d <get_pgtable_items+0xb1>
        if (left_store != NULL) {
c01063c4:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01063c8:	74 08                	je     c01063d2 <get_pgtable_items+0x56>
            *left_store = start;
c01063ca:	8b 45 18             	mov    0x18(%ebp),%eax
c01063cd:	8b 55 10             	mov    0x10(%ebp),%edx
c01063d0:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c01063d2:	8b 45 10             	mov    0x10(%ebp),%eax
c01063d5:	8d 50 01             	lea    0x1(%eax),%edx
c01063d8:	89 55 10             	mov    %edx,0x10(%ebp)
c01063db:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01063e2:	8b 45 14             	mov    0x14(%ebp),%eax
c01063e5:	01 d0                	add    %edx,%eax
c01063e7:	8b 00                	mov    (%eax),%eax
c01063e9:	83 e0 07             	and    $0x7,%eax
c01063ec:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c01063ef:	eb 04                	jmp    c01063f5 <get_pgtable_items+0x79>
            start ++;
c01063f1:	83 45 10 01          	addl   $0x1,0x10(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c01063f5:	8b 45 10             	mov    0x10(%ebp),%eax
c01063f8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01063fb:	73 1d                	jae    c010641a <get_pgtable_items+0x9e>
c01063fd:	8b 45 10             	mov    0x10(%ebp),%eax
c0106400:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106407:	8b 45 14             	mov    0x14(%ebp),%eax
c010640a:	01 d0                	add    %edx,%eax
c010640c:	8b 00                	mov    (%eax),%eax
c010640e:	83 e0 07             	and    $0x7,%eax
c0106411:	89 c2                	mov    %eax,%edx
c0106413:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106416:	39 c2                	cmp    %eax,%edx
c0106418:	74 d7                	je     c01063f1 <get_pgtable_items+0x75>
        }
        if (right_store != NULL) {
c010641a:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010641e:	74 08                	je     c0106428 <get_pgtable_items+0xac>
            *right_store = start;
c0106420:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0106423:	8b 55 10             	mov    0x10(%ebp),%edx
c0106426:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0106428:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010642b:	eb 05                	jmp    c0106432 <get_pgtable_items+0xb6>
    }
    return 0;
c010642d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106432:	c9                   	leave  
c0106433:	c3                   	ret    

c0106434 <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0106434:	f3 0f 1e fb          	endbr32 
c0106438:	55                   	push   %ebp
c0106439:	89 e5                	mov    %esp,%ebp
c010643b:	57                   	push   %edi
c010643c:	56                   	push   %esi
c010643d:	53                   	push   %ebx
c010643e:	83 ec 2c             	sub    $0x2c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0106441:	83 ec 0c             	sub    $0xc,%esp
c0106444:	68 c8 dd 10 c0       	push   $0xc010ddc8
c0106449:	e8 64 9e ff ff       	call   c01002b2 <cprintf>
c010644e:	83 c4 10             	add    $0x10,%esp
    size_t left, right = 0, perm;
c0106451:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106458:	e9 e1 00 00 00       	jmp    c010653e <print_pgdir+0x10a>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c010645d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106460:	83 ec 0c             	sub    $0xc,%esp
c0106463:	50                   	push   %eax
c0106464:	e8 c1 fe ff ff       	call   c010632a <perm2str>
c0106469:	83 c4 10             	add    $0x10,%esp
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c010646c:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010646f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106472:	29 d1                	sub    %edx,%ecx
c0106474:	89 ca                	mov    %ecx,%edx
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106476:	89 d6                	mov    %edx,%esi
c0106478:	c1 e6 16             	shl    $0x16,%esi
c010647b:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010647e:	89 d3                	mov    %edx,%ebx
c0106480:	c1 e3 16             	shl    $0x16,%ebx
c0106483:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106486:	89 d1                	mov    %edx,%ecx
c0106488:	c1 e1 16             	shl    $0x16,%ecx
c010648b:	8b 7d dc             	mov    -0x24(%ebp),%edi
c010648e:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106491:	29 d7                	sub    %edx,%edi
c0106493:	89 fa                	mov    %edi,%edx
c0106495:	83 ec 08             	sub    $0x8,%esp
c0106498:	50                   	push   %eax
c0106499:	56                   	push   %esi
c010649a:	53                   	push   %ebx
c010649b:	51                   	push   %ecx
c010649c:	52                   	push   %edx
c010649d:	68 f9 dd 10 c0       	push   $0xc010ddf9
c01064a2:	e8 0b 9e ff ff       	call   c01002b2 <cprintf>
c01064a7:	83 c4 20             	add    $0x20,%esp
        size_t l, r = left * NPTEENTRY;
c01064aa:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01064ad:	c1 e0 0a             	shl    $0xa,%eax
c01064b0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c01064b3:	eb 4d                	jmp    c0106502 <print_pgdir+0xce>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c01064b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01064b8:	83 ec 0c             	sub    $0xc,%esp
c01064bb:	50                   	push   %eax
c01064bc:	e8 69 fe ff ff       	call   c010632a <perm2str>
c01064c1:	83 c4 10             	add    $0x10,%esp
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c01064c4:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c01064c7:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01064ca:	29 d1                	sub    %edx,%ecx
c01064cc:	89 ca                	mov    %ecx,%edx
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c01064ce:	89 d6                	mov    %edx,%esi
c01064d0:	c1 e6 0c             	shl    $0xc,%esi
c01064d3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01064d6:	89 d3                	mov    %edx,%ebx
c01064d8:	c1 e3 0c             	shl    $0xc,%ebx
c01064db:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01064de:	89 d1                	mov    %edx,%ecx
c01064e0:	c1 e1 0c             	shl    $0xc,%ecx
c01064e3:	8b 7d d4             	mov    -0x2c(%ebp),%edi
c01064e6:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01064e9:	29 d7                	sub    %edx,%edi
c01064eb:	89 fa                	mov    %edi,%edx
c01064ed:	83 ec 08             	sub    $0x8,%esp
c01064f0:	50                   	push   %eax
c01064f1:	56                   	push   %esi
c01064f2:	53                   	push   %ebx
c01064f3:	51                   	push   %ecx
c01064f4:	52                   	push   %edx
c01064f5:	68 18 de 10 c0       	push   $0xc010de18
c01064fa:	e8 b3 9d ff ff       	call   c01002b2 <cprintf>
c01064ff:	83 c4 20             	add    $0x20,%esp
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106502:	be 00 00 c0 fa       	mov    $0xfac00000,%esi
c0106507:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010650a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010650d:	89 d3                	mov    %edx,%ebx
c010650f:	c1 e3 0a             	shl    $0xa,%ebx
c0106512:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106515:	89 d1                	mov    %edx,%ecx
c0106517:	c1 e1 0a             	shl    $0xa,%ecx
c010651a:	83 ec 08             	sub    $0x8,%esp
c010651d:	8d 55 d4             	lea    -0x2c(%ebp),%edx
c0106520:	52                   	push   %edx
c0106521:	8d 55 d8             	lea    -0x28(%ebp),%edx
c0106524:	52                   	push   %edx
c0106525:	56                   	push   %esi
c0106526:	50                   	push   %eax
c0106527:	53                   	push   %ebx
c0106528:	51                   	push   %ecx
c0106529:	e8 4e fe ff ff       	call   c010637c <get_pgtable_items>
c010652e:	83 c4 20             	add    $0x20,%esp
c0106531:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106534:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106538:	0f 85 77 ff ff ff    	jne    c01064b5 <print_pgdir+0x81>
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c010653e:	b9 00 b0 fe fa       	mov    $0xfafeb000,%ecx
c0106543:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106546:	83 ec 08             	sub    $0x8,%esp
c0106549:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010654c:	52                   	push   %edx
c010654d:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0106550:	52                   	push   %edx
c0106551:	51                   	push   %ecx
c0106552:	50                   	push   %eax
c0106553:	68 00 04 00 00       	push   $0x400
c0106558:	6a 00                	push   $0x0
c010655a:	e8 1d fe ff ff       	call   c010637c <get_pgtable_items>
c010655f:	83 c4 20             	add    $0x20,%esp
c0106562:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106565:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106569:	0f 85 ee fe ff ff    	jne    c010645d <print_pgdir+0x29>
        }
    }
    cprintf("--------------------- END ---------------------\n");
c010656f:	83 ec 0c             	sub    $0xc,%esp
c0106572:	68 3c de 10 c0       	push   $0xc010de3c
c0106577:	e8 36 9d ff ff       	call   c01002b2 <cprintf>
c010657c:	83 c4 10             	add    $0x10,%esp
}
c010657f:	90                   	nop
c0106580:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0106583:	5b                   	pop    %ebx
c0106584:	5e                   	pop    %esi
c0106585:	5f                   	pop    %edi
c0106586:	5d                   	pop    %ebp
c0106587:	c3                   	ret    

c0106588 <lock_init>:
#define local_intr_restore(x)   __intr_restore(x);

typedef volatile bool lock_t;

static inline void
lock_init(lock_t *lock) {
c0106588:	55                   	push   %ebp
c0106589:	89 e5                	mov    %esp,%ebp
    *lock = 0;
c010658b:	8b 45 08             	mov    0x8(%ebp),%eax
c010658e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c0106594:	90                   	nop
c0106595:	5d                   	pop    %ebp
c0106596:	c3                   	ret    

c0106597 <mm_count>:
bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);

static inline int
mm_count(struct mm_struct *mm) {
c0106597:	55                   	push   %ebp
c0106598:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c010659a:	8b 45 08             	mov    0x8(%ebp),%eax
c010659d:	8b 40 18             	mov    0x18(%eax),%eax
}
c01065a0:	5d                   	pop    %ebp
c01065a1:	c3                   	ret    

c01065a2 <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c01065a2:	55                   	push   %ebp
c01065a3:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c01065a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01065a8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01065ab:	89 50 18             	mov    %edx,0x18(%eax)
}
c01065ae:	90                   	nop
c01065af:	5d                   	pop    %ebp
c01065b0:	c3                   	ret    

c01065b1 <pa2page>:
pa2page(uintptr_t pa) {
c01065b1:	55                   	push   %ebp
c01065b2:	89 e5                	mov    %esp,%ebp
c01065b4:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c01065b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01065ba:	c1 e8 0c             	shr    $0xc,%eax
c01065bd:	89 c2                	mov    %eax,%edx
c01065bf:	a1 80 5f 1b c0       	mov    0xc01b5f80,%eax
c01065c4:	39 c2                	cmp    %eax,%edx
c01065c6:	72 14                	jb     c01065dc <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c01065c8:	83 ec 04             	sub    $0x4,%esp
c01065cb:	68 70 de 10 c0       	push   $0xc010de70
c01065d0:	6a 5e                	push   $0x5e
c01065d2:	68 8f de 10 c0       	push   $0xc010de8f
c01065d7:	e8 12 b2 ff ff       	call   c01017ee <__panic>
    return &pages[PPN(pa)];
c01065dc:	8b 0d 60 80 1b c0    	mov    0xc01b8060,%ecx
c01065e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01065e5:	c1 e8 0c             	shr    $0xc,%eax
c01065e8:	89 c2                	mov    %eax,%edx
c01065ea:	89 d0                	mov    %edx,%eax
c01065ec:	c1 e0 03             	shl    $0x3,%eax
c01065ef:	01 d0                	add    %edx,%eax
c01065f1:	c1 e0 02             	shl    $0x2,%eax
c01065f4:	01 c8                	add    %ecx,%eax
}
c01065f6:	c9                   	leave  
c01065f7:	c3                   	ret    

c01065f8 <pde2page>:
pde2page(pde_t pde) {
c01065f8:	55                   	push   %ebp
c01065f9:	89 e5                	mov    %esp,%ebp
c01065fb:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c01065fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0106601:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106606:	83 ec 0c             	sub    $0xc,%esp
c0106609:	50                   	push   %eax
c010660a:	e8 a2 ff ff ff       	call   c01065b1 <pa2page>
c010660f:	83 c4 10             	add    $0x10,%esp
}
c0106612:	c9                   	leave  
c0106613:	c3                   	ret    

c0106614 <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0106614:	f3 0f 1e fb          	endbr32 
c0106618:	55                   	push   %ebp
c0106619:	89 e5                	mov    %esp,%ebp
c010661b:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c010661e:	83 ec 0c             	sub    $0xc,%esp
c0106621:	6a 20                	push   $0x20
c0106623:	e8 1a 22 00 00       	call   c0108842 <kmalloc>
c0106628:	83 c4 10             	add    $0x10,%esp
c010662b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c010662e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106632:	74 7e                	je     c01066b2 <mm_create+0x9e>
        list_init(&(mm->mmap_list));
c0106634:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106637:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010663a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010663d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0106640:	89 50 04             	mov    %edx,0x4(%eax)
c0106643:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106646:	8b 50 04             	mov    0x4(%eax),%edx
c0106649:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010664c:	89 10                	mov    %edx,(%eax)
}
c010664e:	90                   	nop
        mm->mmap_cache = NULL;
c010664f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106652:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c0106659:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010665c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c0106663:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106666:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c010666d:	a1 10 60 1b c0       	mov    0xc01b6010,%eax
c0106672:	85 c0                	test   %eax,%eax
c0106674:	74 10                	je     c0106686 <mm_create+0x72>
c0106676:	83 ec 0c             	sub    $0xc,%esp
c0106679:	ff 75 f4             	pushl  -0xc(%ebp)
c010667c:	e8 93 11 00 00       	call   c0107814 <swap_init_mm>
c0106681:	83 c4 10             	add    $0x10,%esp
c0106684:	eb 0a                	jmp    c0106690 <mm_create+0x7c>
        else mm->sm_priv = NULL;
c0106686:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106689:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c0106690:	83 ec 08             	sub    $0x8,%esp
c0106693:	6a 00                	push   $0x0
c0106695:	ff 75 f4             	pushl  -0xc(%ebp)
c0106698:	e8 05 ff ff ff       	call   c01065a2 <set_mm_count>
c010669d:	83 c4 10             	add    $0x10,%esp
        lock_init(&(mm->mm_lock));
c01066a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01066a3:	83 c0 1c             	add    $0x1c,%eax
c01066a6:	83 ec 0c             	sub    $0xc,%esp
c01066a9:	50                   	push   %eax
c01066aa:	e8 d9 fe ff ff       	call   c0106588 <lock_init>
c01066af:	83 c4 10             	add    $0x10,%esp
    }    
    return mm;
c01066b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01066b5:	c9                   	leave  
c01066b6:	c3                   	ret    

c01066b7 <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c01066b7:	f3 0f 1e fb          	endbr32 
c01066bb:	55                   	push   %ebp
c01066bc:	89 e5                	mov    %esp,%ebp
c01066be:	83 ec 18             	sub    $0x18,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c01066c1:	83 ec 0c             	sub    $0xc,%esp
c01066c4:	6a 18                	push   $0x18
c01066c6:	e8 77 21 00 00       	call   c0108842 <kmalloc>
c01066cb:	83 c4 10             	add    $0x10,%esp
c01066ce:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c01066d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01066d5:	74 1b                	je     c01066f2 <vma_create+0x3b>
        vma->vm_start = vm_start;
c01066d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01066da:	8b 55 08             	mov    0x8(%ebp),%edx
c01066dd:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c01066e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01066e3:	8b 55 0c             	mov    0xc(%ebp),%edx
c01066e6:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c01066e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01066ec:	8b 55 10             	mov    0x10(%ebp),%edx
c01066ef:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c01066f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01066f5:	c9                   	leave  
c01066f6:	c3                   	ret    

c01066f7 <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c01066f7:	f3 0f 1e fb          	endbr32 
c01066fb:	55                   	push   %ebp
c01066fc:	89 e5                	mov    %esp,%ebp
c01066fe:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c0106701:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c0106708:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010670c:	0f 84 95 00 00 00    	je     c01067a7 <find_vma+0xb0>
        vma = mm->mmap_cache;
c0106712:	8b 45 08             	mov    0x8(%ebp),%eax
c0106715:	8b 40 08             	mov    0x8(%eax),%eax
c0106718:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c010671b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010671f:	74 16                	je     c0106737 <find_vma+0x40>
c0106721:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106724:	8b 40 04             	mov    0x4(%eax),%eax
c0106727:	39 45 0c             	cmp    %eax,0xc(%ebp)
c010672a:	72 0b                	jb     c0106737 <find_vma+0x40>
c010672c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010672f:	8b 40 08             	mov    0x8(%eax),%eax
c0106732:	39 45 0c             	cmp    %eax,0xc(%ebp)
c0106735:	72 61                	jb     c0106798 <find_vma+0xa1>
                bool found = 0;
c0106737:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c010673e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106741:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106744:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106747:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c010674a:	eb 28                	jmp    c0106774 <find_vma+0x7d>
                    vma = le2vma(le, list_link);
c010674c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010674f:	83 e8 10             	sub    $0x10,%eax
c0106752:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c0106755:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106758:	8b 40 04             	mov    0x4(%eax),%eax
c010675b:	39 45 0c             	cmp    %eax,0xc(%ebp)
c010675e:	72 14                	jb     c0106774 <find_vma+0x7d>
c0106760:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106763:	8b 40 08             	mov    0x8(%eax),%eax
c0106766:	39 45 0c             	cmp    %eax,0xc(%ebp)
c0106769:	73 09                	jae    c0106774 <find_vma+0x7d>
                        found = 1;
c010676b:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c0106772:	eb 17                	jmp    c010678b <find_vma+0x94>
c0106774:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106777:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010677a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010677d:	8b 40 04             	mov    0x4(%eax),%eax
                while ((le = list_next(le)) != list) {
c0106780:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106783:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106786:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0106789:	75 c1                	jne    c010674c <find_vma+0x55>
                    }
                }
                if (!found) {
c010678b:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c010678f:	75 07                	jne    c0106798 <find_vma+0xa1>
                    vma = NULL;
c0106791:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c0106798:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010679c:	74 09                	je     c01067a7 <find_vma+0xb0>
            mm->mmap_cache = vma;
c010679e:	8b 45 08             	mov    0x8(%ebp),%eax
c01067a1:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01067a4:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c01067a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c01067aa:	c9                   	leave  
c01067ab:	c3                   	ret    

c01067ac <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c01067ac:	55                   	push   %ebp
c01067ad:	89 e5                	mov    %esp,%ebp
c01067af:	83 ec 08             	sub    $0x8,%esp
    assert(prev->vm_start < prev->vm_end);
c01067b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01067b5:	8b 50 04             	mov    0x4(%eax),%edx
c01067b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01067bb:	8b 40 08             	mov    0x8(%eax),%eax
c01067be:	39 c2                	cmp    %eax,%edx
c01067c0:	72 16                	jb     c01067d8 <check_vma_overlap+0x2c>
c01067c2:	68 9d de 10 c0       	push   $0xc010de9d
c01067c7:	68 bb de 10 c0       	push   $0xc010debb
c01067cc:	6a 6b                	push   $0x6b
c01067ce:	68 d0 de 10 c0       	push   $0xc010ded0
c01067d3:	e8 16 b0 ff ff       	call   c01017ee <__panic>
    assert(prev->vm_end <= next->vm_start);
c01067d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01067db:	8b 50 08             	mov    0x8(%eax),%edx
c01067de:	8b 45 0c             	mov    0xc(%ebp),%eax
c01067e1:	8b 40 04             	mov    0x4(%eax),%eax
c01067e4:	39 c2                	cmp    %eax,%edx
c01067e6:	76 16                	jbe    c01067fe <check_vma_overlap+0x52>
c01067e8:	68 e0 de 10 c0       	push   $0xc010dee0
c01067ed:	68 bb de 10 c0       	push   $0xc010debb
c01067f2:	6a 6c                	push   $0x6c
c01067f4:	68 d0 de 10 c0       	push   $0xc010ded0
c01067f9:	e8 f0 af ff ff       	call   c01017ee <__panic>
    assert(next->vm_start < next->vm_end);
c01067fe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106801:	8b 50 04             	mov    0x4(%eax),%edx
c0106804:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106807:	8b 40 08             	mov    0x8(%eax),%eax
c010680a:	39 c2                	cmp    %eax,%edx
c010680c:	72 16                	jb     c0106824 <check_vma_overlap+0x78>
c010680e:	68 ff de 10 c0       	push   $0xc010deff
c0106813:	68 bb de 10 c0       	push   $0xc010debb
c0106818:	6a 6d                	push   $0x6d
c010681a:	68 d0 de 10 c0       	push   $0xc010ded0
c010681f:	e8 ca af ff ff       	call   c01017ee <__panic>
}
c0106824:	90                   	nop
c0106825:	c9                   	leave  
c0106826:	c3                   	ret    

c0106827 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c0106827:	f3 0f 1e fb          	endbr32 
c010682b:	55                   	push   %ebp
c010682c:	89 e5                	mov    %esp,%ebp
c010682e:	83 ec 38             	sub    $0x38,%esp
    assert(vma->vm_start < vma->vm_end);
c0106831:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106834:	8b 50 04             	mov    0x4(%eax),%edx
c0106837:	8b 45 0c             	mov    0xc(%ebp),%eax
c010683a:	8b 40 08             	mov    0x8(%eax),%eax
c010683d:	39 c2                	cmp    %eax,%edx
c010683f:	72 16                	jb     c0106857 <insert_vma_struct+0x30>
c0106841:	68 1d df 10 c0       	push   $0xc010df1d
c0106846:	68 bb de 10 c0       	push   $0xc010debb
c010684b:	6a 74                	push   $0x74
c010684d:	68 d0 de 10 c0       	push   $0xc010ded0
c0106852:	e8 97 af ff ff       	call   c01017ee <__panic>
    list_entry_t *list = &(mm->mmap_list);
c0106857:	8b 45 08             	mov    0x8(%ebp),%eax
c010685a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c010685d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106860:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c0106863:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106866:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c0106869:	eb 1f                	jmp    c010688a <insert_vma_struct+0x63>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c010686b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010686e:	83 e8 10             	sub    $0x10,%eax
c0106871:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c0106874:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106877:	8b 50 04             	mov    0x4(%eax),%edx
c010687a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010687d:	8b 40 04             	mov    0x4(%eax),%eax
c0106880:	39 c2                	cmp    %eax,%edx
c0106882:	77 1f                	ja     c01068a3 <insert_vma_struct+0x7c>
                break;
            }
            le_prev = le;
c0106884:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106887:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010688a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010688d:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0106890:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106893:	8b 40 04             	mov    0x4(%eax),%eax
        while ((le = list_next(le)) != list) {
c0106896:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106899:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010689c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010689f:	75 ca                	jne    c010686b <insert_vma_struct+0x44>
c01068a1:	eb 01                	jmp    c01068a4 <insert_vma_struct+0x7d>
                break;
c01068a3:	90                   	nop
c01068a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01068a7:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01068aa:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01068ad:	8b 40 04             	mov    0x4(%eax),%eax
        }

    le_next = list_next(le_prev);
c01068b0:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    /* check overlap */
    if (le_prev != list) {
c01068b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01068b6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01068b9:	74 15                	je     c01068d0 <insert_vma_struct+0xa9>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c01068bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01068be:	83 e8 10             	sub    $0x10,%eax
c01068c1:	83 ec 08             	sub    $0x8,%esp
c01068c4:	ff 75 0c             	pushl  0xc(%ebp)
c01068c7:	50                   	push   %eax
c01068c8:	e8 df fe ff ff       	call   c01067ac <check_vma_overlap>
c01068cd:	83 c4 10             	add    $0x10,%esp
    }
    if (le_next != list) {
c01068d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01068d3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01068d6:	74 15                	je     c01068ed <insert_vma_struct+0xc6>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c01068d8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01068db:	83 e8 10             	sub    $0x10,%eax
c01068de:	83 ec 08             	sub    $0x8,%esp
c01068e1:	50                   	push   %eax
c01068e2:	ff 75 0c             	pushl  0xc(%ebp)
c01068e5:	e8 c2 fe ff ff       	call   c01067ac <check_vma_overlap>
c01068ea:	83 c4 10             	add    $0x10,%esp
    }

    vma->vm_mm = mm;
c01068ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01068f0:	8b 55 08             	mov    0x8(%ebp),%edx
c01068f3:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c01068f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01068f8:	8d 50 10             	lea    0x10(%eax),%edx
c01068fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01068fe:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0106901:	89 55 d4             	mov    %edx,-0x2c(%ebp)
    __list_add(elm, listelm, listelm->next);
c0106904:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106907:	8b 40 04             	mov    0x4(%eax),%eax
c010690a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010690d:	89 55 d0             	mov    %edx,-0x30(%ebp)
c0106910:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106913:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0106916:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0106919:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010691c:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010691f:	89 10                	mov    %edx,(%eax)
c0106921:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0106924:	8b 10                	mov    (%eax),%edx
c0106926:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0106929:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010692c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010692f:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0106932:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0106935:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106938:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010693b:	89 10                	mov    %edx,(%eax)
}
c010693d:	90                   	nop
}
c010693e:	90                   	nop

    mm->map_count ++;
c010693f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106942:	8b 40 10             	mov    0x10(%eax),%eax
c0106945:	8d 50 01             	lea    0x1(%eax),%edx
c0106948:	8b 45 08             	mov    0x8(%ebp),%eax
c010694b:	89 50 10             	mov    %edx,0x10(%eax)
}
c010694e:	90                   	nop
c010694f:	c9                   	leave  
c0106950:	c3                   	ret    

c0106951 <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c0106951:	f3 0f 1e fb          	endbr32 
c0106955:	55                   	push   %ebp
c0106956:	89 e5                	mov    %esp,%ebp
c0106958:	83 ec 28             	sub    $0x28,%esp
    assert(mm_count(mm) == 0);
c010695b:	ff 75 08             	pushl  0x8(%ebp)
c010695e:	e8 34 fc ff ff       	call   c0106597 <mm_count>
c0106963:	83 c4 04             	add    $0x4,%esp
c0106966:	85 c0                	test   %eax,%eax
c0106968:	74 19                	je     c0106983 <mm_destroy+0x32>
c010696a:	68 39 df 10 c0       	push   $0xc010df39
c010696f:	68 bb de 10 c0       	push   $0xc010debb
c0106974:	68 94 00 00 00       	push   $0x94
c0106979:	68 d0 de 10 c0       	push   $0xc010ded0
c010697e:	e8 6b ae ff ff       	call   c01017ee <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c0106983:	8b 45 08             	mov    0x8(%ebp),%eax
c0106986:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c0106989:	eb 3c                	jmp    c01069c7 <mm_destroy+0x76>
c010698b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010698e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    __list_del(listelm->prev, listelm->next);
c0106991:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106994:	8b 40 04             	mov    0x4(%eax),%eax
c0106997:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010699a:	8b 12                	mov    (%edx),%edx
c010699c:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010699f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01069a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01069a5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01069a8:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01069ab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01069ae:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01069b1:	89 10                	mov    %edx,(%eax)
}
c01069b3:	90                   	nop
}
c01069b4:	90                   	nop
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c01069b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01069b8:	83 e8 10             	sub    $0x10,%eax
c01069bb:	83 ec 0c             	sub    $0xc,%esp
c01069be:	50                   	push   %eax
c01069bf:	e8 9a 1e 00 00       	call   c010885e <kfree>
c01069c4:	83 c4 10             	add    $0x10,%esp
c01069c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01069ca:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return listelm->next;
c01069cd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01069d0:	8b 40 04             	mov    0x4(%eax),%eax
    while ((le = list_next(list)) != list) {
c01069d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01069d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01069d9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01069dc:	75 ad                	jne    c010698b <mm_destroy+0x3a>
    }
    kfree(mm); //kfree mm
c01069de:	83 ec 0c             	sub    $0xc,%esp
c01069e1:	ff 75 08             	pushl  0x8(%ebp)
c01069e4:	e8 75 1e 00 00       	call   c010885e <kfree>
c01069e9:	83 c4 10             	add    $0x10,%esp
    mm=NULL;
c01069ec:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c01069f3:	90                   	nop
c01069f4:	c9                   	leave  
c01069f5:	c3                   	ret    

c01069f6 <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c01069f6:	f3 0f 1e fb          	endbr32 
c01069fa:	55                   	push   %ebp
c01069fb:	89 e5                	mov    %esp,%ebp
c01069fd:	83 ec 28             	sub    $0x28,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c0106a00:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106a03:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106a06:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a09:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106a0e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106a11:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c0106a18:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106a1b:	8b 45 10             	mov    0x10(%ebp),%eax
c0106a1e:	01 c2                	add    %eax,%edx
c0106a20:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106a23:	01 d0                	add    %edx,%eax
c0106a25:	83 e8 01             	sub    $0x1,%eax
c0106a28:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106a2b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106a2e:	ba 00 00 00 00       	mov    $0x0,%edx
c0106a33:	f7 75 e8             	divl   -0x18(%ebp)
c0106a36:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106a39:	29 d0                	sub    %edx,%eax
c0106a3b:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c0106a3e:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c0106a45:	76 11                	jbe    c0106a58 <mm_map+0x62>
c0106a47:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106a4a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0106a4d:	73 09                	jae    c0106a58 <mm_map+0x62>
c0106a4f:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c0106a56:	76 0a                	jbe    c0106a62 <mm_map+0x6c>
        return -E_INVAL;
c0106a58:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0106a5d:	e9 9e 00 00 00       	jmp    c0106b00 <mm_map+0x10a>
    }

    assert(mm != NULL);
c0106a62:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106a66:	75 19                	jne    c0106a81 <mm_map+0x8b>
c0106a68:	68 4b df 10 c0       	push   $0xc010df4b
c0106a6d:	68 bb de 10 c0       	push   $0xc010debb
c0106a72:	68 a7 00 00 00       	push   $0xa7
c0106a77:	68 d0 de 10 c0       	push   $0xc010ded0
c0106a7c:	e8 6d ad ff ff       	call   c01017ee <__panic>

    int ret = -E_INVAL;
c0106a81:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c0106a88:	83 ec 08             	sub    $0x8,%esp
c0106a8b:	ff 75 ec             	pushl  -0x14(%ebp)
c0106a8e:	ff 75 08             	pushl  0x8(%ebp)
c0106a91:	e8 61 fc ff ff       	call   c01066f7 <find_vma>
c0106a96:	83 c4 10             	add    $0x10,%esp
c0106a99:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106a9c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0106aa0:	74 0b                	je     c0106aad <mm_map+0xb7>
c0106aa2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106aa5:	8b 40 04             	mov    0x4(%eax),%eax
c0106aa8:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c0106aab:	77 4c                	ja     c0106af9 <mm_map+0x103>
        goto out;
    }
    ret = -E_NO_MEM;
c0106aad:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c0106ab4:	83 ec 04             	sub    $0x4,%esp
c0106ab7:	ff 75 14             	pushl  0x14(%ebp)
c0106aba:	ff 75 e0             	pushl  -0x20(%ebp)
c0106abd:	ff 75 ec             	pushl  -0x14(%ebp)
c0106ac0:	e8 f2 fb ff ff       	call   c01066b7 <vma_create>
c0106ac5:	83 c4 10             	add    $0x10,%esp
c0106ac8:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106acb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0106acf:	74 2b                	je     c0106afc <mm_map+0x106>
        goto out;
    }
    insert_vma_struct(mm, vma);
c0106ad1:	83 ec 08             	sub    $0x8,%esp
c0106ad4:	ff 75 dc             	pushl  -0x24(%ebp)
c0106ad7:	ff 75 08             	pushl  0x8(%ebp)
c0106ada:	e8 48 fd ff ff       	call   c0106827 <insert_vma_struct>
c0106adf:	83 c4 10             	add    $0x10,%esp
    if (vma_store != NULL) {
c0106ae2:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0106ae6:	74 08                	je     c0106af0 <mm_map+0xfa>
        *vma_store = vma;
c0106ae8:	8b 45 18             	mov    0x18(%ebp),%eax
c0106aeb:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106aee:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c0106af0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106af7:	eb 04                	jmp    c0106afd <mm_map+0x107>
        goto out;
c0106af9:	90                   	nop
c0106afa:	eb 01                	jmp    c0106afd <mm_map+0x107>
        goto out;
c0106afc:	90                   	nop

out:
    return ret;
c0106afd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106b00:	c9                   	leave  
c0106b01:	c3                   	ret    

c0106b02 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c0106b02:	f3 0f 1e fb          	endbr32 
c0106b06:	55                   	push   %ebp
c0106b07:	89 e5                	mov    %esp,%ebp
c0106b09:	53                   	push   %ebx
c0106b0a:	83 ec 24             	sub    $0x24,%esp
    assert(to != NULL && from != NULL);
c0106b0d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106b11:	74 06                	je     c0106b19 <dup_mmap+0x17>
c0106b13:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0106b17:	75 19                	jne    c0106b32 <dup_mmap+0x30>
c0106b19:	68 56 df 10 c0       	push   $0xc010df56
c0106b1e:	68 bb de 10 c0       	push   $0xc010debb
c0106b23:	68 c0 00 00 00       	push   $0xc0
c0106b28:	68 d0 de 10 c0       	push   $0xc010ded0
c0106b2d:	e8 bc ac ff ff       	call   c01017ee <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c0106b32:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106b35:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106b38:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106b3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c0106b3e:	e9 86 00 00 00       	jmp    c0106bc9 <dup_mmap+0xc7>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c0106b43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106b46:	83 e8 10             	sub    $0x10,%eax
c0106b49:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c0106b4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106b4f:	8b 48 0c             	mov    0xc(%eax),%ecx
c0106b52:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106b55:	8b 50 08             	mov    0x8(%eax),%edx
c0106b58:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106b5b:	8b 40 04             	mov    0x4(%eax),%eax
c0106b5e:	83 ec 04             	sub    $0x4,%esp
c0106b61:	51                   	push   %ecx
c0106b62:	52                   	push   %edx
c0106b63:	50                   	push   %eax
c0106b64:	e8 4e fb ff ff       	call   c01066b7 <vma_create>
c0106b69:	83 c4 10             	add    $0x10,%esp
c0106b6c:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c0106b6f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106b73:	75 07                	jne    c0106b7c <dup_mmap+0x7a>
            return -E_NO_MEM;
c0106b75:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0106b7a:	eb 6c                	jmp    c0106be8 <dup_mmap+0xe6>
        }

        insert_vma_struct(to, nvma);
c0106b7c:	83 ec 08             	sub    $0x8,%esp
c0106b7f:	ff 75 e8             	pushl  -0x18(%ebp)
c0106b82:	ff 75 08             	pushl  0x8(%ebp)
c0106b85:	e8 9d fc ff ff       	call   c0106827 <insert_vma_struct>
c0106b8a:	83 c4 10             	add    $0x10,%esp

        bool share = 0;
c0106b8d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c0106b94:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106b97:	8b 58 08             	mov    0x8(%eax),%ebx
c0106b9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106b9d:	8b 48 04             	mov    0x4(%eax),%ecx
c0106ba0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106ba3:	8b 50 0c             	mov    0xc(%eax),%edx
c0106ba6:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ba9:	8b 40 0c             	mov    0xc(%eax),%eax
c0106bac:	83 ec 0c             	sub    $0xc,%esp
c0106baf:	ff 75 e4             	pushl  -0x1c(%ebp)
c0106bb2:	53                   	push   %ebx
c0106bb3:	51                   	push   %ecx
c0106bb4:	52                   	push   %edx
c0106bb5:	50                   	push   %eax
c0106bb6:	e8 d4 ea ff ff       	call   c010568f <copy_range>
c0106bbb:	83 c4 20             	add    $0x20,%esp
c0106bbe:	85 c0                	test   %eax,%eax
c0106bc0:	74 07                	je     c0106bc9 <dup_mmap+0xc7>
            return -E_NO_MEM;
c0106bc2:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0106bc7:	eb 1f                	jmp    c0106be8 <dup_mmap+0xe6>
c0106bc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106bcc:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return listelm->prev;
c0106bcf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106bd2:	8b 00                	mov    (%eax),%eax
    while ((le = list_prev(le)) != list) {
c0106bd4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106bd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106bda:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0106bdd:	0f 85 60 ff ff ff    	jne    c0106b43 <dup_mmap+0x41>
        }
    }
    return 0;
c0106be3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106be8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0106beb:	c9                   	leave  
c0106bec:	c3                   	ret    

c0106bed <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c0106bed:	f3 0f 1e fb          	endbr32 
c0106bf1:	55                   	push   %ebp
c0106bf2:	89 e5                	mov    %esp,%ebp
c0106bf4:	83 ec 28             	sub    $0x28,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c0106bf7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106bfb:	74 0f                	je     c0106c0c <exit_mmap+0x1f>
c0106bfd:	ff 75 08             	pushl  0x8(%ebp)
c0106c00:	e8 92 f9 ff ff       	call   c0106597 <mm_count>
c0106c05:	83 c4 04             	add    $0x4,%esp
c0106c08:	85 c0                	test   %eax,%eax
c0106c0a:	74 19                	je     c0106c25 <exit_mmap+0x38>
c0106c0c:	68 74 df 10 c0       	push   $0xc010df74
c0106c11:	68 bb de 10 c0       	push   $0xc010debb
c0106c16:	68 d6 00 00 00       	push   $0xd6
c0106c1b:	68 d0 de 10 c0       	push   $0xc010ded0
c0106c20:	e8 c9 ab ff ff       	call   c01017ee <__panic>
    pde_t *pgdir = mm->pgdir;
c0106c25:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c28:	8b 40 0c             	mov    0xc(%eax),%eax
c0106c2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c0106c2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c31:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106c34:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106c37:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0106c3a:	eb 25                	jmp    c0106c61 <exit_mmap+0x74>
        struct vma_struct *vma = le2vma(le, list_link);
c0106c3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106c3f:	83 e8 10             	sub    $0x10,%eax
c0106c42:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c0106c45:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106c48:	8b 50 08             	mov    0x8(%eax),%edx
c0106c4b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106c4e:	8b 40 04             	mov    0x4(%eax),%eax
c0106c51:	83 ec 04             	sub    $0x4,%esp
c0106c54:	52                   	push   %edx
c0106c55:	50                   	push   %eax
c0106c56:	ff 75 f0             	pushl  -0x10(%ebp)
c0106c59:	e8 62 e8 ff ff       	call   c01054c0 <unmap_range>
c0106c5e:	83 c4 10             	add    $0x10,%esp
c0106c61:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106c64:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return listelm->next;
c0106c67:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106c6a:	8b 40 04             	mov    0x4(%eax),%eax
    while ((le = list_next(le)) != list) {
c0106c6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106c70:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106c73:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0106c76:	75 c4                	jne    c0106c3c <exit_mmap+0x4f>
    }
    while ((le = list_next(le)) != list) {
c0106c78:	eb 25                	jmp    c0106c9f <exit_mmap+0xb2>
        struct vma_struct *vma = le2vma(le, list_link);
c0106c7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106c7d:	83 e8 10             	sub    $0x10,%eax
c0106c80:	89 45 e8             	mov    %eax,-0x18(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c0106c83:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106c86:	8b 50 08             	mov    0x8(%eax),%edx
c0106c89:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106c8c:	8b 40 04             	mov    0x4(%eax),%eax
c0106c8f:	83 ec 04             	sub    $0x4,%esp
c0106c92:	52                   	push   %edx
c0106c93:	50                   	push   %eax
c0106c94:	ff 75 f0             	pushl  -0x10(%ebp)
c0106c97:	e8 fb e8 ff ff       	call   c0105597 <exit_range>
c0106c9c:	83 c4 10             	add    $0x10,%esp
c0106c9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106ca2:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106ca5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106ca8:	8b 40 04             	mov    0x4(%eax),%eax
    while ((le = list_next(le)) != list) {
c0106cab:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106cae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106cb1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0106cb4:	75 c4                	jne    c0106c7a <exit_mmap+0x8d>
    }
}
c0106cb6:	90                   	nop
c0106cb7:	90                   	nop
c0106cb8:	c9                   	leave  
c0106cb9:	c3                   	ret    

c0106cba <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c0106cba:	f3 0f 1e fb          	endbr32 
c0106cbe:	55                   	push   %ebp
c0106cbf:	89 e5                	mov    %esp,%ebp
c0106cc1:	83 ec 08             	sub    $0x8,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c0106cc4:	8b 45 10             	mov    0x10(%ebp),%eax
c0106cc7:	ff 75 18             	pushl  0x18(%ebp)
c0106cca:	ff 75 14             	pushl  0x14(%ebp)
c0106ccd:	50                   	push   %eax
c0106cce:	ff 75 08             	pushl  0x8(%ebp)
c0106cd1:	e8 f7 08 00 00       	call   c01075cd <user_mem_check>
c0106cd6:	83 c4 10             	add    $0x10,%esp
c0106cd9:	85 c0                	test   %eax,%eax
c0106cdb:	75 07                	jne    c0106ce4 <copy_from_user+0x2a>
        return 0;
c0106cdd:	b8 00 00 00 00       	mov    $0x0,%eax
c0106ce2:	eb 19                	jmp    c0106cfd <copy_from_user+0x43>
    }
    memcpy(dst, src, len);
c0106ce4:	83 ec 04             	sub    $0x4,%esp
c0106ce7:	ff 75 14             	pushl  0x14(%ebp)
c0106cea:	ff 75 10             	pushl  0x10(%ebp)
c0106ced:	ff 75 0c             	pushl  0xc(%ebp)
c0106cf0:	e8 57 56 00 00       	call   c010c34c <memcpy>
c0106cf5:	83 c4 10             	add    $0x10,%esp
    return 1;
c0106cf8:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0106cfd:	c9                   	leave  
c0106cfe:	c3                   	ret    

c0106cff <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c0106cff:	f3 0f 1e fb          	endbr32 
c0106d03:	55                   	push   %ebp
c0106d04:	89 e5                	mov    %esp,%ebp
c0106d06:	83 ec 08             	sub    $0x8,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c0106d09:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106d0c:	6a 01                	push   $0x1
c0106d0e:	ff 75 14             	pushl  0x14(%ebp)
c0106d11:	50                   	push   %eax
c0106d12:	ff 75 08             	pushl  0x8(%ebp)
c0106d15:	e8 b3 08 00 00       	call   c01075cd <user_mem_check>
c0106d1a:	83 c4 10             	add    $0x10,%esp
c0106d1d:	85 c0                	test   %eax,%eax
c0106d1f:	75 07                	jne    c0106d28 <copy_to_user+0x29>
        return 0;
c0106d21:	b8 00 00 00 00       	mov    $0x0,%eax
c0106d26:	eb 19                	jmp    c0106d41 <copy_to_user+0x42>
    }
    memcpy(dst, src, len);
c0106d28:	83 ec 04             	sub    $0x4,%esp
c0106d2b:	ff 75 14             	pushl  0x14(%ebp)
c0106d2e:	ff 75 10             	pushl  0x10(%ebp)
c0106d31:	ff 75 0c             	pushl  0xc(%ebp)
c0106d34:	e8 13 56 00 00       	call   c010c34c <memcpy>
c0106d39:	83 c4 10             	add    $0x10,%esp
    return 1;
c0106d3c:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0106d41:	c9                   	leave  
c0106d42:	c3                   	ret    

c0106d43 <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c0106d43:	f3 0f 1e fb          	endbr32 
c0106d47:	55                   	push   %ebp
c0106d48:	89 e5                	mov    %esp,%ebp
c0106d4a:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c0106d4d:	e8 03 00 00 00       	call   c0106d55 <check_vmm>
}
c0106d52:	90                   	nop
c0106d53:	c9                   	leave  
c0106d54:	c3                   	ret    

c0106d55 <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c0106d55:	f3 0f 1e fb          	endbr32 
c0106d59:	55                   	push   %ebp
c0106d5a:	89 e5                	mov    %esp,%ebp
c0106d5c:	83 ec 18             	sub    $0x18,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0106d5f:	e8 ab df ff ff       	call   c0104d0f <nr_free_pages>
c0106d64:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c0106d67:	e8 18 00 00 00       	call   c0106d84 <check_vma_struct>
    check_pgfault();
c0106d6c:	e8 14 04 00 00       	call   c0107185 <check_pgfault>

//    assert(nr_free_pages_store == nr_free_pages());

    cprintf("check_vmm() succeeded.\n");
c0106d71:	83 ec 0c             	sub    $0xc,%esp
c0106d74:	68 94 df 10 c0       	push   $0xc010df94
c0106d79:	e8 34 95 ff ff       	call   c01002b2 <cprintf>
c0106d7e:	83 c4 10             	add    $0x10,%esp
}
c0106d81:	90                   	nop
c0106d82:	c9                   	leave  
c0106d83:	c3                   	ret    

c0106d84 <check_vma_struct>:

static void
check_vma_struct(void) {
c0106d84:	f3 0f 1e fb          	endbr32 
c0106d88:	55                   	push   %ebp
c0106d89:	89 e5                	mov    %esp,%ebp
c0106d8b:	83 ec 58             	sub    $0x58,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0106d8e:	e8 7c df ff ff       	call   c0104d0f <nr_free_pages>
c0106d93:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c0106d96:	e8 79 f8 ff ff       	call   c0106614 <mm_create>
c0106d9b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c0106d9e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106da2:	75 19                	jne    c0106dbd <check_vma_struct+0x39>
c0106da4:	68 4b df 10 c0       	push   $0xc010df4b
c0106da9:	68 bb de 10 c0       	push   $0xc010debb
c0106dae:	68 0e 01 00 00       	push   $0x10e
c0106db3:	68 d0 de 10 c0       	push   $0xc010ded0
c0106db8:	e8 31 aa ff ff       	call   c01017ee <__panic>

    int step1 = 10, step2 = step1 * 10;
c0106dbd:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c0106dc4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106dc7:	89 d0                	mov    %edx,%eax
c0106dc9:	c1 e0 02             	shl    $0x2,%eax
c0106dcc:	01 d0                	add    %edx,%eax
c0106dce:	01 c0                	add    %eax,%eax
c0106dd0:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c0106dd3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106dd6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106dd9:	eb 5f                	jmp    c0106e3a <check_vma_struct+0xb6>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0106ddb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106dde:	89 d0                	mov    %edx,%eax
c0106de0:	c1 e0 02             	shl    $0x2,%eax
c0106de3:	01 d0                	add    %edx,%eax
c0106de5:	83 c0 02             	add    $0x2,%eax
c0106de8:	89 c1                	mov    %eax,%ecx
c0106dea:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106ded:	89 d0                	mov    %edx,%eax
c0106def:	c1 e0 02             	shl    $0x2,%eax
c0106df2:	01 d0                	add    %edx,%eax
c0106df4:	83 ec 04             	sub    $0x4,%esp
c0106df7:	6a 00                	push   $0x0
c0106df9:	51                   	push   %ecx
c0106dfa:	50                   	push   %eax
c0106dfb:	e8 b7 f8 ff ff       	call   c01066b7 <vma_create>
c0106e00:	83 c4 10             	add    $0x10,%esp
c0106e03:	89 45 bc             	mov    %eax,-0x44(%ebp)
        assert(vma != NULL);
c0106e06:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0106e0a:	75 19                	jne    c0106e25 <check_vma_struct+0xa1>
c0106e0c:	68 ac df 10 c0       	push   $0xc010dfac
c0106e11:	68 bb de 10 c0       	push   $0xc010debb
c0106e16:	68 15 01 00 00       	push   $0x115
c0106e1b:	68 d0 de 10 c0       	push   $0xc010ded0
c0106e20:	e8 c9 a9 ff ff       	call   c01017ee <__panic>
        insert_vma_struct(mm, vma);
c0106e25:	83 ec 08             	sub    $0x8,%esp
c0106e28:	ff 75 bc             	pushl  -0x44(%ebp)
c0106e2b:	ff 75 e8             	pushl  -0x18(%ebp)
c0106e2e:	e8 f4 f9 ff ff       	call   c0106827 <insert_vma_struct>
c0106e33:	83 c4 10             	add    $0x10,%esp
    for (i = step1; i >= 1; i --) {
c0106e36:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0106e3a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106e3e:	7f 9b                	jg     c0106ddb <check_vma_struct+0x57>
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0106e40:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106e43:	83 c0 01             	add    $0x1,%eax
c0106e46:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106e49:	eb 5f                	jmp    c0106eaa <check_vma_struct+0x126>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0106e4b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106e4e:	89 d0                	mov    %edx,%eax
c0106e50:	c1 e0 02             	shl    $0x2,%eax
c0106e53:	01 d0                	add    %edx,%eax
c0106e55:	83 c0 02             	add    $0x2,%eax
c0106e58:	89 c1                	mov    %eax,%ecx
c0106e5a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106e5d:	89 d0                	mov    %edx,%eax
c0106e5f:	c1 e0 02             	shl    $0x2,%eax
c0106e62:	01 d0                	add    %edx,%eax
c0106e64:	83 ec 04             	sub    $0x4,%esp
c0106e67:	6a 00                	push   $0x0
c0106e69:	51                   	push   %ecx
c0106e6a:	50                   	push   %eax
c0106e6b:	e8 47 f8 ff ff       	call   c01066b7 <vma_create>
c0106e70:	83 c4 10             	add    $0x10,%esp
c0106e73:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma != NULL);
c0106e76:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c0106e7a:	75 19                	jne    c0106e95 <check_vma_struct+0x111>
c0106e7c:	68 ac df 10 c0       	push   $0xc010dfac
c0106e81:	68 bb de 10 c0       	push   $0xc010debb
c0106e86:	68 1b 01 00 00       	push   $0x11b
c0106e8b:	68 d0 de 10 c0       	push   $0xc010ded0
c0106e90:	e8 59 a9 ff ff       	call   c01017ee <__panic>
        insert_vma_struct(mm, vma);
c0106e95:	83 ec 08             	sub    $0x8,%esp
c0106e98:	ff 75 c0             	pushl  -0x40(%ebp)
c0106e9b:	ff 75 e8             	pushl  -0x18(%ebp)
c0106e9e:	e8 84 f9 ff ff       	call   c0106827 <insert_vma_struct>
c0106ea3:	83 c4 10             	add    $0x10,%esp
    for (i = step1 + 1; i <= step2; i ++) {
c0106ea6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0106eaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106ead:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0106eb0:	7e 99                	jle    c0106e4b <check_vma_struct+0xc7>
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c0106eb2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106eb5:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0106eb8:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0106ebb:	8b 40 04             	mov    0x4(%eax),%eax
c0106ebe:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c0106ec1:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0106ec8:	e9 81 00 00 00       	jmp    c0106f4e <check_vma_struct+0x1ca>
        assert(le != &(mm->mmap_list));
c0106ecd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106ed0:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0106ed3:	75 19                	jne    c0106eee <check_vma_struct+0x16a>
c0106ed5:	68 b8 df 10 c0       	push   $0xc010dfb8
c0106eda:	68 bb de 10 c0       	push   $0xc010debb
c0106edf:	68 22 01 00 00       	push   $0x122
c0106ee4:	68 d0 de 10 c0       	push   $0xc010ded0
c0106ee9:	e8 00 a9 ff ff       	call   c01017ee <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c0106eee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106ef1:	83 e8 10             	sub    $0x10,%eax
c0106ef4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c0106ef7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106efa:	8b 48 04             	mov    0x4(%eax),%ecx
c0106efd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106f00:	89 d0                	mov    %edx,%eax
c0106f02:	c1 e0 02             	shl    $0x2,%eax
c0106f05:	01 d0                	add    %edx,%eax
c0106f07:	39 c1                	cmp    %eax,%ecx
c0106f09:	75 17                	jne    c0106f22 <check_vma_struct+0x19e>
c0106f0b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106f0e:	8b 48 08             	mov    0x8(%eax),%ecx
c0106f11:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106f14:	89 d0                	mov    %edx,%eax
c0106f16:	c1 e0 02             	shl    $0x2,%eax
c0106f19:	01 d0                	add    %edx,%eax
c0106f1b:	83 c0 02             	add    $0x2,%eax
c0106f1e:	39 c1                	cmp    %eax,%ecx
c0106f20:	74 19                	je     c0106f3b <check_vma_struct+0x1b7>
c0106f22:	68 d0 df 10 c0       	push   $0xc010dfd0
c0106f27:	68 bb de 10 c0       	push   $0xc010debb
c0106f2c:	68 24 01 00 00       	push   $0x124
c0106f31:	68 d0 de 10 c0       	push   $0xc010ded0
c0106f36:	e8 b3 a8 ff ff       	call   c01017ee <__panic>
c0106f3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106f3e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0106f41:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106f44:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0106f47:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 1; i <= step2; i ++) {
c0106f4a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0106f4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f51:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0106f54:	0f 8e 73 ff ff ff    	jle    c0106ecd <check_vma_struct+0x149>
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0106f5a:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c0106f61:	e9 80 01 00 00       	jmp    c01070e6 <check_vma_struct+0x362>
        struct vma_struct *vma1 = find_vma(mm, i);
c0106f66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f69:	83 ec 08             	sub    $0x8,%esp
c0106f6c:	50                   	push   %eax
c0106f6d:	ff 75 e8             	pushl  -0x18(%ebp)
c0106f70:	e8 82 f7 ff ff       	call   c01066f7 <find_vma>
c0106f75:	83 c4 10             	add    $0x10,%esp
c0106f78:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma1 != NULL);
c0106f7b:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0106f7f:	75 19                	jne    c0106f9a <check_vma_struct+0x216>
c0106f81:	68 05 e0 10 c0       	push   $0xc010e005
c0106f86:	68 bb de 10 c0       	push   $0xc010debb
c0106f8b:	68 2a 01 00 00       	push   $0x12a
c0106f90:	68 d0 de 10 c0       	push   $0xc010ded0
c0106f95:	e8 54 a8 ff ff       	call   c01017ee <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c0106f9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f9d:	83 c0 01             	add    $0x1,%eax
c0106fa0:	83 ec 08             	sub    $0x8,%esp
c0106fa3:	50                   	push   %eax
c0106fa4:	ff 75 e8             	pushl  -0x18(%ebp)
c0106fa7:	e8 4b f7 ff ff       	call   c01066f7 <find_vma>
c0106fac:	83 c4 10             	add    $0x10,%esp
c0106faf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(vma2 != NULL);
c0106fb2:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0106fb6:	75 19                	jne    c0106fd1 <check_vma_struct+0x24d>
c0106fb8:	68 12 e0 10 c0       	push   $0xc010e012
c0106fbd:	68 bb de 10 c0       	push   $0xc010debb
c0106fc2:	68 2c 01 00 00       	push   $0x12c
c0106fc7:	68 d0 de 10 c0       	push   $0xc010ded0
c0106fcc:	e8 1d a8 ff ff       	call   c01017ee <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c0106fd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106fd4:	83 c0 02             	add    $0x2,%eax
c0106fd7:	83 ec 08             	sub    $0x8,%esp
c0106fda:	50                   	push   %eax
c0106fdb:	ff 75 e8             	pushl  -0x18(%ebp)
c0106fde:	e8 14 f7 ff ff       	call   c01066f7 <find_vma>
c0106fe3:	83 c4 10             	add    $0x10,%esp
c0106fe6:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(vma3 == NULL);
c0106fe9:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0106fed:	74 19                	je     c0107008 <check_vma_struct+0x284>
c0106fef:	68 1f e0 10 c0       	push   $0xc010e01f
c0106ff4:	68 bb de 10 c0       	push   $0xc010debb
c0106ff9:	68 2e 01 00 00       	push   $0x12e
c0106ffe:	68 d0 de 10 c0       	push   $0xc010ded0
c0107003:	e8 e6 a7 ff ff       	call   c01017ee <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c0107008:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010700b:	83 c0 03             	add    $0x3,%eax
c010700e:	83 ec 08             	sub    $0x8,%esp
c0107011:	50                   	push   %eax
c0107012:	ff 75 e8             	pushl  -0x18(%ebp)
c0107015:	e8 dd f6 ff ff       	call   c01066f7 <find_vma>
c010701a:	83 c4 10             	add    $0x10,%esp
c010701d:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma4 == NULL);
c0107020:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0107024:	74 19                	je     c010703f <check_vma_struct+0x2bb>
c0107026:	68 2c e0 10 c0       	push   $0xc010e02c
c010702b:	68 bb de 10 c0       	push   $0xc010debb
c0107030:	68 30 01 00 00       	push   $0x130
c0107035:	68 d0 de 10 c0       	push   $0xc010ded0
c010703a:	e8 af a7 ff ff       	call   c01017ee <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c010703f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107042:	83 c0 04             	add    $0x4,%eax
c0107045:	83 ec 08             	sub    $0x8,%esp
c0107048:	50                   	push   %eax
c0107049:	ff 75 e8             	pushl  -0x18(%ebp)
c010704c:	e8 a6 f6 ff ff       	call   c01066f7 <find_vma>
c0107051:	83 c4 10             	add    $0x10,%esp
c0107054:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma5 == NULL);
c0107057:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c010705b:	74 19                	je     c0107076 <check_vma_struct+0x2f2>
c010705d:	68 39 e0 10 c0       	push   $0xc010e039
c0107062:	68 bb de 10 c0       	push   $0xc010debb
c0107067:	68 32 01 00 00       	push   $0x132
c010706c:	68 d0 de 10 c0       	push   $0xc010ded0
c0107071:	e8 78 a7 ff ff       	call   c01017ee <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c0107076:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107079:	8b 50 04             	mov    0x4(%eax),%edx
c010707c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010707f:	39 c2                	cmp    %eax,%edx
c0107081:	75 10                	jne    c0107093 <check_vma_struct+0x30f>
c0107083:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107086:	8b 40 08             	mov    0x8(%eax),%eax
c0107089:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010708c:	83 c2 02             	add    $0x2,%edx
c010708f:	39 d0                	cmp    %edx,%eax
c0107091:	74 19                	je     c01070ac <check_vma_struct+0x328>
c0107093:	68 48 e0 10 c0       	push   $0xc010e048
c0107098:	68 bb de 10 c0       	push   $0xc010debb
c010709d:	68 34 01 00 00       	push   $0x134
c01070a2:	68 d0 de 10 c0       	push   $0xc010ded0
c01070a7:	e8 42 a7 ff ff       	call   c01017ee <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c01070ac:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01070af:	8b 50 04             	mov    0x4(%eax),%edx
c01070b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01070b5:	39 c2                	cmp    %eax,%edx
c01070b7:	75 10                	jne    c01070c9 <check_vma_struct+0x345>
c01070b9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01070bc:	8b 40 08             	mov    0x8(%eax),%eax
c01070bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01070c2:	83 c2 02             	add    $0x2,%edx
c01070c5:	39 d0                	cmp    %edx,%eax
c01070c7:	74 19                	je     c01070e2 <check_vma_struct+0x35e>
c01070c9:	68 78 e0 10 c0       	push   $0xc010e078
c01070ce:	68 bb de 10 c0       	push   $0xc010debb
c01070d3:	68 35 01 00 00       	push   $0x135
c01070d8:	68 d0 de 10 c0       	push   $0xc010ded0
c01070dd:	e8 0c a7 ff ff       	call   c01017ee <__panic>
    for (i = 5; i <= 5 * step2; i +=5) {
c01070e2:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c01070e6:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01070e9:	89 d0                	mov    %edx,%eax
c01070eb:	c1 e0 02             	shl    $0x2,%eax
c01070ee:	01 d0                	add    %edx,%eax
c01070f0:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c01070f3:	0f 8e 6d fe ff ff    	jle    c0106f66 <check_vma_struct+0x1e2>
    }

    for (i =4; i>=0; i--) {
c01070f9:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c0107100:	eb 5c                	jmp    c010715e <check_vma_struct+0x3da>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c0107102:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107105:	83 ec 08             	sub    $0x8,%esp
c0107108:	50                   	push   %eax
c0107109:	ff 75 e8             	pushl  -0x18(%ebp)
c010710c:	e8 e6 f5 ff ff       	call   c01066f7 <find_vma>
c0107111:	83 c4 10             	add    $0x10,%esp
c0107114:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if (vma_below_5 != NULL ) {
c0107117:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010711b:	74 1e                	je     c010713b <check_vma_struct+0x3b7>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c010711d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107120:	8b 50 08             	mov    0x8(%eax),%edx
c0107123:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107126:	8b 40 04             	mov    0x4(%eax),%eax
c0107129:	52                   	push   %edx
c010712a:	50                   	push   %eax
c010712b:	ff 75 f4             	pushl  -0xc(%ebp)
c010712e:	68 a8 e0 10 c0       	push   $0xc010e0a8
c0107133:	e8 7a 91 ff ff       	call   c01002b2 <cprintf>
c0107138:	83 c4 10             	add    $0x10,%esp
        }
        assert(vma_below_5 == NULL);
c010713b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010713f:	74 19                	je     c010715a <check_vma_struct+0x3d6>
c0107141:	68 cd e0 10 c0       	push   $0xc010e0cd
c0107146:	68 bb de 10 c0       	push   $0xc010debb
c010714b:	68 3d 01 00 00       	push   $0x13d
c0107150:	68 d0 de 10 c0       	push   $0xc010ded0
c0107155:	e8 94 a6 ff ff       	call   c01017ee <__panic>
    for (i =4; i>=0; i--) {
c010715a:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010715e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107162:	79 9e                	jns    c0107102 <check_vma_struct+0x37e>
    }

    mm_destroy(mm);
c0107164:	83 ec 0c             	sub    $0xc,%esp
c0107167:	ff 75 e8             	pushl  -0x18(%ebp)
c010716a:	e8 e2 f7 ff ff       	call   c0106951 <mm_destroy>
c010716f:	83 c4 10             	add    $0x10,%esp

//    assert(nr_free_pages_store == nr_free_pages());

    cprintf("check_vma_struct() succeeded!\n");
c0107172:	83 ec 0c             	sub    $0xc,%esp
c0107175:	68 e4 e0 10 c0       	push   $0xc010e0e4
c010717a:	e8 33 91 ff ff       	call   c01002b2 <cprintf>
c010717f:	83 c4 10             	add    $0x10,%esp
}
c0107182:	90                   	nop
c0107183:	c9                   	leave  
c0107184:	c3                   	ret    

c0107185 <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0107185:	f3 0f 1e fb          	endbr32 
c0107189:	55                   	push   %ebp
c010718a:	89 e5                	mov    %esp,%ebp
c010718c:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010718f:	e8 7b db ff ff       	call   c0104d0f <nr_free_pages>
c0107194:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0107197:	e8 78 f4 ff ff       	call   c0106614 <mm_create>
c010719c:	a3 64 80 1b c0       	mov    %eax,0xc01b8064
    assert(check_mm_struct != NULL);
c01071a1:	a1 64 80 1b c0       	mov    0xc01b8064,%eax
c01071a6:	85 c0                	test   %eax,%eax
c01071a8:	75 19                	jne    c01071c3 <check_pgfault+0x3e>
c01071aa:	68 03 e1 10 c0       	push   $0xc010e103
c01071af:	68 bb de 10 c0       	push   $0xc010debb
c01071b4:	68 4f 01 00 00       	push   $0x14f
c01071b9:	68 d0 de 10 c0       	push   $0xc010ded0
c01071be:	e8 2b a6 ff ff       	call   c01017ee <__panic>

    struct mm_struct *mm = check_mm_struct;
c01071c3:	a1 64 80 1b c0       	mov    0xc01b8064,%eax
c01071c8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c01071cb:	8b 15 e0 29 13 c0    	mov    0xc01329e0,%edx
c01071d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01071d4:	89 50 0c             	mov    %edx,0xc(%eax)
c01071d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01071da:	8b 40 0c             	mov    0xc(%eax),%eax
c01071dd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c01071e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01071e3:	8b 00                	mov    (%eax),%eax
c01071e5:	85 c0                	test   %eax,%eax
c01071e7:	74 19                	je     c0107202 <check_pgfault+0x7d>
c01071e9:	68 1b e1 10 c0       	push   $0xc010e11b
c01071ee:	68 bb de 10 c0       	push   $0xc010debb
c01071f3:	68 53 01 00 00       	push   $0x153
c01071f8:	68 d0 de 10 c0       	push   $0xc010ded0
c01071fd:	e8 ec a5 ff ff       	call   c01017ee <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c0107202:	83 ec 04             	sub    $0x4,%esp
c0107205:	6a 02                	push   $0x2
c0107207:	68 00 00 40 00       	push   $0x400000
c010720c:	6a 00                	push   $0x0
c010720e:	e8 a4 f4 ff ff       	call   c01066b7 <vma_create>
c0107213:	83 c4 10             	add    $0x10,%esp
c0107216:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c0107219:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010721d:	75 19                	jne    c0107238 <check_pgfault+0xb3>
c010721f:	68 ac df 10 c0       	push   $0xc010dfac
c0107224:	68 bb de 10 c0       	push   $0xc010debb
c0107229:	68 56 01 00 00       	push   $0x156
c010722e:	68 d0 de 10 c0       	push   $0xc010ded0
c0107233:	e8 b6 a5 ff ff       	call   c01017ee <__panic>

    insert_vma_struct(mm, vma);
c0107238:	83 ec 08             	sub    $0x8,%esp
c010723b:	ff 75 e0             	pushl  -0x20(%ebp)
c010723e:	ff 75 e8             	pushl  -0x18(%ebp)
c0107241:	e8 e1 f5 ff ff       	call   c0106827 <insert_vma_struct>
c0107246:	83 c4 10             	add    $0x10,%esp

    uintptr_t addr = 0x100;
c0107249:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c0107250:	83 ec 08             	sub    $0x8,%esp
c0107253:	ff 75 dc             	pushl  -0x24(%ebp)
c0107256:	ff 75 e8             	pushl  -0x18(%ebp)
c0107259:	e8 99 f4 ff ff       	call   c01066f7 <find_vma>
c010725e:	83 c4 10             	add    $0x10,%esp
c0107261:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c0107264:	74 19                	je     c010727f <check_pgfault+0xfa>
c0107266:	68 29 e1 10 c0       	push   $0xc010e129
c010726b:	68 bb de 10 c0       	push   $0xc010debb
c0107270:	68 5b 01 00 00       	push   $0x15b
c0107275:	68 d0 de 10 c0       	push   $0xc010ded0
c010727a:	e8 6f a5 ff ff       	call   c01017ee <__panic>

    int i, sum = 0;
c010727f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0107286:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010728d:	eb 17                	jmp    c01072a6 <check_pgfault+0x121>
        *(char *)(addr + i) = i;
c010728f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107292:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107295:	01 d0                	add    %edx,%eax
c0107297:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010729a:	88 10                	mov    %dl,(%eax)
        sum += i;
c010729c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010729f:	01 45 f0             	add    %eax,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c01072a2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01072a6:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c01072aa:	7e e3                	jle    c010728f <check_pgfault+0x10a>
    }
    for (i = 0; i < 100; i ++) {
c01072ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01072b3:	eb 15                	jmp    c01072ca <check_pgfault+0x145>
        sum -= *(char *)(addr + i);
c01072b5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01072b8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01072bb:	01 d0                	add    %edx,%eax
c01072bd:	0f b6 00             	movzbl (%eax),%eax
c01072c0:	0f be c0             	movsbl %al,%eax
c01072c3:	29 45 f0             	sub    %eax,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c01072c6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01072ca:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c01072ce:	7e e5                	jle    c01072b5 <check_pgfault+0x130>
    }
    assert(sum == 0);
c01072d0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01072d4:	74 19                	je     c01072ef <check_pgfault+0x16a>
c01072d6:	68 43 e1 10 c0       	push   $0xc010e143
c01072db:	68 bb de 10 c0       	push   $0xc010debb
c01072e0:	68 65 01 00 00       	push   $0x165
c01072e5:	68 d0 de 10 c0       	push   $0xc010ded0
c01072ea:	e8 ff a4 ff ff       	call   c01017ee <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c01072ef:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01072f2:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01072f5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01072f8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01072fd:	83 ec 08             	sub    $0x8,%esp
c0107300:	50                   	push   %eax
c0107301:	ff 75 e4             	pushl  -0x1c(%ebp)
c0107304:	e8 63 e5 ff ff       	call   c010586c <page_remove>
c0107309:	83 c4 10             	add    $0x10,%esp
    free_page(pde2page(pgdir[0]));
c010730c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010730f:	8b 00                	mov    (%eax),%eax
c0107311:	83 ec 0c             	sub    $0xc,%esp
c0107314:	50                   	push   %eax
c0107315:	e8 de f2 ff ff       	call   c01065f8 <pde2page>
c010731a:	83 c4 10             	add    $0x10,%esp
c010731d:	83 ec 08             	sub    $0x8,%esp
c0107320:	6a 01                	push   $0x1
c0107322:	50                   	push   %eax
c0107323:	e8 ae d9 ff ff       	call   c0104cd6 <free_pages>
c0107328:	83 c4 10             	add    $0x10,%esp
    pgdir[0] = 0;
c010732b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010732e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c0107334:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107337:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c010733e:	83 ec 0c             	sub    $0xc,%esp
c0107341:	ff 75 e8             	pushl  -0x18(%ebp)
c0107344:	e8 08 f6 ff ff       	call   c0106951 <mm_destroy>
c0107349:	83 c4 10             	add    $0x10,%esp
    check_mm_struct = NULL;
c010734c:	c7 05 64 80 1b c0 00 	movl   $0x0,0xc01b8064
c0107353:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0107356:	e8 b4 d9 ff ff       	call   c0104d0f <nr_free_pages>
c010735b:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c010735e:	74 19                	je     c0107379 <check_pgfault+0x1f4>
c0107360:	68 4c e1 10 c0       	push   $0xc010e14c
c0107365:	68 bb de 10 c0       	push   $0xc010debb
c010736a:	68 6f 01 00 00       	push   $0x16f
c010736f:	68 d0 de 10 c0       	push   $0xc010ded0
c0107374:	e8 75 a4 ff ff       	call   c01017ee <__panic>

    cprintf("check_pgfault() succeeded!\n");
c0107379:	83 ec 0c             	sub    $0xc,%esp
c010737c:	68 73 e1 10 c0       	push   $0xc010e173
c0107381:	e8 2c 8f ff ff       	call   c01002b2 <cprintf>
c0107386:	83 c4 10             	add    $0x10,%esp
}
c0107389:	90                   	nop
c010738a:	c9                   	leave  
c010738b:	c3                   	ret    

c010738c <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c010738c:	f3 0f 1e fb          	endbr32 
c0107390:	55                   	push   %ebp
c0107391:	89 e5                	mov    %esp,%ebp
c0107393:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_INVAL;
c0107396:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c010739d:	ff 75 10             	pushl  0x10(%ebp)
c01073a0:	ff 75 08             	pushl  0x8(%ebp)
c01073a3:	e8 4f f3 ff ff       	call   c01066f7 <find_vma>
c01073a8:	83 c4 08             	add    $0x8,%esp
c01073ab:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c01073ae:	a1 0c 60 1b c0       	mov    0xc01b600c,%eax
c01073b3:	83 c0 01             	add    $0x1,%eax
c01073b6:	a3 0c 60 1b c0       	mov    %eax,0xc01b600c
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c01073bb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01073bf:	74 0b                	je     c01073cc <do_pgfault+0x40>
c01073c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01073c4:	8b 40 04             	mov    0x4(%eax),%eax
c01073c7:	39 45 10             	cmp    %eax,0x10(%ebp)
c01073ca:	73 18                	jae    c01073e4 <do_pgfault+0x58>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c01073cc:	83 ec 08             	sub    $0x8,%esp
c01073cf:	ff 75 10             	pushl  0x10(%ebp)
c01073d2:	68 90 e1 10 c0       	push   $0xc010e190
c01073d7:	e8 d6 8e ff ff       	call   c01002b2 <cprintf>
c01073dc:	83 c4 10             	add    $0x10,%esp
        goto failed;
c01073df:	e9 e4 01 00 00       	jmp    c01075c8 <do_pgfault+0x23c>
    }
    //check the error_code
    switch (error_code & 3) {
c01073e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01073e7:	83 e0 03             	and    $0x3,%eax
c01073ea:	85 c0                	test   %eax,%eax
c01073ec:	74 3c                	je     c010742a <do_pgfault+0x9e>
c01073ee:	83 f8 01             	cmp    $0x1,%eax
c01073f1:	74 22                	je     c0107415 <do_pgfault+0x89>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c01073f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01073f6:	8b 40 0c             	mov    0xc(%eax),%eax
c01073f9:	83 e0 02             	and    $0x2,%eax
c01073fc:	85 c0                	test   %eax,%eax
c01073fe:	75 4c                	jne    c010744c <do_pgfault+0xc0>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c0107400:	83 ec 0c             	sub    $0xc,%esp
c0107403:	68 c0 e1 10 c0       	push   $0xc010e1c0
c0107408:	e8 a5 8e ff ff       	call   c01002b2 <cprintf>
c010740d:	83 c4 10             	add    $0x10,%esp
            goto failed;
c0107410:	e9 b3 01 00 00       	jmp    c01075c8 <do_pgfault+0x23c>
        }
        break;
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0107415:	83 ec 0c             	sub    $0xc,%esp
c0107418:	68 20 e2 10 c0       	push   $0xc010e220
c010741d:	e8 90 8e ff ff       	call   c01002b2 <cprintf>
c0107422:	83 c4 10             	add    $0x10,%esp
        goto failed;
c0107425:	e9 9e 01 00 00       	jmp    c01075c8 <do_pgfault+0x23c>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c010742a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010742d:	8b 40 0c             	mov    0xc(%eax),%eax
c0107430:	83 e0 05             	and    $0x5,%eax
c0107433:	85 c0                	test   %eax,%eax
c0107435:	75 16                	jne    c010744d <do_pgfault+0xc1>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c0107437:	83 ec 0c             	sub    $0xc,%esp
c010743a:	68 58 e2 10 c0       	push   $0xc010e258
c010743f:	e8 6e 8e ff ff       	call   c01002b2 <cprintf>
c0107444:	83 c4 10             	add    $0x10,%esp
            goto failed;
c0107447:	e9 7c 01 00 00       	jmp    c01075c8 <do_pgfault+0x23c>
        break;
c010744c:	90                   	nop
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c010744d:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c0107454:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107457:	8b 40 0c             	mov    0xc(%eax),%eax
c010745a:	83 e0 02             	and    $0x2,%eax
c010745d:	85 c0                	test   %eax,%eax
c010745f:	74 04                	je     c0107465 <do_pgfault+0xd9>
        perm |= PTE_W;
c0107461:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c0107465:	8b 45 10             	mov    0x10(%ebp),%eax
c0107468:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010746b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010746e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107473:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c0107476:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c010747d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        }
   }
#endif
    // try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
    // (notice the 3th parameter '1')
    if ((ptep = get_pte(mm->pgdir, addr, 1)) == NULL) {
c0107484:	8b 45 08             	mov    0x8(%ebp),%eax
c0107487:	8b 40 0c             	mov    0xc(%eax),%eax
c010748a:	83 ec 04             	sub    $0x4,%esp
c010748d:	6a 01                	push   $0x1
c010748f:	ff 75 10             	pushl  0x10(%ebp)
c0107492:	50                   	push   %eax
c0107493:	e8 48 de ff ff       	call   c01052e0 <get_pte>
c0107498:	83 c4 10             	add    $0x10,%esp
c010749b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010749e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01074a2:	75 15                	jne    c01074b9 <do_pgfault+0x12d>
        cprintf("get_pte in do_pgfault failed\n");
c01074a4:	83 ec 0c             	sub    $0xc,%esp
c01074a7:	68 bb e2 10 c0       	push   $0xc010e2bb
c01074ac:	e8 01 8e ff ff       	call   c01002b2 <cprintf>
c01074b1:	83 c4 10             	add    $0x10,%esp
        goto failed;
c01074b4:	e9 0f 01 00 00       	jmp    c01075c8 <do_pgfault+0x23c>
    }
    
    if (*ptep == 0) { // if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
c01074b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01074bc:	8b 00                	mov    (%eax),%eax
c01074be:	85 c0                	test   %eax,%eax
c01074c0:	75 35                	jne    c01074f7 <do_pgfault+0x16b>
        if (pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) {
c01074c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01074c5:	8b 40 0c             	mov    0xc(%eax),%eax
c01074c8:	83 ec 04             	sub    $0x4,%esp
c01074cb:	ff 75 f0             	pushl  -0x10(%ebp)
c01074ce:	ff 75 10             	pushl  0x10(%ebp)
c01074d1:	50                   	push   %eax
c01074d2:	e8 e4 e4 ff ff       	call   c01059bb <pgdir_alloc_page>
c01074d7:	83 c4 10             	add    $0x10,%esp
c01074da:	85 c0                	test   %eax,%eax
c01074dc:	0f 85 df 00 00 00    	jne    c01075c1 <do_pgfault+0x235>
            cprintf("pgdir_alloc_page in do_pgfault failed\n");
c01074e2:	83 ec 0c             	sub    $0xc,%esp
c01074e5:	68 dc e2 10 c0       	push   $0xc010e2dc
c01074ea:	e8 c3 8d ff ff       	call   c01002b2 <cprintf>
c01074ef:	83 c4 10             	add    $0x10,%esp
            goto failed;
c01074f2:	e9 d1 00 00 00       	jmp    c01075c8 <do_pgfault+0x23c>
        }
    }
    else {
        struct Page *page=NULL;
c01074f7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
        cprintf("do pgfault: ptep %x, pte %x\n",ptep, *ptep);
c01074fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107501:	8b 00                	mov    (%eax),%eax
c0107503:	83 ec 04             	sub    $0x4,%esp
c0107506:	50                   	push   %eax
c0107507:	ff 75 e4             	pushl  -0x1c(%ebp)
c010750a:	68 03 e3 10 c0       	push   $0xc010e303
c010750f:	e8 9e 8d ff ff       	call   c01002b2 <cprintf>
c0107514:	83 c4 10             	add    $0x10,%esp
        if (*ptep & PTE_P) {
c0107517:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010751a:	8b 00                	mov    (%eax),%eax
c010751c:	83 e0 01             	and    $0x1,%eax
c010751f:	85 c0                	test   %eax,%eax
c0107521:	74 17                	je     c010753a <do_pgfault+0x1ae>
            //if process write to this existed readonly page (PTE_P means existed), then should be here now.
            //we can implement the delayed memory space copy for fork child process (AKA copy on write, COW).
            //we didn't implement now, we will do it in future.
            panic("error write a non-writable pte");
c0107523:	83 ec 04             	sub    $0x4,%esp
c0107526:	68 20 e3 10 c0       	push   $0xc010e320
c010752b:	68 ff 01 00 00       	push   $0x1ff
c0107530:	68 d0 de 10 c0       	push   $0xc010ded0
c0107535:	e8 b4 a2 ff ff       	call   c01017ee <__panic>
            //page = pte2page(*ptep);
        } else{
           // if this pte is a swap entry, then load data from disk to a page with phy addr
           // and call page_insert to map the phy addr with logical addr
           if(swap_init_ok) {               
c010753a:	a1 10 60 1b c0       	mov    0xc01b6010,%eax
c010753f:	85 c0                	test   %eax,%eax
c0107541:	74 30                	je     c0107573 <do_pgfault+0x1e7>
               if ((ret = swap_in(mm, addr, &page)) != 0) {
c0107543:	83 ec 04             	sub    $0x4,%esp
c0107546:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0107549:	50                   	push   %eax
c010754a:	ff 75 10             	pushl  0x10(%ebp)
c010754d:	ff 75 08             	pushl  0x8(%ebp)
c0107550:	e8 99 04 00 00       	call   c01079ee <swap_in>
c0107555:	83 c4 10             	add    $0x10,%esp
c0107558:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010755b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010755f:	74 2a                	je     c010758b <do_pgfault+0x1ff>
                   cprintf("swap_in in do_pgfault failed\n");
c0107561:	83 ec 0c             	sub    $0xc,%esp
c0107564:	68 3f e3 10 c0       	push   $0xc010e33f
c0107569:	e8 44 8d ff ff       	call   c01002b2 <cprintf>
c010756e:	83 c4 10             	add    $0x10,%esp
                   goto failed;
c0107571:	eb 55                	jmp    c01075c8 <do_pgfault+0x23c>
               }    

           }  
           else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c0107573:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107576:	8b 00                	mov    (%eax),%eax
c0107578:	83 ec 08             	sub    $0x8,%esp
c010757b:	50                   	push   %eax
c010757c:	68 60 e3 10 c0       	push   $0xc010e360
c0107581:	e8 2c 8d ff ff       	call   c01002b2 <cprintf>
c0107586:	83 c4 10             	add    $0x10,%esp
            goto failed;
c0107589:	eb 3d                	jmp    c01075c8 <do_pgfault+0x23c>
           }
       } 
       page_insert(mm->pgdir, page, addr, perm);
c010758b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010758e:	8b 45 08             	mov    0x8(%ebp),%eax
c0107591:	8b 40 0c             	mov    0xc(%eax),%eax
c0107594:	ff 75 f0             	pushl  -0x10(%ebp)
c0107597:	ff 75 10             	pushl  0x10(%ebp)
c010759a:	52                   	push   %edx
c010759b:	50                   	push   %eax
c010759c:	e8 08 e3 ff ff       	call   c01058a9 <page_insert>
c01075a1:	83 c4 10             	add    $0x10,%esp
       swap_map_swappable(mm, addr, page, 1);
c01075a4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01075a7:	6a 01                	push   $0x1
c01075a9:	50                   	push   %eax
c01075aa:	ff 75 10             	pushl  0x10(%ebp)
c01075ad:	ff 75 08             	pushl  0x8(%ebp)
c01075b0:	e8 9d 02 00 00       	call   c0107852 <swap_map_swappable>
c01075b5:	83 c4 10             	add    $0x10,%esp
       page->pra_vaddr = addr;
c01075b8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01075bb:	8b 55 10             	mov    0x10(%ebp),%edx
c01075be:	89 50 20             	mov    %edx,0x20(%eax)
   }
   ret = 0;
c01075c1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c01075c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01075cb:	c9                   	leave  
c01075cc:	c3                   	ret    

c01075cd <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c01075cd:	f3 0f 1e fb          	endbr32 
c01075d1:	55                   	push   %ebp
c01075d2:	89 e5                	mov    %esp,%ebp
c01075d4:	83 ec 10             	sub    $0x10,%esp
    if (mm != NULL) {
c01075d7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01075db:	0f 84 dc 00 00 00    	je     c01076bd <user_mem_check+0xf0>
        if (!USER_ACCESS(addr, addr + len)) {
c01075e1:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c01075e8:	76 1c                	jbe    c0107606 <user_mem_check+0x39>
c01075ea:	8b 55 0c             	mov    0xc(%ebp),%edx
c01075ed:	8b 45 10             	mov    0x10(%ebp),%eax
c01075f0:	01 d0                	add    %edx,%eax
c01075f2:	39 45 0c             	cmp    %eax,0xc(%ebp)
c01075f5:	73 0f                	jae    c0107606 <user_mem_check+0x39>
c01075f7:	8b 55 0c             	mov    0xc(%ebp),%edx
c01075fa:	8b 45 10             	mov    0x10(%ebp),%eax
c01075fd:	01 d0                	add    %edx,%eax
c01075ff:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c0107604:	76 0a                	jbe    c0107610 <user_mem_check+0x43>
            return 0;
c0107606:	b8 00 00 00 00       	mov    $0x0,%eax
c010760b:	e9 de 00 00 00       	jmp    c01076ee <user_mem_check+0x121>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c0107610:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107613:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0107616:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107619:	8b 45 10             	mov    0x10(%ebp),%eax
c010761c:	01 d0                	add    %edx,%eax
c010761e:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c0107621:	e9 84 00 00 00       	jmp    c01076aa <user_mem_check+0xdd>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c0107626:	ff 75 fc             	pushl  -0x4(%ebp)
c0107629:	ff 75 08             	pushl  0x8(%ebp)
c010762c:	e8 c6 f0 ff ff       	call   c01066f7 <find_vma>
c0107631:	83 c4 08             	add    $0x8,%esp
c0107634:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107637:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010763b:	74 0b                	je     c0107648 <user_mem_check+0x7b>
c010763d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107640:	8b 40 04             	mov    0x4(%eax),%eax
c0107643:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0107646:	73 0a                	jae    c0107652 <user_mem_check+0x85>
                return 0;
c0107648:	b8 00 00 00 00       	mov    $0x0,%eax
c010764d:	e9 9c 00 00 00       	jmp    c01076ee <user_mem_check+0x121>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c0107652:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107655:	8b 40 0c             	mov    0xc(%eax),%eax
c0107658:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010765c:	74 07                	je     c0107665 <user_mem_check+0x98>
c010765e:	ba 02 00 00 00       	mov    $0x2,%edx
c0107663:	eb 05                	jmp    c010766a <user_mem_check+0x9d>
c0107665:	ba 01 00 00 00       	mov    $0x1,%edx
c010766a:	21 d0                	and    %edx,%eax
c010766c:	85 c0                	test   %eax,%eax
c010766e:	75 07                	jne    c0107677 <user_mem_check+0xaa>
                return 0;
c0107670:	b8 00 00 00 00       	mov    $0x0,%eax
c0107675:	eb 77                	jmp    c01076ee <user_mem_check+0x121>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c0107677:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010767b:	74 24                	je     c01076a1 <user_mem_check+0xd4>
c010767d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107680:	8b 40 0c             	mov    0xc(%eax),%eax
c0107683:	83 e0 08             	and    $0x8,%eax
c0107686:	85 c0                	test   %eax,%eax
c0107688:	74 17                	je     c01076a1 <user_mem_check+0xd4>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c010768a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010768d:	8b 40 04             	mov    0x4(%eax),%eax
c0107690:	05 00 10 00 00       	add    $0x1000,%eax
c0107695:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0107698:	73 07                	jae    c01076a1 <user_mem_check+0xd4>
                    return 0;
c010769a:	b8 00 00 00 00       	mov    $0x0,%eax
c010769f:	eb 4d                	jmp    c01076ee <user_mem_check+0x121>
                }
            }
            start = vma->vm_end;
c01076a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01076a4:	8b 40 08             	mov    0x8(%eax),%eax
c01076a7:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < end) {
c01076aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01076ad:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01076b0:	0f 82 70 ff ff ff    	jb     c0107626 <user_mem_check+0x59>
        }
        return 1;
c01076b6:	b8 01 00 00 00       	mov    $0x1,%eax
c01076bb:	eb 31                	jmp    c01076ee <user_mem_check+0x121>
    }
    return KERN_ACCESS(addr, addr + len);
c01076bd:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c01076c4:	76 23                	jbe    c01076e9 <user_mem_check+0x11c>
c01076c6:	8b 55 0c             	mov    0xc(%ebp),%edx
c01076c9:	8b 45 10             	mov    0x10(%ebp),%eax
c01076cc:	01 d0                	add    %edx,%eax
c01076ce:	39 45 0c             	cmp    %eax,0xc(%ebp)
c01076d1:	73 16                	jae    c01076e9 <user_mem_check+0x11c>
c01076d3:	8b 55 0c             	mov    0xc(%ebp),%edx
c01076d6:	8b 45 10             	mov    0x10(%ebp),%eax
c01076d9:	01 d0                	add    %edx,%eax
c01076db:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c01076e0:	77 07                	ja     c01076e9 <user_mem_check+0x11c>
c01076e2:	b8 01 00 00 00       	mov    $0x1,%eax
c01076e7:	eb 05                	jmp    c01076ee <user_mem_check+0x121>
c01076e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01076ee:	c9                   	leave  
c01076ef:	c3                   	ret    

c01076f0 <pa2page>:
pa2page(uintptr_t pa) {
c01076f0:	55                   	push   %ebp
c01076f1:	89 e5                	mov    %esp,%ebp
c01076f3:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c01076f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01076f9:	c1 e8 0c             	shr    $0xc,%eax
c01076fc:	89 c2                	mov    %eax,%edx
c01076fe:	a1 80 5f 1b c0       	mov    0xc01b5f80,%eax
c0107703:	39 c2                	cmp    %eax,%edx
c0107705:	72 14                	jb     c010771b <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0107707:	83 ec 04             	sub    $0x4,%esp
c010770a:	68 88 e3 10 c0       	push   $0xc010e388
c010770f:	6a 5e                	push   $0x5e
c0107711:	68 a7 e3 10 c0       	push   $0xc010e3a7
c0107716:	e8 d3 a0 ff ff       	call   c01017ee <__panic>
    return &pages[PPN(pa)];
c010771b:	8b 0d 60 80 1b c0    	mov    0xc01b8060,%ecx
c0107721:	8b 45 08             	mov    0x8(%ebp),%eax
c0107724:	c1 e8 0c             	shr    $0xc,%eax
c0107727:	89 c2                	mov    %eax,%edx
c0107729:	89 d0                	mov    %edx,%eax
c010772b:	c1 e0 03             	shl    $0x3,%eax
c010772e:	01 d0                	add    %edx,%eax
c0107730:	c1 e0 02             	shl    $0x2,%eax
c0107733:	01 c8                	add    %ecx,%eax
}
c0107735:	c9                   	leave  
c0107736:	c3                   	ret    

c0107737 <pte2page>:
pte2page(pte_t pte) {
c0107737:	55                   	push   %ebp
c0107738:	89 e5                	mov    %esp,%ebp
c010773a:	83 ec 08             	sub    $0x8,%esp
    if (!(pte & PTE_P)) {
c010773d:	8b 45 08             	mov    0x8(%ebp),%eax
c0107740:	83 e0 01             	and    $0x1,%eax
c0107743:	85 c0                	test   %eax,%eax
c0107745:	75 14                	jne    c010775b <pte2page+0x24>
        panic("pte2page called with invalid pte");
c0107747:	83 ec 04             	sub    $0x4,%esp
c010774a:	68 b8 e3 10 c0       	push   $0xc010e3b8
c010774f:	6a 70                	push   $0x70
c0107751:	68 a7 e3 10 c0       	push   $0xc010e3a7
c0107756:	e8 93 a0 ff ff       	call   c01017ee <__panic>
    return pa2page(PTE_ADDR(pte));
c010775b:	8b 45 08             	mov    0x8(%ebp),%eax
c010775e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107763:	83 ec 0c             	sub    $0xc,%esp
c0107766:	50                   	push   %eax
c0107767:	e8 84 ff ff ff       	call   c01076f0 <pa2page>
c010776c:	83 c4 10             	add    $0x10,%esp
}
c010776f:	c9                   	leave  
c0107770:	c3                   	ret    

c0107771 <pde2page>:
pde2page(pde_t pde) {
c0107771:	55                   	push   %ebp
c0107772:	89 e5                	mov    %esp,%ebp
c0107774:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c0107777:	8b 45 08             	mov    0x8(%ebp),%eax
c010777a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010777f:	83 ec 0c             	sub    $0xc,%esp
c0107782:	50                   	push   %eax
c0107783:	e8 68 ff ff ff       	call   c01076f0 <pa2page>
c0107788:	83 c4 10             	add    $0x10,%esp
}
c010778b:	c9                   	leave  
c010778c:	c3                   	ret    

c010778d <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c010778d:	f3 0f 1e fb          	endbr32 
c0107791:	55                   	push   %ebp
c0107792:	89 e5                	mov    %esp,%ebp
c0107794:	83 ec 18             	sub    $0x18,%esp
     swapfs_init();
c0107797:	e8 5d 27 00 00       	call   c0109ef9 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c010779c:	a1 1c 81 1b c0       	mov    0xc01b811c,%eax
c01077a1:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c01077a6:	76 0c                	jbe    c01077b4 <swap_init+0x27>
c01077a8:	a1 1c 81 1b c0       	mov    0xc01b811c,%eax
c01077ad:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c01077b2:	76 17                	jbe    c01077cb <swap_init+0x3e>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c01077b4:	a1 1c 81 1b c0       	mov    0xc01b811c,%eax
c01077b9:	50                   	push   %eax
c01077ba:	68 d9 e3 10 c0       	push   $0xc010e3d9
c01077bf:	6a 27                	push   $0x27
c01077c1:	68 f4 e3 10 c0       	push   $0xc010e3f4
c01077c6:	e8 23 a0 ff ff       	call   c01017ee <__panic>
     }
     

     sm = &swap_manager_fifo;
c01077cb:	c7 05 18 60 1b c0 60 	movl   $0xc0132a60,0xc01b6018
c01077d2:	2a 13 c0 
     int r = sm->init();
c01077d5:	a1 18 60 1b c0       	mov    0xc01b6018,%eax
c01077da:	8b 40 04             	mov    0x4(%eax),%eax
c01077dd:	ff d0                	call   *%eax
c01077df:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c01077e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01077e6:	75 27                	jne    c010780f <swap_init+0x82>
     {
          swap_init_ok = 1;
c01077e8:	c7 05 10 60 1b c0 01 	movl   $0x1,0xc01b6010
c01077ef:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c01077f2:	a1 18 60 1b c0       	mov    0xc01b6018,%eax
c01077f7:	8b 00                	mov    (%eax),%eax
c01077f9:	83 ec 08             	sub    $0x8,%esp
c01077fc:	50                   	push   %eax
c01077fd:	68 03 e4 10 c0       	push   $0xc010e403
c0107802:	e8 ab 8a ff ff       	call   c01002b2 <cprintf>
c0107807:	83 c4 10             	add    $0x10,%esp
          check_swap();
c010780a:	e8 0f 04 00 00       	call   c0107c1e <check_swap>
     }

     return r;
c010780f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107812:	c9                   	leave  
c0107813:	c3                   	ret    

c0107814 <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c0107814:	f3 0f 1e fb          	endbr32 
c0107818:	55                   	push   %ebp
c0107819:	89 e5                	mov    %esp,%ebp
c010781b:	83 ec 08             	sub    $0x8,%esp
     return sm->init_mm(mm);
c010781e:	a1 18 60 1b c0       	mov    0xc01b6018,%eax
c0107823:	8b 40 08             	mov    0x8(%eax),%eax
c0107826:	83 ec 0c             	sub    $0xc,%esp
c0107829:	ff 75 08             	pushl  0x8(%ebp)
c010782c:	ff d0                	call   *%eax
c010782e:	83 c4 10             	add    $0x10,%esp
}
c0107831:	c9                   	leave  
c0107832:	c3                   	ret    

c0107833 <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0107833:	f3 0f 1e fb          	endbr32 
c0107837:	55                   	push   %ebp
c0107838:	89 e5                	mov    %esp,%ebp
c010783a:	83 ec 08             	sub    $0x8,%esp
     return sm->tick_event(mm);
c010783d:	a1 18 60 1b c0       	mov    0xc01b6018,%eax
c0107842:	8b 40 0c             	mov    0xc(%eax),%eax
c0107845:	83 ec 0c             	sub    $0xc,%esp
c0107848:	ff 75 08             	pushl  0x8(%ebp)
c010784b:	ff d0                	call   *%eax
c010784d:	83 c4 10             	add    $0x10,%esp
}
c0107850:	c9                   	leave  
c0107851:	c3                   	ret    

c0107852 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0107852:	f3 0f 1e fb          	endbr32 
c0107856:	55                   	push   %ebp
c0107857:	89 e5                	mov    %esp,%ebp
c0107859:	83 ec 08             	sub    $0x8,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c010785c:	a1 18 60 1b c0       	mov    0xc01b6018,%eax
c0107861:	8b 40 10             	mov    0x10(%eax),%eax
c0107864:	ff 75 14             	pushl  0x14(%ebp)
c0107867:	ff 75 10             	pushl  0x10(%ebp)
c010786a:	ff 75 0c             	pushl  0xc(%ebp)
c010786d:	ff 75 08             	pushl  0x8(%ebp)
c0107870:	ff d0                	call   *%eax
c0107872:	83 c4 10             	add    $0x10,%esp
}
c0107875:	c9                   	leave  
c0107876:	c3                   	ret    

c0107877 <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0107877:	f3 0f 1e fb          	endbr32 
c010787b:	55                   	push   %ebp
c010787c:	89 e5                	mov    %esp,%ebp
c010787e:	83 ec 08             	sub    $0x8,%esp
     return sm->set_unswappable(mm, addr);
c0107881:	a1 18 60 1b c0       	mov    0xc01b6018,%eax
c0107886:	8b 40 14             	mov    0x14(%eax),%eax
c0107889:	83 ec 08             	sub    $0x8,%esp
c010788c:	ff 75 0c             	pushl  0xc(%ebp)
c010788f:	ff 75 08             	pushl  0x8(%ebp)
c0107892:	ff d0                	call   *%eax
c0107894:	83 c4 10             	add    $0x10,%esp
}
c0107897:	c9                   	leave  
c0107898:	c3                   	ret    

c0107899 <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c0107899:	f3 0f 1e fb          	endbr32 
c010789d:	55                   	push   %ebp
c010789e:	89 e5                	mov    %esp,%ebp
c01078a0:	83 ec 28             	sub    $0x28,%esp
     int i;
     for (i = 0; i != n; ++ i)
c01078a3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01078aa:	e9 2e 01 00 00       	jmp    c01079dd <swap_out+0x144>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c01078af:	a1 18 60 1b c0       	mov    0xc01b6018,%eax
c01078b4:	8b 40 18             	mov    0x18(%eax),%eax
c01078b7:	83 ec 04             	sub    $0x4,%esp
c01078ba:	ff 75 10             	pushl  0x10(%ebp)
c01078bd:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c01078c0:	52                   	push   %edx
c01078c1:	ff 75 08             	pushl  0x8(%ebp)
c01078c4:	ff d0                	call   *%eax
c01078c6:	83 c4 10             	add    $0x10,%esp
c01078c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c01078cc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01078d0:	74 18                	je     c01078ea <swap_out+0x51>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c01078d2:	83 ec 08             	sub    $0x8,%esp
c01078d5:	ff 75 f4             	pushl  -0xc(%ebp)
c01078d8:	68 18 e4 10 c0       	push   $0xc010e418
c01078dd:	e8 d0 89 ff ff       	call   c01002b2 <cprintf>
c01078e2:	83 c4 10             	add    $0x10,%esp
c01078e5:	e9 ff 00 00 00       	jmp    c01079e9 <swap_out+0x150>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c01078ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01078ed:	8b 40 20             	mov    0x20(%eax),%eax
c01078f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c01078f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01078f6:	8b 40 0c             	mov    0xc(%eax),%eax
c01078f9:	83 ec 04             	sub    $0x4,%esp
c01078fc:	6a 00                	push   $0x0
c01078fe:	ff 75 ec             	pushl  -0x14(%ebp)
c0107901:	50                   	push   %eax
c0107902:	e8 d9 d9 ff ff       	call   c01052e0 <get_pte>
c0107907:	83 c4 10             	add    $0x10,%esp
c010790a:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c010790d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107910:	8b 00                	mov    (%eax),%eax
c0107912:	83 e0 01             	and    $0x1,%eax
c0107915:	85 c0                	test   %eax,%eax
c0107917:	75 16                	jne    c010792f <swap_out+0x96>
c0107919:	68 45 e4 10 c0       	push   $0xc010e445
c010791e:	68 5a e4 10 c0       	push   $0xc010e45a
c0107923:	6a 67                	push   $0x67
c0107925:	68 f4 e3 10 c0       	push   $0xc010e3f4
c010792a:	e8 bf 9e ff ff       	call   c01017ee <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c010792f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107932:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107935:	8b 52 20             	mov    0x20(%edx),%edx
c0107938:	c1 ea 0c             	shr    $0xc,%edx
c010793b:	83 c2 01             	add    $0x1,%edx
c010793e:	c1 e2 08             	shl    $0x8,%edx
c0107941:	83 ec 08             	sub    $0x8,%esp
c0107944:	50                   	push   %eax
c0107945:	52                   	push   %edx
c0107946:	e8 51 26 00 00       	call   c0109f9c <swapfs_write>
c010794b:	83 c4 10             	add    $0x10,%esp
c010794e:	85 c0                	test   %eax,%eax
c0107950:	74 2b                	je     c010797d <swap_out+0xe4>
                    cprintf("SWAP: failed to save\n");
c0107952:	83 ec 0c             	sub    $0xc,%esp
c0107955:	68 6f e4 10 c0       	push   $0xc010e46f
c010795a:	e8 53 89 ff ff       	call   c01002b2 <cprintf>
c010795f:	83 c4 10             	add    $0x10,%esp
                    sm->map_swappable(mm, v, page, 0);
c0107962:	a1 18 60 1b c0       	mov    0xc01b6018,%eax
c0107967:	8b 40 10             	mov    0x10(%eax),%eax
c010796a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010796d:	6a 00                	push   $0x0
c010796f:	52                   	push   %edx
c0107970:	ff 75 ec             	pushl  -0x14(%ebp)
c0107973:	ff 75 08             	pushl  0x8(%ebp)
c0107976:	ff d0                	call   *%eax
c0107978:	83 c4 10             	add    $0x10,%esp
c010797b:	eb 5c                	jmp    c01079d9 <swap_out+0x140>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c010797d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107980:	8b 40 20             	mov    0x20(%eax),%eax
c0107983:	c1 e8 0c             	shr    $0xc,%eax
c0107986:	83 c0 01             	add    $0x1,%eax
c0107989:	50                   	push   %eax
c010798a:	ff 75 ec             	pushl  -0x14(%ebp)
c010798d:	ff 75 f4             	pushl  -0xc(%ebp)
c0107990:	68 88 e4 10 c0       	push   $0xc010e488
c0107995:	e8 18 89 ff ff       	call   c01002b2 <cprintf>
c010799a:	83 c4 10             	add    $0x10,%esp
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c010799d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01079a0:	8b 40 20             	mov    0x20(%eax),%eax
c01079a3:	c1 e8 0c             	shr    $0xc,%eax
c01079a6:	83 c0 01             	add    $0x1,%eax
c01079a9:	c1 e0 08             	shl    $0x8,%eax
c01079ac:	89 c2                	mov    %eax,%edx
c01079ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01079b1:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c01079b3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01079b6:	83 ec 08             	sub    $0x8,%esp
c01079b9:	6a 01                	push   $0x1
c01079bb:	50                   	push   %eax
c01079bc:	e8 15 d3 ff ff       	call   c0104cd6 <free_pages>
c01079c1:	83 c4 10             	add    $0x10,%esp
          }
          
          tlb_invalidate(mm->pgdir, v);
c01079c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01079c7:	8b 40 0c             	mov    0xc(%eax),%eax
c01079ca:	83 ec 08             	sub    $0x8,%esp
c01079cd:	ff 75 ec             	pushl  -0x14(%ebp)
c01079d0:	50                   	push   %eax
c01079d1:	e8 90 df ff ff       	call   c0105966 <tlb_invalidate>
c01079d6:	83 c4 10             	add    $0x10,%esp
     for (i = 0; i != n; ++ i)
c01079d9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01079dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01079e0:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01079e3:	0f 85 c6 fe ff ff    	jne    c01078af <swap_out+0x16>
     }
     return i;
c01079e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01079ec:	c9                   	leave  
c01079ed:	c3                   	ret    

c01079ee <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c01079ee:	f3 0f 1e fb          	endbr32 
c01079f2:	55                   	push   %ebp
c01079f3:	89 e5                	mov    %esp,%ebp
c01079f5:	83 ec 18             	sub    $0x18,%esp
     struct Page *result = alloc_page();
c01079f8:	83 ec 0c             	sub    $0xc,%esp
c01079fb:	6a 01                	push   $0x1
c01079fd:	e8 64 d2 ff ff       	call   c0104c66 <alloc_pages>
c0107a02:	83 c4 10             	add    $0x10,%esp
c0107a05:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c0107a08:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107a0c:	75 16                	jne    c0107a24 <swap_in+0x36>
c0107a0e:	68 c8 e4 10 c0       	push   $0xc010e4c8
c0107a13:	68 5a e4 10 c0       	push   $0xc010e45a
c0107a18:	6a 7d                	push   $0x7d
c0107a1a:	68 f4 e3 10 c0       	push   $0xc010e3f4
c0107a1f:	e8 ca 9d ff ff       	call   c01017ee <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c0107a24:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a27:	8b 40 0c             	mov    0xc(%eax),%eax
c0107a2a:	83 ec 04             	sub    $0x4,%esp
c0107a2d:	6a 00                	push   $0x0
c0107a2f:	ff 75 0c             	pushl  0xc(%ebp)
c0107a32:	50                   	push   %eax
c0107a33:	e8 a8 d8 ff ff       	call   c01052e0 <get_pte>
c0107a38:	83 c4 10             	add    $0x10,%esp
c0107a3b:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c0107a3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a41:	8b 00                	mov    (%eax),%eax
c0107a43:	83 ec 08             	sub    $0x8,%esp
c0107a46:	ff 75 f4             	pushl  -0xc(%ebp)
c0107a49:	50                   	push   %eax
c0107a4a:	e8 f1 24 00 00       	call   c0109f40 <swapfs_read>
c0107a4f:	83 c4 10             	add    $0x10,%esp
c0107a52:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107a55:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107a59:	74 1f                	je     c0107a7a <swap_in+0x8c>
     {
        assert(r!=0);
c0107a5b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107a5f:	75 19                	jne    c0107a7a <swap_in+0x8c>
c0107a61:	68 d5 e4 10 c0       	push   $0xc010e4d5
c0107a66:	68 5a e4 10 c0       	push   $0xc010e45a
c0107a6b:	68 85 00 00 00       	push   $0x85
c0107a70:	68 f4 e3 10 c0       	push   $0xc010e3f4
c0107a75:	e8 74 9d ff ff       	call   c01017ee <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c0107a7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a7d:	8b 00                	mov    (%eax),%eax
c0107a7f:	c1 e8 08             	shr    $0x8,%eax
c0107a82:	83 ec 04             	sub    $0x4,%esp
c0107a85:	ff 75 0c             	pushl  0xc(%ebp)
c0107a88:	50                   	push   %eax
c0107a89:	68 dc e4 10 c0       	push   $0xc010e4dc
c0107a8e:	e8 1f 88 ff ff       	call   c01002b2 <cprintf>
c0107a93:	83 c4 10             	add    $0x10,%esp
     *ptr_result=result;
c0107a96:	8b 45 10             	mov    0x10(%ebp),%eax
c0107a99:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107a9c:	89 10                	mov    %edx,(%eax)
     return 0;
c0107a9e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107aa3:	c9                   	leave  
c0107aa4:	c3                   	ret    

c0107aa5 <check_content_set>:



static inline void
check_content_set(void)
{
c0107aa5:	55                   	push   %ebp
c0107aa6:	89 e5                	mov    %esp,%ebp
c0107aa8:	83 ec 08             	sub    $0x8,%esp
     *(unsigned char *)0x1000 = 0x0a;
c0107aab:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107ab0:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0107ab3:	a1 0c 60 1b c0       	mov    0xc01b600c,%eax
c0107ab8:	83 f8 01             	cmp    $0x1,%eax
c0107abb:	74 19                	je     c0107ad6 <check_content_set+0x31>
c0107abd:	68 1a e5 10 c0       	push   $0xc010e51a
c0107ac2:	68 5a e4 10 c0       	push   $0xc010e45a
c0107ac7:	68 92 00 00 00       	push   $0x92
c0107acc:	68 f4 e3 10 c0       	push   $0xc010e3f4
c0107ad1:	e8 18 9d ff ff       	call   c01017ee <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c0107ad6:	b8 10 10 00 00       	mov    $0x1010,%eax
c0107adb:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0107ade:	a1 0c 60 1b c0       	mov    0xc01b600c,%eax
c0107ae3:	83 f8 01             	cmp    $0x1,%eax
c0107ae6:	74 19                	je     c0107b01 <check_content_set+0x5c>
c0107ae8:	68 1a e5 10 c0       	push   $0xc010e51a
c0107aed:	68 5a e4 10 c0       	push   $0xc010e45a
c0107af2:	68 94 00 00 00       	push   $0x94
c0107af7:	68 f4 e3 10 c0       	push   $0xc010e3f4
c0107afc:	e8 ed 9c ff ff       	call   c01017ee <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c0107b01:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107b06:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0107b09:	a1 0c 60 1b c0       	mov    0xc01b600c,%eax
c0107b0e:	83 f8 02             	cmp    $0x2,%eax
c0107b11:	74 19                	je     c0107b2c <check_content_set+0x87>
c0107b13:	68 29 e5 10 c0       	push   $0xc010e529
c0107b18:	68 5a e4 10 c0       	push   $0xc010e45a
c0107b1d:	68 96 00 00 00       	push   $0x96
c0107b22:	68 f4 e3 10 c0       	push   $0xc010e3f4
c0107b27:	e8 c2 9c ff ff       	call   c01017ee <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c0107b2c:	b8 10 20 00 00       	mov    $0x2010,%eax
c0107b31:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0107b34:	a1 0c 60 1b c0       	mov    0xc01b600c,%eax
c0107b39:	83 f8 02             	cmp    $0x2,%eax
c0107b3c:	74 19                	je     c0107b57 <check_content_set+0xb2>
c0107b3e:	68 29 e5 10 c0       	push   $0xc010e529
c0107b43:	68 5a e4 10 c0       	push   $0xc010e45a
c0107b48:	68 98 00 00 00       	push   $0x98
c0107b4d:	68 f4 e3 10 c0       	push   $0xc010e3f4
c0107b52:	e8 97 9c ff ff       	call   c01017ee <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c0107b57:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107b5c:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0107b5f:	a1 0c 60 1b c0       	mov    0xc01b600c,%eax
c0107b64:	83 f8 03             	cmp    $0x3,%eax
c0107b67:	74 19                	je     c0107b82 <check_content_set+0xdd>
c0107b69:	68 38 e5 10 c0       	push   $0xc010e538
c0107b6e:	68 5a e4 10 c0       	push   $0xc010e45a
c0107b73:	68 9a 00 00 00       	push   $0x9a
c0107b78:	68 f4 e3 10 c0       	push   $0xc010e3f4
c0107b7d:	e8 6c 9c ff ff       	call   c01017ee <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c0107b82:	b8 10 30 00 00       	mov    $0x3010,%eax
c0107b87:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0107b8a:	a1 0c 60 1b c0       	mov    0xc01b600c,%eax
c0107b8f:	83 f8 03             	cmp    $0x3,%eax
c0107b92:	74 19                	je     c0107bad <check_content_set+0x108>
c0107b94:	68 38 e5 10 c0       	push   $0xc010e538
c0107b99:	68 5a e4 10 c0       	push   $0xc010e45a
c0107b9e:	68 9c 00 00 00       	push   $0x9c
c0107ba3:	68 f4 e3 10 c0       	push   $0xc010e3f4
c0107ba8:	e8 41 9c ff ff       	call   c01017ee <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c0107bad:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107bb2:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0107bb5:	a1 0c 60 1b c0       	mov    0xc01b600c,%eax
c0107bba:	83 f8 04             	cmp    $0x4,%eax
c0107bbd:	74 19                	je     c0107bd8 <check_content_set+0x133>
c0107bbf:	68 47 e5 10 c0       	push   $0xc010e547
c0107bc4:	68 5a e4 10 c0       	push   $0xc010e45a
c0107bc9:	68 9e 00 00 00       	push   $0x9e
c0107bce:	68 f4 e3 10 c0       	push   $0xc010e3f4
c0107bd3:	e8 16 9c ff ff       	call   c01017ee <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c0107bd8:	b8 10 40 00 00       	mov    $0x4010,%eax
c0107bdd:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0107be0:	a1 0c 60 1b c0       	mov    0xc01b600c,%eax
c0107be5:	83 f8 04             	cmp    $0x4,%eax
c0107be8:	74 19                	je     c0107c03 <check_content_set+0x15e>
c0107bea:	68 47 e5 10 c0       	push   $0xc010e547
c0107bef:	68 5a e4 10 c0       	push   $0xc010e45a
c0107bf4:	68 a0 00 00 00       	push   $0xa0
c0107bf9:	68 f4 e3 10 c0       	push   $0xc010e3f4
c0107bfe:	e8 eb 9b ff ff       	call   c01017ee <__panic>
}
c0107c03:	90                   	nop
c0107c04:	c9                   	leave  
c0107c05:	c3                   	ret    

c0107c06 <check_content_access>:

static inline int
check_content_access(void)
{
c0107c06:	55                   	push   %ebp
c0107c07:	89 e5                	mov    %esp,%ebp
c0107c09:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c0107c0c:	a1 18 60 1b c0       	mov    0xc01b6018,%eax
c0107c11:	8b 40 1c             	mov    0x1c(%eax),%eax
c0107c14:	ff d0                	call   *%eax
c0107c16:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c0107c19:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107c1c:	c9                   	leave  
c0107c1d:	c3                   	ret    

c0107c1e <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c0107c1e:	f3 0f 1e fb          	endbr32 
c0107c22:	55                   	push   %ebp
c0107c23:	89 e5                	mov    %esp,%ebp
c0107c25:	83 ec 68             	sub    $0x68,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c0107c28:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0107c2f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c0107c36:	c7 45 e8 4c 81 1b c0 	movl   $0xc01b814c,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0107c3d:	eb 60                	jmp    c0107c9f <check_swap+0x81>
        struct Page *p = le2page(le, page_link);
c0107c3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107c42:	83 e8 10             	sub    $0x10,%eax
c0107c45:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(PageProperty(p));
c0107c48:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107c4b:	83 c0 04             	add    $0x4,%eax
c0107c4e:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c0107c55:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0107c58:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0107c5b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0107c5e:	0f a3 10             	bt     %edx,(%eax)
c0107c61:	19 c0                	sbb    %eax,%eax
c0107c63:	89 45 bc             	mov    %eax,-0x44(%ebp)
    return oldbit != 0;
c0107c66:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0107c6a:	0f 95 c0             	setne  %al
c0107c6d:	0f b6 c0             	movzbl %al,%eax
c0107c70:	85 c0                	test   %eax,%eax
c0107c72:	75 19                	jne    c0107c8d <check_swap+0x6f>
c0107c74:	68 56 e5 10 c0       	push   $0xc010e556
c0107c79:	68 5a e4 10 c0       	push   $0xc010e45a
c0107c7e:	68 bb 00 00 00       	push   $0xbb
c0107c83:	68 f4 e3 10 c0       	push   $0xc010e3f4
c0107c88:	e8 61 9b ff ff       	call   c01017ee <__panic>
        count ++, total += p->property;
c0107c8d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0107c91:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107c94:	8b 50 08             	mov    0x8(%eax),%edx
c0107c97:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107c9a:	01 d0                	add    %edx,%eax
c0107c9c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107c9f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107ca2:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0107ca5:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0107ca8:	8b 40 04             	mov    0x4(%eax),%eax
     while ((le = list_next(le)) != &free_list) {
c0107cab:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107cae:	81 7d e8 4c 81 1b c0 	cmpl   $0xc01b814c,-0x18(%ebp)
c0107cb5:	75 88                	jne    c0107c3f <check_swap+0x21>
     }
     assert(total == nr_free_pages());
c0107cb7:	e8 53 d0 ff ff       	call   c0104d0f <nr_free_pages>
c0107cbc:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107cbf:	39 d0                	cmp    %edx,%eax
c0107cc1:	74 19                	je     c0107cdc <check_swap+0xbe>
c0107cc3:	68 66 e5 10 c0       	push   $0xc010e566
c0107cc8:	68 5a e4 10 c0       	push   $0xc010e45a
c0107ccd:	68 be 00 00 00       	push   $0xbe
c0107cd2:	68 f4 e3 10 c0       	push   $0xc010e3f4
c0107cd7:	e8 12 9b ff ff       	call   c01017ee <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c0107cdc:	83 ec 04             	sub    $0x4,%esp
c0107cdf:	ff 75 f0             	pushl  -0x10(%ebp)
c0107ce2:	ff 75 f4             	pushl  -0xc(%ebp)
c0107ce5:	68 80 e5 10 c0       	push   $0xc010e580
c0107cea:	e8 c3 85 ff ff       	call   c01002b2 <cprintf>
c0107cef:	83 c4 10             	add    $0x10,%esp
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c0107cf2:	e8 1d e9 ff ff       	call   c0106614 <mm_create>
c0107cf7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     assert(mm != NULL);
c0107cfa:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0107cfe:	75 19                	jne    c0107d19 <check_swap+0xfb>
c0107d00:	68 a6 e5 10 c0       	push   $0xc010e5a6
c0107d05:	68 5a e4 10 c0       	push   $0xc010e45a
c0107d0a:	68 c3 00 00 00       	push   $0xc3
c0107d0f:	68 f4 e3 10 c0       	push   $0xc010e3f4
c0107d14:	e8 d5 9a ff ff       	call   c01017ee <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c0107d19:	a1 64 80 1b c0       	mov    0xc01b8064,%eax
c0107d1e:	85 c0                	test   %eax,%eax
c0107d20:	74 19                	je     c0107d3b <check_swap+0x11d>
c0107d22:	68 b1 e5 10 c0       	push   $0xc010e5b1
c0107d27:	68 5a e4 10 c0       	push   $0xc010e45a
c0107d2c:	68 c6 00 00 00       	push   $0xc6
c0107d31:	68 f4 e3 10 c0       	push   $0xc010e3f4
c0107d36:	e8 b3 9a ff ff       	call   c01017ee <__panic>

     check_mm_struct = mm;
c0107d3b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107d3e:	a3 64 80 1b c0       	mov    %eax,0xc01b8064

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c0107d43:	8b 15 e0 29 13 c0    	mov    0xc01329e0,%edx
c0107d49:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107d4c:	89 50 0c             	mov    %edx,0xc(%eax)
c0107d4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107d52:	8b 40 0c             	mov    0xc(%eax),%eax
c0107d55:	89 45 e0             	mov    %eax,-0x20(%ebp)
     assert(pgdir[0] == 0);
c0107d58:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107d5b:	8b 00                	mov    (%eax),%eax
c0107d5d:	85 c0                	test   %eax,%eax
c0107d5f:	74 19                	je     c0107d7a <check_swap+0x15c>
c0107d61:	68 c9 e5 10 c0       	push   $0xc010e5c9
c0107d66:	68 5a e4 10 c0       	push   $0xc010e45a
c0107d6b:	68 cb 00 00 00       	push   $0xcb
c0107d70:	68 f4 e3 10 c0       	push   $0xc010e3f4
c0107d75:	e8 74 9a ff ff       	call   c01017ee <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c0107d7a:	83 ec 04             	sub    $0x4,%esp
c0107d7d:	6a 03                	push   $0x3
c0107d7f:	68 00 60 00 00       	push   $0x6000
c0107d84:	68 00 10 00 00       	push   $0x1000
c0107d89:	e8 29 e9 ff ff       	call   c01066b7 <vma_create>
c0107d8e:	83 c4 10             	add    $0x10,%esp
c0107d91:	89 45 dc             	mov    %eax,-0x24(%ebp)
     assert(vma != NULL);
c0107d94:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0107d98:	75 19                	jne    c0107db3 <check_swap+0x195>
c0107d9a:	68 d7 e5 10 c0       	push   $0xc010e5d7
c0107d9f:	68 5a e4 10 c0       	push   $0xc010e45a
c0107da4:	68 ce 00 00 00       	push   $0xce
c0107da9:	68 f4 e3 10 c0       	push   $0xc010e3f4
c0107dae:	e8 3b 9a ff ff       	call   c01017ee <__panic>

     insert_vma_struct(mm, vma);
c0107db3:	83 ec 08             	sub    $0x8,%esp
c0107db6:	ff 75 dc             	pushl  -0x24(%ebp)
c0107db9:	ff 75 e4             	pushl  -0x1c(%ebp)
c0107dbc:	e8 66 ea ff ff       	call   c0106827 <insert_vma_struct>
c0107dc1:	83 c4 10             	add    $0x10,%esp

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c0107dc4:	83 ec 0c             	sub    $0xc,%esp
c0107dc7:	68 e4 e5 10 c0       	push   $0xc010e5e4
c0107dcc:	e8 e1 84 ff ff       	call   c01002b2 <cprintf>
c0107dd1:	83 c4 10             	add    $0x10,%esp
     pte_t *temp_ptep=NULL;
c0107dd4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c0107ddb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107dde:	8b 40 0c             	mov    0xc(%eax),%eax
c0107de1:	83 ec 04             	sub    $0x4,%esp
c0107de4:	6a 01                	push   $0x1
c0107de6:	68 00 10 00 00       	push   $0x1000
c0107deb:	50                   	push   %eax
c0107dec:	e8 ef d4 ff ff       	call   c01052e0 <get_pte>
c0107df1:	83 c4 10             	add    $0x10,%esp
c0107df4:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(temp_ptep!= NULL);
c0107df7:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0107dfb:	75 19                	jne    c0107e16 <check_swap+0x1f8>
c0107dfd:	68 18 e6 10 c0       	push   $0xc010e618
c0107e02:	68 5a e4 10 c0       	push   $0xc010e45a
c0107e07:	68 d6 00 00 00       	push   $0xd6
c0107e0c:	68 f4 e3 10 c0       	push   $0xc010e3f4
c0107e11:	e8 d8 99 ff ff       	call   c01017ee <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c0107e16:	83 ec 0c             	sub    $0xc,%esp
c0107e19:	68 2c e6 10 c0       	push   $0xc010e62c
c0107e1e:	e8 8f 84 ff ff       	call   c01002b2 <cprintf>
c0107e23:	83 c4 10             	add    $0x10,%esp
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107e26:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107e2d:	e9 8e 00 00 00       	jmp    c0107ec0 <check_swap+0x2a2>
          check_rp[i] = alloc_page();
c0107e32:	83 ec 0c             	sub    $0xc,%esp
c0107e35:	6a 01                	push   $0x1
c0107e37:	e8 2a ce ff ff       	call   c0104c66 <alloc_pages>
c0107e3c:	83 c4 10             	add    $0x10,%esp
c0107e3f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107e42:	89 04 95 80 80 1b c0 	mov    %eax,-0x3fe47f80(,%edx,4)
          assert(check_rp[i] != NULL );
c0107e49:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107e4c:	8b 04 85 80 80 1b c0 	mov    -0x3fe47f80(,%eax,4),%eax
c0107e53:	85 c0                	test   %eax,%eax
c0107e55:	75 19                	jne    c0107e70 <check_swap+0x252>
c0107e57:	68 50 e6 10 c0       	push   $0xc010e650
c0107e5c:	68 5a e4 10 c0       	push   $0xc010e45a
c0107e61:	68 db 00 00 00       	push   $0xdb
c0107e66:	68 f4 e3 10 c0       	push   $0xc010e3f4
c0107e6b:	e8 7e 99 ff ff       	call   c01017ee <__panic>
          assert(!PageProperty(check_rp[i]));
c0107e70:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107e73:	8b 04 85 80 80 1b c0 	mov    -0x3fe47f80(,%eax,4),%eax
c0107e7a:	83 c0 04             	add    $0x4,%eax
c0107e7d:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c0107e84:	89 45 b0             	mov    %eax,-0x50(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0107e87:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0107e8a:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0107e8d:	0f a3 10             	bt     %edx,(%eax)
c0107e90:	19 c0                	sbb    %eax,%eax
c0107e92:	89 45 ac             	mov    %eax,-0x54(%ebp)
    return oldbit != 0;
c0107e95:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c0107e99:	0f 95 c0             	setne  %al
c0107e9c:	0f b6 c0             	movzbl %al,%eax
c0107e9f:	85 c0                	test   %eax,%eax
c0107ea1:	74 19                	je     c0107ebc <check_swap+0x29e>
c0107ea3:	68 64 e6 10 c0       	push   $0xc010e664
c0107ea8:	68 5a e4 10 c0       	push   $0xc010e45a
c0107ead:	68 dc 00 00 00       	push   $0xdc
c0107eb2:	68 f4 e3 10 c0       	push   $0xc010e3f4
c0107eb7:	e8 32 99 ff ff       	call   c01017ee <__panic>
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107ebc:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107ec0:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107ec4:	0f 8e 68 ff ff ff    	jle    c0107e32 <check_swap+0x214>
     }
     list_entry_t free_list_store = free_list;
c0107eca:	a1 4c 81 1b c0       	mov    0xc01b814c,%eax
c0107ecf:	8b 15 50 81 1b c0    	mov    0xc01b8150,%edx
c0107ed5:	89 45 98             	mov    %eax,-0x68(%ebp)
c0107ed8:	89 55 9c             	mov    %edx,-0x64(%ebp)
c0107edb:	c7 45 a4 4c 81 1b c0 	movl   $0xc01b814c,-0x5c(%ebp)
    elm->prev = elm->next = elm;
c0107ee2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0107ee5:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c0107ee8:	89 50 04             	mov    %edx,0x4(%eax)
c0107eeb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0107eee:	8b 50 04             	mov    0x4(%eax),%edx
c0107ef1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0107ef4:	89 10                	mov    %edx,(%eax)
}
c0107ef6:	90                   	nop
c0107ef7:	c7 45 a8 4c 81 1b c0 	movl   $0xc01b814c,-0x58(%ebp)
    return list->next == list;
c0107efe:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107f01:	8b 40 04             	mov    0x4(%eax),%eax
c0107f04:	39 45 a8             	cmp    %eax,-0x58(%ebp)
c0107f07:	0f 94 c0             	sete   %al
c0107f0a:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c0107f0d:	85 c0                	test   %eax,%eax
c0107f0f:	75 19                	jne    c0107f2a <check_swap+0x30c>
c0107f11:	68 7f e6 10 c0       	push   $0xc010e67f
c0107f16:	68 5a e4 10 c0       	push   $0xc010e45a
c0107f1b:	68 e0 00 00 00       	push   $0xe0
c0107f20:	68 f4 e3 10 c0       	push   $0xc010e3f4
c0107f25:	e8 c4 98 ff ff       	call   c01017ee <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c0107f2a:	a1 54 81 1b c0       	mov    0xc01b8154,%eax
c0107f2f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     nr_free = 0;
c0107f32:	c7 05 54 81 1b c0 00 	movl   $0x0,0xc01b8154
c0107f39:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107f3c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107f43:	eb 1c                	jmp    c0107f61 <check_swap+0x343>
        free_pages(check_rp[i],1);
c0107f45:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107f48:	8b 04 85 80 80 1b c0 	mov    -0x3fe47f80(,%eax,4),%eax
c0107f4f:	83 ec 08             	sub    $0x8,%esp
c0107f52:	6a 01                	push   $0x1
c0107f54:	50                   	push   %eax
c0107f55:	e8 7c cd ff ff       	call   c0104cd6 <free_pages>
c0107f5a:	83 c4 10             	add    $0x10,%esp
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107f5d:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107f61:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107f65:	7e de                	jle    c0107f45 <check_swap+0x327>
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c0107f67:	a1 54 81 1b c0       	mov    0xc01b8154,%eax
c0107f6c:	83 f8 04             	cmp    $0x4,%eax
c0107f6f:	74 19                	je     c0107f8a <check_swap+0x36c>
c0107f71:	68 98 e6 10 c0       	push   $0xc010e698
c0107f76:	68 5a e4 10 c0       	push   $0xc010e45a
c0107f7b:	68 e9 00 00 00       	push   $0xe9
c0107f80:	68 f4 e3 10 c0       	push   $0xc010e3f4
c0107f85:	e8 64 98 ff ff       	call   c01017ee <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c0107f8a:	83 ec 0c             	sub    $0xc,%esp
c0107f8d:	68 bc e6 10 c0       	push   $0xc010e6bc
c0107f92:	e8 1b 83 ff ff       	call   c01002b2 <cprintf>
c0107f97:	83 c4 10             	add    $0x10,%esp
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c0107f9a:	c7 05 0c 60 1b c0 00 	movl   $0x0,0xc01b600c
c0107fa1:	00 00 00 
     
     check_content_set();
c0107fa4:	e8 fc fa ff ff       	call   c0107aa5 <check_content_set>
     assert( nr_free == 0);         
c0107fa9:	a1 54 81 1b c0       	mov    0xc01b8154,%eax
c0107fae:	85 c0                	test   %eax,%eax
c0107fb0:	74 19                	je     c0107fcb <check_swap+0x3ad>
c0107fb2:	68 e3 e6 10 c0       	push   $0xc010e6e3
c0107fb7:	68 5a e4 10 c0       	push   $0xc010e45a
c0107fbc:	68 f2 00 00 00       	push   $0xf2
c0107fc1:	68 f4 e3 10 c0       	push   $0xc010e3f4
c0107fc6:	e8 23 98 ff ff       	call   c01017ee <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0107fcb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107fd2:	eb 26                	jmp    c0107ffa <check_swap+0x3dc>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c0107fd4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107fd7:	c7 04 85 a0 80 1b c0 	movl   $0xffffffff,-0x3fe47f60(,%eax,4)
c0107fde:	ff ff ff ff 
c0107fe2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107fe5:	8b 14 85 a0 80 1b c0 	mov    -0x3fe47f60(,%eax,4),%edx
c0107fec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107fef:	89 14 85 e0 80 1b c0 	mov    %edx,-0x3fe47f20(,%eax,4)
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0107ff6:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107ffa:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c0107ffe:	7e d4                	jle    c0107fd4 <check_swap+0x3b6>
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0108000:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0108007:	e9 c8 00 00 00       	jmp    c01080d4 <check_swap+0x4b6>
         check_ptep[i]=0;
c010800c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010800f:	c7 04 85 34 81 1b c0 	movl   $0x0,-0x3fe47ecc(,%eax,4)
c0108016:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c010801a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010801d:	83 c0 01             	add    $0x1,%eax
c0108020:	c1 e0 0c             	shl    $0xc,%eax
c0108023:	83 ec 04             	sub    $0x4,%esp
c0108026:	6a 00                	push   $0x0
c0108028:	50                   	push   %eax
c0108029:	ff 75 e0             	pushl  -0x20(%ebp)
c010802c:	e8 af d2 ff ff       	call   c01052e0 <get_pte>
c0108031:	83 c4 10             	add    $0x10,%esp
c0108034:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108037:	89 04 95 34 81 1b c0 	mov    %eax,-0x3fe47ecc(,%edx,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c010803e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108041:	8b 04 85 34 81 1b c0 	mov    -0x3fe47ecc(,%eax,4),%eax
c0108048:	85 c0                	test   %eax,%eax
c010804a:	75 19                	jne    c0108065 <check_swap+0x447>
c010804c:	68 f0 e6 10 c0       	push   $0xc010e6f0
c0108051:	68 5a e4 10 c0       	push   $0xc010e45a
c0108056:	68 fa 00 00 00       	push   $0xfa
c010805b:	68 f4 e3 10 c0       	push   $0xc010e3f4
c0108060:	e8 89 97 ff ff       	call   c01017ee <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c0108065:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108068:	8b 04 85 34 81 1b c0 	mov    -0x3fe47ecc(,%eax,4),%eax
c010806f:	8b 00                	mov    (%eax),%eax
c0108071:	83 ec 0c             	sub    $0xc,%esp
c0108074:	50                   	push   %eax
c0108075:	e8 bd f6 ff ff       	call   c0107737 <pte2page>
c010807a:	83 c4 10             	add    $0x10,%esp
c010807d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108080:	8b 14 95 80 80 1b c0 	mov    -0x3fe47f80(,%edx,4),%edx
c0108087:	39 d0                	cmp    %edx,%eax
c0108089:	74 19                	je     c01080a4 <check_swap+0x486>
c010808b:	68 08 e7 10 c0       	push   $0xc010e708
c0108090:	68 5a e4 10 c0       	push   $0xc010e45a
c0108095:	68 fb 00 00 00       	push   $0xfb
c010809a:	68 f4 e3 10 c0       	push   $0xc010e3f4
c010809f:	e8 4a 97 ff ff       	call   c01017ee <__panic>
         assert((*check_ptep[i] & PTE_P));          
c01080a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01080a7:	8b 04 85 34 81 1b c0 	mov    -0x3fe47ecc(,%eax,4),%eax
c01080ae:	8b 00                	mov    (%eax),%eax
c01080b0:	83 e0 01             	and    $0x1,%eax
c01080b3:	85 c0                	test   %eax,%eax
c01080b5:	75 19                	jne    c01080d0 <check_swap+0x4b2>
c01080b7:	68 30 e7 10 c0       	push   $0xc010e730
c01080bc:	68 5a e4 10 c0       	push   $0xc010e45a
c01080c1:	68 fc 00 00 00       	push   $0xfc
c01080c6:	68 f4 e3 10 c0       	push   $0xc010e3f4
c01080cb:	e8 1e 97 ff ff       	call   c01017ee <__panic>
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01080d0:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01080d4:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01080d8:	0f 8e 2e ff ff ff    	jle    c010800c <check_swap+0x3ee>
     }
     cprintf("set up init env for check_swap over!\n");
c01080de:	83 ec 0c             	sub    $0xc,%esp
c01080e1:	68 4c e7 10 c0       	push   $0xc010e74c
c01080e6:	e8 c7 81 ff ff       	call   c01002b2 <cprintf>
c01080eb:	83 c4 10             	add    $0x10,%esp
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c01080ee:	e8 13 fb ff ff       	call   c0107c06 <check_content_access>
c01080f3:	89 45 d0             	mov    %eax,-0x30(%ebp)
     assert(ret==0);
c01080f6:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c01080fa:	74 19                	je     c0108115 <check_swap+0x4f7>
c01080fc:	68 72 e7 10 c0       	push   $0xc010e772
c0108101:	68 5a e4 10 c0       	push   $0xc010e45a
c0108106:	68 01 01 00 00       	push   $0x101
c010810b:	68 f4 e3 10 c0       	push   $0xc010e3f4
c0108110:	e8 d9 96 ff ff       	call   c01017ee <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0108115:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010811c:	eb 1c                	jmp    c010813a <check_swap+0x51c>
         free_pages(check_rp[i],1);
c010811e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108121:	8b 04 85 80 80 1b c0 	mov    -0x3fe47f80(,%eax,4),%eax
c0108128:	83 ec 08             	sub    $0x8,%esp
c010812b:	6a 01                	push   $0x1
c010812d:	50                   	push   %eax
c010812e:	e8 a3 cb ff ff       	call   c0104cd6 <free_pages>
c0108133:	83 c4 10             	add    $0x10,%esp
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0108136:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010813a:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c010813e:	7e de                	jle    c010811e <check_swap+0x500>
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c0108140:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108143:	8b 00                	mov    (%eax),%eax
c0108145:	83 ec 0c             	sub    $0xc,%esp
c0108148:	50                   	push   %eax
c0108149:	e8 23 f6 ff ff       	call   c0107771 <pde2page>
c010814e:	83 c4 10             	add    $0x10,%esp
c0108151:	83 ec 08             	sub    $0x8,%esp
c0108154:	6a 01                	push   $0x1
c0108156:	50                   	push   %eax
c0108157:	e8 7a cb ff ff       	call   c0104cd6 <free_pages>
c010815c:	83 c4 10             	add    $0x10,%esp
     pgdir[0] = 0;
c010815f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108162:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c0108168:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010816b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c0108172:	83 ec 0c             	sub    $0xc,%esp
c0108175:	ff 75 e4             	pushl  -0x1c(%ebp)
c0108178:	e8 d4 e7 ff ff       	call   c0106951 <mm_destroy>
c010817d:	83 c4 10             	add    $0x10,%esp
     check_mm_struct = NULL;
c0108180:	c7 05 64 80 1b c0 00 	movl   $0x0,0xc01b8064
c0108187:	00 00 00 
     
     nr_free = nr_free_store;
c010818a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010818d:	a3 54 81 1b c0       	mov    %eax,0xc01b8154
     free_list = free_list_store;
c0108192:	8b 45 98             	mov    -0x68(%ebp),%eax
c0108195:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0108198:	a3 4c 81 1b c0       	mov    %eax,0xc01b814c
c010819d:	89 15 50 81 1b c0    	mov    %edx,0xc01b8150

     
     le = &free_list;
c01081a3:	c7 45 e8 4c 81 1b c0 	movl   $0xc01b814c,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c01081aa:	eb 1d                	jmp    c01081c9 <check_swap+0x5ab>
         struct Page *p = le2page(le, page_link);
c01081ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01081af:	83 e8 10             	sub    $0x10,%eax
c01081b2:	89 45 cc             	mov    %eax,-0x34(%ebp)
         count --, total -= p->property;
c01081b5:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01081b9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01081bc:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01081bf:	8b 40 08             	mov    0x8(%eax),%eax
c01081c2:	29 c2                	sub    %eax,%edx
c01081c4:	89 d0                	mov    %edx,%eax
c01081c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01081c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01081cc:	89 45 a0             	mov    %eax,-0x60(%ebp)
    return listelm->next;
c01081cf:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01081d2:	8b 40 04             	mov    0x4(%eax),%eax
     while ((le = list_next(le)) != &free_list) {
c01081d5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01081d8:	81 7d e8 4c 81 1b c0 	cmpl   $0xc01b814c,-0x18(%ebp)
c01081df:	75 cb                	jne    c01081ac <check_swap+0x58e>
     }
     cprintf("count is %d, total is %d\n",count,total);
c01081e1:	83 ec 04             	sub    $0x4,%esp
c01081e4:	ff 75 f0             	pushl  -0x10(%ebp)
c01081e7:	ff 75 f4             	pushl  -0xc(%ebp)
c01081ea:	68 79 e7 10 c0       	push   $0xc010e779
c01081ef:	e8 be 80 ff ff       	call   c01002b2 <cprintf>
c01081f4:	83 c4 10             	add    $0x10,%esp
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c01081f7:	83 ec 0c             	sub    $0xc,%esp
c01081fa:	68 93 e7 10 c0       	push   $0xc010e793
c01081ff:	e8 ae 80 ff ff       	call   c01002b2 <cprintf>
c0108204:	83 c4 10             	add    $0x10,%esp
}
c0108207:	90                   	nop
c0108208:	c9                   	leave  
c0108209:	c3                   	ret    

c010820a <__intr_save>:
__intr_save(void) {
c010820a:	55                   	push   %ebp
c010820b:	89 e5                	mov    %esp,%ebp
c010820d:	83 ec 18             	sub    $0x18,%esp
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0108210:	9c                   	pushf  
c0108211:	58                   	pop    %eax
c0108212:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0108215:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0108218:	25 00 02 00 00       	and    $0x200,%eax
c010821d:	85 c0                	test   %eax,%eax
c010821f:	74 0c                	je     c010822d <__intr_save+0x23>
        intr_disable();
c0108221:	e8 d9 b3 ff ff       	call   c01035ff <intr_disable>
        return 1;
c0108226:	b8 01 00 00 00       	mov    $0x1,%eax
c010822b:	eb 05                	jmp    c0108232 <__intr_save+0x28>
    return 0;
c010822d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108232:	c9                   	leave  
c0108233:	c3                   	ret    

c0108234 <__intr_restore>:
__intr_restore(bool flag) {
c0108234:	55                   	push   %ebp
c0108235:	89 e5                	mov    %esp,%ebp
c0108237:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010823a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010823e:	74 05                	je     c0108245 <__intr_restore+0x11>
        intr_enable();
c0108240:	e8 ae b3 ff ff       	call   c01035f3 <intr_enable>
}
c0108245:	90                   	nop
c0108246:	c9                   	leave  
c0108247:	c3                   	ret    

c0108248 <page2ppn>:
page2ppn(struct Page *page) {
c0108248:	55                   	push   %ebp
c0108249:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010824b:	a1 60 80 1b c0       	mov    0xc01b8060,%eax
c0108250:	8b 55 08             	mov    0x8(%ebp),%edx
c0108253:	29 c2                	sub    %eax,%edx
c0108255:	89 d0                	mov    %edx,%eax
c0108257:	c1 f8 02             	sar    $0x2,%eax
c010825a:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c0108260:	5d                   	pop    %ebp
c0108261:	c3                   	ret    

c0108262 <page2pa>:
page2pa(struct Page *page) {
c0108262:	55                   	push   %ebp
c0108263:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0108265:	ff 75 08             	pushl  0x8(%ebp)
c0108268:	e8 db ff ff ff       	call   c0108248 <page2ppn>
c010826d:	83 c4 04             	add    $0x4,%esp
c0108270:	c1 e0 0c             	shl    $0xc,%eax
}
c0108273:	c9                   	leave  
c0108274:	c3                   	ret    

c0108275 <pa2page>:
pa2page(uintptr_t pa) {
c0108275:	55                   	push   %ebp
c0108276:	89 e5                	mov    %esp,%ebp
c0108278:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c010827b:	8b 45 08             	mov    0x8(%ebp),%eax
c010827e:	c1 e8 0c             	shr    $0xc,%eax
c0108281:	89 c2                	mov    %eax,%edx
c0108283:	a1 80 5f 1b c0       	mov    0xc01b5f80,%eax
c0108288:	39 c2                	cmp    %eax,%edx
c010828a:	72 14                	jb     c01082a0 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c010828c:	83 ec 04             	sub    $0x4,%esp
c010828f:	68 ac e7 10 c0       	push   $0xc010e7ac
c0108294:	6a 5e                	push   $0x5e
c0108296:	68 cb e7 10 c0       	push   $0xc010e7cb
c010829b:	e8 4e 95 ff ff       	call   c01017ee <__panic>
    return &pages[PPN(pa)];
c01082a0:	8b 0d 60 80 1b c0    	mov    0xc01b8060,%ecx
c01082a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01082a9:	c1 e8 0c             	shr    $0xc,%eax
c01082ac:	89 c2                	mov    %eax,%edx
c01082ae:	89 d0                	mov    %edx,%eax
c01082b0:	c1 e0 03             	shl    $0x3,%eax
c01082b3:	01 d0                	add    %edx,%eax
c01082b5:	c1 e0 02             	shl    $0x2,%eax
c01082b8:	01 c8                	add    %ecx,%eax
}
c01082ba:	c9                   	leave  
c01082bb:	c3                   	ret    

c01082bc <page2kva>:
page2kva(struct Page *page) {
c01082bc:	55                   	push   %ebp
c01082bd:	89 e5                	mov    %esp,%ebp
c01082bf:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c01082c2:	ff 75 08             	pushl  0x8(%ebp)
c01082c5:	e8 98 ff ff ff       	call   c0108262 <page2pa>
c01082ca:	83 c4 04             	add    $0x4,%esp
c01082cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01082d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01082d3:	c1 e8 0c             	shr    $0xc,%eax
c01082d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01082d9:	a1 80 5f 1b c0       	mov    0xc01b5f80,%eax
c01082de:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01082e1:	72 14                	jb     c01082f7 <page2kva+0x3b>
c01082e3:	ff 75 f4             	pushl  -0xc(%ebp)
c01082e6:	68 dc e7 10 c0       	push   $0xc010e7dc
c01082eb:	6a 65                	push   $0x65
c01082ed:	68 cb e7 10 c0       	push   $0xc010e7cb
c01082f2:	e8 f7 94 ff ff       	call   c01017ee <__panic>
c01082f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01082fa:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c01082ff:	c9                   	leave  
c0108300:	c3                   	ret    

c0108301 <kva2page>:
kva2page(void *kva) {
c0108301:	55                   	push   %ebp
c0108302:	89 e5                	mov    %esp,%ebp
c0108304:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PADDR(kva));
c0108307:	8b 45 08             	mov    0x8(%ebp),%eax
c010830a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010830d:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0108314:	77 14                	ja     c010832a <kva2page+0x29>
c0108316:	ff 75 f4             	pushl  -0xc(%ebp)
c0108319:	68 00 e8 10 c0       	push   $0xc010e800
c010831e:	6a 6a                	push   $0x6a
c0108320:	68 cb e7 10 c0       	push   $0xc010e7cb
c0108325:	e8 c4 94 ff ff       	call   c01017ee <__panic>
c010832a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010832d:	05 00 00 00 40       	add    $0x40000000,%eax
c0108332:	83 ec 0c             	sub    $0xc,%esp
c0108335:	50                   	push   %eax
c0108336:	e8 3a ff ff ff       	call   c0108275 <pa2page>
c010833b:	83 c4 10             	add    $0x10,%esp
}
c010833e:	c9                   	leave  
c010833f:	c3                   	ret    

c0108340 <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c0108340:	f3 0f 1e fb          	endbr32 
c0108344:	55                   	push   %ebp
c0108345:	89 e5                	mov    %esp,%ebp
c0108347:	83 ec 18             	sub    $0x18,%esp
  struct Page * page = alloc_pages(1 << order);
c010834a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010834d:	ba 01 00 00 00       	mov    $0x1,%edx
c0108352:	89 c1                	mov    %eax,%ecx
c0108354:	d3 e2                	shl    %cl,%edx
c0108356:	89 d0                	mov    %edx,%eax
c0108358:	83 ec 0c             	sub    $0xc,%esp
c010835b:	50                   	push   %eax
c010835c:	e8 05 c9 ff ff       	call   c0104c66 <alloc_pages>
c0108361:	83 c4 10             	add    $0x10,%esp
c0108364:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c0108367:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010836b:	75 07                	jne    c0108374 <__slob_get_free_pages+0x34>
    return NULL;
c010836d:	b8 00 00 00 00       	mov    $0x0,%eax
c0108372:	eb 0e                	jmp    c0108382 <__slob_get_free_pages+0x42>
  return page2kva(page);
c0108374:	83 ec 0c             	sub    $0xc,%esp
c0108377:	ff 75 f4             	pushl  -0xc(%ebp)
c010837a:	e8 3d ff ff ff       	call   c01082bc <page2kva>
c010837f:	83 c4 10             	add    $0x10,%esp
}
c0108382:	c9                   	leave  
c0108383:	c3                   	ret    

c0108384 <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c0108384:	55                   	push   %ebp
c0108385:	89 e5                	mov    %esp,%ebp
c0108387:	53                   	push   %ebx
c0108388:	83 ec 04             	sub    $0x4,%esp
  free_pages(kva2page(kva), 1 << order);
c010838b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010838e:	ba 01 00 00 00       	mov    $0x1,%edx
c0108393:	89 c1                	mov    %eax,%ecx
c0108395:	d3 e2                	shl    %cl,%edx
c0108397:	89 d0                	mov    %edx,%eax
c0108399:	89 c3                	mov    %eax,%ebx
c010839b:	8b 45 08             	mov    0x8(%ebp),%eax
c010839e:	83 ec 0c             	sub    $0xc,%esp
c01083a1:	50                   	push   %eax
c01083a2:	e8 5a ff ff ff       	call   c0108301 <kva2page>
c01083a7:	83 c4 10             	add    $0x10,%esp
c01083aa:	83 ec 08             	sub    $0x8,%esp
c01083ad:	53                   	push   %ebx
c01083ae:	50                   	push   %eax
c01083af:	e8 22 c9 ff ff       	call   c0104cd6 <free_pages>
c01083b4:	83 c4 10             	add    $0x10,%esp
}
c01083b7:	90                   	nop
c01083b8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01083bb:	c9                   	leave  
c01083bc:	c3                   	ret    

c01083bd <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c01083bd:	f3 0f 1e fb          	endbr32 
c01083c1:	55                   	push   %ebp
c01083c2:	89 e5                	mov    %esp,%ebp
c01083c4:	83 ec 28             	sub    $0x28,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c01083c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01083ca:	83 c0 08             	add    $0x8,%eax
c01083cd:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c01083d2:	76 16                	jbe    c01083ea <slob_alloc+0x2d>
c01083d4:	68 24 e8 10 c0       	push   $0xc010e824
c01083d9:	68 43 e8 10 c0       	push   $0xc010e843
c01083de:	6a 64                	push   $0x64
c01083e0:	68 58 e8 10 c0       	push   $0xc010e858
c01083e5:	e8 04 94 ff ff       	call   c01017ee <__panic>

	slob_t *prev, *cur, *aligned = 0;
c01083ea:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c01083f1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c01083f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01083fb:	83 c0 07             	add    $0x7,%eax
c01083fe:	c1 e8 03             	shr    $0x3,%eax
c0108401:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c0108404:	e8 01 fe ff ff       	call   c010820a <__intr_save>
c0108409:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c010840c:	a1 40 2a 13 c0       	mov    0xc0132a40,%eax
c0108411:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0108414:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108417:	8b 40 04             	mov    0x4(%eax),%eax
c010841a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c010841d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0108421:	74 21                	je     c0108444 <slob_alloc+0x87>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c0108423:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108426:	8b 45 10             	mov    0x10(%ebp),%eax
c0108429:	01 d0                	add    %edx,%eax
c010842b:	8d 50 ff             	lea    -0x1(%eax),%edx
c010842e:	8b 45 10             	mov    0x10(%ebp),%eax
c0108431:	f7 d8                	neg    %eax
c0108433:	21 d0                	and    %edx,%eax
c0108435:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c0108438:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010843b:	2b 45 f0             	sub    -0x10(%ebp),%eax
c010843e:	c1 f8 03             	sar    $0x3,%eax
c0108441:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c0108444:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108447:	8b 00                	mov    (%eax),%eax
c0108449:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c010844c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010844f:	01 ca                	add    %ecx,%edx
c0108451:	39 d0                	cmp    %edx,%eax
c0108453:	0f 8c b1 00 00 00    	jl     c010850a <slob_alloc+0x14d>
			if (delta) { /* need to fragment head to align? */
c0108459:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010845d:	74 38                	je     c0108497 <slob_alloc+0xda>
				aligned->units = cur->units - delta;
c010845f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108462:	8b 00                	mov    (%eax),%eax
c0108464:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0108467:	89 c2                	mov    %eax,%edx
c0108469:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010846c:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c010846e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108471:	8b 50 04             	mov    0x4(%eax),%edx
c0108474:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108477:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c010847a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010847d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108480:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c0108483:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108486:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0108489:	89 10                	mov    %edx,(%eax)
				prev = cur;
c010848b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010848e:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c0108491:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108494:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0108497:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010849a:	8b 00                	mov    (%eax),%eax
c010849c:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c010849f:	75 0e                	jne    c01084af <slob_alloc+0xf2>
				prev->next = cur->next; /* unlink */
c01084a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01084a4:	8b 50 04             	mov    0x4(%eax),%edx
c01084a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084aa:	89 50 04             	mov    %edx,0x4(%eax)
c01084ad:	eb 3c                	jmp    c01084eb <slob_alloc+0x12e>
			else { /* fragment */
				prev->next = cur + units;
c01084af:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01084b2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01084b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01084bc:	01 c2                	add    %eax,%edx
c01084be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084c1:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c01084c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01084c7:	8b 10                	mov    (%eax),%edx
c01084c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084cc:	8b 40 04             	mov    0x4(%eax),%eax
c01084cf:	2b 55 e0             	sub    -0x20(%ebp),%edx
c01084d2:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c01084d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084d7:	8b 40 04             	mov    0x4(%eax),%eax
c01084da:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01084dd:	8b 52 04             	mov    0x4(%edx),%edx
c01084e0:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c01084e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01084e6:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01084e9:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c01084eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084ee:	a3 40 2a 13 c0       	mov    %eax,0xc0132a40
			spin_unlock_irqrestore(&slob_lock, flags);
c01084f3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01084f6:	83 ec 0c             	sub    $0xc,%esp
c01084f9:	50                   	push   %eax
c01084fa:	e8 35 fd ff ff       	call   c0108234 <__intr_restore>
c01084ff:	83 c4 10             	add    $0x10,%esp
			return cur;
c0108502:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108505:	e9 80 00 00 00       	jmp    c010858a <slob_alloc+0x1cd>
		}
		if (cur == slobfree) {
c010850a:	a1 40 2a 13 c0       	mov    0xc0132a40,%eax
c010850f:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0108512:	75 62                	jne    c0108576 <slob_alloc+0x1b9>
			spin_unlock_irqrestore(&slob_lock, flags);
c0108514:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108517:	83 ec 0c             	sub    $0xc,%esp
c010851a:	50                   	push   %eax
c010851b:	e8 14 fd ff ff       	call   c0108234 <__intr_restore>
c0108520:	83 c4 10             	add    $0x10,%esp

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c0108523:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c010852a:	75 07                	jne    c0108533 <slob_alloc+0x176>
				return 0;
c010852c:	b8 00 00 00 00       	mov    $0x0,%eax
c0108531:	eb 57                	jmp    c010858a <slob_alloc+0x1cd>

			cur = (slob_t *)__slob_get_free_page(gfp);
c0108533:	83 ec 08             	sub    $0x8,%esp
c0108536:	6a 00                	push   $0x0
c0108538:	ff 75 0c             	pushl  0xc(%ebp)
c010853b:	e8 00 fe ff ff       	call   c0108340 <__slob_get_free_pages>
c0108540:	83 c4 10             	add    $0x10,%esp
c0108543:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0108546:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010854a:	75 07                	jne    c0108553 <slob_alloc+0x196>
				return 0;
c010854c:	b8 00 00 00 00       	mov    $0x0,%eax
c0108551:	eb 37                	jmp    c010858a <slob_alloc+0x1cd>

			slob_free(cur, PAGE_SIZE);
c0108553:	83 ec 08             	sub    $0x8,%esp
c0108556:	68 00 10 00 00       	push   $0x1000
c010855b:	ff 75 f0             	pushl  -0x10(%ebp)
c010855e:	e8 29 00 00 00       	call   c010858c <slob_free>
c0108563:	83 c4 10             	add    $0x10,%esp
			spin_lock_irqsave(&slob_lock, flags);
c0108566:	e8 9f fc ff ff       	call   c010820a <__intr_save>
c010856b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c010856e:	a1 40 2a 13 c0       	mov    0xc0132a40,%eax
c0108573:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0108576:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108579:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010857c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010857f:	8b 40 04             	mov    0x4(%eax),%eax
c0108582:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c0108585:	e9 93 fe ff ff       	jmp    c010841d <slob_alloc+0x60>
		}
	}
}
c010858a:	c9                   	leave  
c010858b:	c3                   	ret    

c010858c <slob_free>:

static void slob_free(void *block, int size)
{
c010858c:	f3 0f 1e fb          	endbr32 
c0108590:	55                   	push   %ebp
c0108591:	89 e5                	mov    %esp,%ebp
c0108593:	83 ec 18             	sub    $0x18,%esp
	slob_t *cur, *b = (slob_t *)block;
c0108596:	8b 45 08             	mov    0x8(%ebp),%eax
c0108599:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c010859c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01085a0:	0f 84 05 01 00 00    	je     c01086ab <slob_free+0x11f>
		return;

	if (size)
c01085a6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01085aa:	74 10                	je     c01085bc <slob_free+0x30>
		b->units = SLOB_UNITS(size);
c01085ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c01085af:	83 c0 07             	add    $0x7,%eax
c01085b2:	c1 e8 03             	shr    $0x3,%eax
c01085b5:	89 c2                	mov    %eax,%edx
c01085b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01085ba:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c01085bc:	e8 49 fc ff ff       	call   c010820a <__intr_save>
c01085c1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c01085c4:	a1 40 2a 13 c0       	mov    0xc0132a40,%eax
c01085c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01085cc:	eb 27                	jmp    c01085f5 <slob_free+0x69>
		if (cur >= cur->next && (b > cur || b < cur->next))
c01085ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085d1:	8b 40 04             	mov    0x4(%eax),%eax
c01085d4:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c01085d7:	72 13                	jb     c01085ec <slob_free+0x60>
c01085d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01085dc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01085df:	77 27                	ja     c0108608 <slob_free+0x7c>
c01085e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085e4:	8b 40 04             	mov    0x4(%eax),%eax
c01085e7:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01085ea:	72 1c                	jb     c0108608 <slob_free+0x7c>
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c01085ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085ef:	8b 40 04             	mov    0x4(%eax),%eax
c01085f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01085f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01085f8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01085fb:	76 d1                	jbe    c01085ce <slob_free+0x42>
c01085fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108600:	8b 40 04             	mov    0x4(%eax),%eax
c0108603:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0108606:	73 c6                	jae    c01085ce <slob_free+0x42>
			break;

	if (b + b->units == cur->next) {
c0108608:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010860b:	8b 00                	mov    (%eax),%eax
c010860d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0108614:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108617:	01 c2                	add    %eax,%edx
c0108619:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010861c:	8b 40 04             	mov    0x4(%eax),%eax
c010861f:	39 c2                	cmp    %eax,%edx
c0108621:	75 25                	jne    c0108648 <slob_free+0xbc>
		b->units += cur->next->units;
c0108623:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108626:	8b 10                	mov    (%eax),%edx
c0108628:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010862b:	8b 40 04             	mov    0x4(%eax),%eax
c010862e:	8b 00                	mov    (%eax),%eax
c0108630:	01 c2                	add    %eax,%edx
c0108632:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108635:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0108637:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010863a:	8b 40 04             	mov    0x4(%eax),%eax
c010863d:	8b 50 04             	mov    0x4(%eax),%edx
c0108640:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108643:	89 50 04             	mov    %edx,0x4(%eax)
c0108646:	eb 0c                	jmp    c0108654 <slob_free+0xc8>
	} else
		b->next = cur->next;
c0108648:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010864b:	8b 50 04             	mov    0x4(%eax),%edx
c010864e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108651:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0108654:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108657:	8b 00                	mov    (%eax),%eax
c0108659:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0108660:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108663:	01 d0                	add    %edx,%eax
c0108665:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0108668:	75 1f                	jne    c0108689 <slob_free+0xfd>
		cur->units += b->units;
c010866a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010866d:	8b 10                	mov    (%eax),%edx
c010866f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108672:	8b 00                	mov    (%eax),%eax
c0108674:	01 c2                	add    %eax,%edx
c0108676:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108679:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c010867b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010867e:	8b 50 04             	mov    0x4(%eax),%edx
c0108681:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108684:	89 50 04             	mov    %edx,0x4(%eax)
c0108687:	eb 09                	jmp    c0108692 <slob_free+0x106>
	} else
		cur->next = b;
c0108689:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010868c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010868f:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0108692:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108695:	a3 40 2a 13 c0       	mov    %eax,0xc0132a40

	spin_unlock_irqrestore(&slob_lock, flags);
c010869a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010869d:	83 ec 0c             	sub    $0xc,%esp
c01086a0:	50                   	push   %eax
c01086a1:	e8 8e fb ff ff       	call   c0108234 <__intr_restore>
c01086a6:	83 c4 10             	add    $0x10,%esp
c01086a9:	eb 01                	jmp    c01086ac <slob_free+0x120>
		return;
c01086ab:	90                   	nop
}
c01086ac:	c9                   	leave  
c01086ad:	c3                   	ret    

c01086ae <check_slab>:



void check_slab(void) {
c01086ae:	f3 0f 1e fb          	endbr32 
c01086b2:	55                   	push   %ebp
c01086b3:	89 e5                	mov    %esp,%ebp
c01086b5:	83 ec 08             	sub    $0x8,%esp
  cprintf("check_slab() success\n");
c01086b8:	83 ec 0c             	sub    $0xc,%esp
c01086bb:	68 6a e8 10 c0       	push   $0xc010e86a
c01086c0:	e8 ed 7b ff ff       	call   c01002b2 <cprintf>
c01086c5:	83 c4 10             	add    $0x10,%esp
}
c01086c8:	90                   	nop
c01086c9:	c9                   	leave  
c01086ca:	c3                   	ret    

c01086cb <slab_init>:

void
slab_init(void) {
c01086cb:	f3 0f 1e fb          	endbr32 
c01086cf:	55                   	push   %ebp
c01086d0:	89 e5                	mov    %esp,%ebp
c01086d2:	83 ec 08             	sub    $0x8,%esp
  cprintf("use SLOB allocator\n");
c01086d5:	83 ec 0c             	sub    $0xc,%esp
c01086d8:	68 80 e8 10 c0       	push   $0xc010e880
c01086dd:	e8 d0 7b ff ff       	call   c01002b2 <cprintf>
c01086e2:	83 c4 10             	add    $0x10,%esp
  check_slab();
c01086e5:	e8 c4 ff ff ff       	call   c01086ae <check_slab>
}
c01086ea:	90                   	nop
c01086eb:	c9                   	leave  
c01086ec:	c3                   	ret    

c01086ed <kmalloc_init>:

inline void 
kmalloc_init(void) {
c01086ed:	f3 0f 1e fb          	endbr32 
c01086f1:	55                   	push   %ebp
c01086f2:	89 e5                	mov    %esp,%ebp
c01086f4:	83 ec 08             	sub    $0x8,%esp
    slab_init();
c01086f7:	e8 cf ff ff ff       	call   c01086cb <slab_init>
    cprintf("kmalloc_init() succeeded!\n");
c01086fc:	83 ec 0c             	sub    $0xc,%esp
c01086ff:	68 94 e8 10 c0       	push   $0xc010e894
c0108704:	e8 a9 7b ff ff       	call   c01002b2 <cprintf>
c0108709:	83 c4 10             	add    $0x10,%esp
}
c010870c:	90                   	nop
c010870d:	c9                   	leave  
c010870e:	c3                   	ret    

c010870f <slab_allocated>:

size_t
slab_allocated(void) {
c010870f:	f3 0f 1e fb          	endbr32 
c0108713:	55                   	push   %ebp
c0108714:	89 e5                	mov    %esp,%ebp
  return 0;
c0108716:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010871b:	5d                   	pop    %ebp
c010871c:	c3                   	ret    

c010871d <kallocated>:

size_t
kallocated(void) {
c010871d:	f3 0f 1e fb          	endbr32 
c0108721:	55                   	push   %ebp
c0108722:	89 e5                	mov    %esp,%ebp
   return slab_allocated();
c0108724:	e8 e6 ff ff ff       	call   c010870f <slab_allocated>
}
c0108729:	5d                   	pop    %ebp
c010872a:	c3                   	ret    

c010872b <find_order>:

static int find_order(int size)
{
c010872b:	f3 0f 1e fb          	endbr32 
c010872f:	55                   	push   %ebp
c0108730:	89 e5                	mov    %esp,%ebp
c0108732:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0108735:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c010873c:	eb 07                	jmp    c0108745 <find_order+0x1a>
		order++;
c010873e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0108742:	d1 7d 08             	sarl   0x8(%ebp)
c0108745:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c010874c:	7f f0                	jg     c010873e <find_order+0x13>
	return order;
c010874e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0108751:	c9                   	leave  
c0108752:	c3                   	ret    

c0108753 <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0108753:	f3 0f 1e fb          	endbr32 
c0108757:	55                   	push   %ebp
c0108758:	89 e5                	mov    %esp,%ebp
c010875a:	83 ec 18             	sub    $0x18,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c010875d:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0108764:	77 35                	ja     c010879b <__kmalloc+0x48>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0108766:	8b 45 08             	mov    0x8(%ebp),%eax
c0108769:	83 c0 08             	add    $0x8,%eax
c010876c:	83 ec 04             	sub    $0x4,%esp
c010876f:	6a 00                	push   $0x0
c0108771:	ff 75 0c             	pushl  0xc(%ebp)
c0108774:	50                   	push   %eax
c0108775:	e8 43 fc ff ff       	call   c01083bd <slob_alloc>
c010877a:	83 c4 10             	add    $0x10,%esp
c010877d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		return m ? (void *)(m + 1) : 0;
c0108780:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108784:	74 0b                	je     c0108791 <__kmalloc+0x3e>
c0108786:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108789:	83 c0 08             	add    $0x8,%eax
c010878c:	e9 af 00 00 00       	jmp    c0108840 <__kmalloc+0xed>
c0108791:	b8 00 00 00 00       	mov    $0x0,%eax
c0108796:	e9 a5 00 00 00       	jmp    c0108840 <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c010879b:	83 ec 04             	sub    $0x4,%esp
c010879e:	6a 00                	push   $0x0
c01087a0:	ff 75 0c             	pushl  0xc(%ebp)
c01087a3:	6a 0c                	push   $0xc
c01087a5:	e8 13 fc ff ff       	call   c01083bd <slob_alloc>
c01087aa:	83 c4 10             	add    $0x10,%esp
c01087ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!bb)
c01087b0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01087b4:	75 0a                	jne    c01087c0 <__kmalloc+0x6d>
		return 0;
c01087b6:	b8 00 00 00 00       	mov    $0x0,%eax
c01087bb:	e9 80 00 00 00       	jmp    c0108840 <__kmalloc+0xed>

	bb->order = find_order(size);
c01087c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01087c3:	83 ec 0c             	sub    $0xc,%esp
c01087c6:	50                   	push   %eax
c01087c7:	e8 5f ff ff ff       	call   c010872b <find_order>
c01087cc:	83 c4 10             	add    $0x10,%esp
c01087cf:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01087d2:	89 02                	mov    %eax,(%edx)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c01087d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01087d7:	8b 00                	mov    (%eax),%eax
c01087d9:	83 ec 08             	sub    $0x8,%esp
c01087dc:	50                   	push   %eax
c01087dd:	ff 75 0c             	pushl  0xc(%ebp)
c01087e0:	e8 5b fb ff ff       	call   c0108340 <__slob_get_free_pages>
c01087e5:	83 c4 10             	add    $0x10,%esp
c01087e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01087eb:	89 42 04             	mov    %eax,0x4(%edx)

	if (bb->pages) {
c01087ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01087f1:	8b 40 04             	mov    0x4(%eax),%eax
c01087f4:	85 c0                	test   %eax,%eax
c01087f6:	74 33                	je     c010882b <__kmalloc+0xd8>
		spin_lock_irqsave(&block_lock, flags);
c01087f8:	e8 0d fa ff ff       	call   c010820a <__intr_save>
c01087fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		bb->next = bigblocks;
c0108800:	8b 15 1c 60 1b c0    	mov    0xc01b601c,%edx
c0108806:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108809:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c010880c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010880f:	a3 1c 60 1b c0       	mov    %eax,0xc01b601c
		spin_unlock_irqrestore(&block_lock, flags);
c0108814:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108817:	83 ec 0c             	sub    $0xc,%esp
c010881a:	50                   	push   %eax
c010881b:	e8 14 fa ff ff       	call   c0108234 <__intr_restore>
c0108820:	83 c4 10             	add    $0x10,%esp
		return bb->pages;
c0108823:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108826:	8b 40 04             	mov    0x4(%eax),%eax
c0108829:	eb 15                	jmp    c0108840 <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c010882b:	83 ec 08             	sub    $0x8,%esp
c010882e:	6a 0c                	push   $0xc
c0108830:	ff 75 f4             	pushl  -0xc(%ebp)
c0108833:	e8 54 fd ff ff       	call   c010858c <slob_free>
c0108838:	83 c4 10             	add    $0x10,%esp
	return 0;
c010883b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108840:	c9                   	leave  
c0108841:	c3                   	ret    

c0108842 <kmalloc>:

void *
kmalloc(size_t size)
{
c0108842:	f3 0f 1e fb          	endbr32 
c0108846:	55                   	push   %ebp
c0108847:	89 e5                	mov    %esp,%ebp
c0108849:	83 ec 08             	sub    $0x8,%esp
  return __kmalloc(size, 0);
c010884c:	83 ec 08             	sub    $0x8,%esp
c010884f:	6a 00                	push   $0x0
c0108851:	ff 75 08             	pushl  0x8(%ebp)
c0108854:	e8 fa fe ff ff       	call   c0108753 <__kmalloc>
c0108859:	83 c4 10             	add    $0x10,%esp
}
c010885c:	c9                   	leave  
c010885d:	c3                   	ret    

c010885e <kfree>:


void kfree(void *block)
{
c010885e:	f3 0f 1e fb          	endbr32 
c0108862:	55                   	push   %ebp
c0108863:	89 e5                	mov    %esp,%ebp
c0108865:	83 ec 18             	sub    $0x18,%esp
	bigblock_t *bb, **last = &bigblocks;
c0108868:	c7 45 f0 1c 60 1b c0 	movl   $0xc01b601c,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c010886f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108873:	0f 84 ab 00 00 00    	je     c0108924 <kfree+0xc6>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0108879:	8b 45 08             	mov    0x8(%ebp),%eax
c010887c:	25 ff 0f 00 00       	and    $0xfff,%eax
c0108881:	85 c0                	test   %eax,%eax
c0108883:	0f 85 85 00 00 00    	jne    c010890e <kfree+0xb0>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c0108889:	e8 7c f9 ff ff       	call   c010820a <__intr_save>
c010888e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0108891:	a1 1c 60 1b c0       	mov    0xc01b601c,%eax
c0108896:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108899:	eb 5e                	jmp    c01088f9 <kfree+0x9b>
			if (bb->pages == block) {
c010889b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010889e:	8b 40 04             	mov    0x4(%eax),%eax
c01088a1:	39 45 08             	cmp    %eax,0x8(%ebp)
c01088a4:	75 41                	jne    c01088e7 <kfree+0x89>
				*last = bb->next;
c01088a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088a9:	8b 50 08             	mov    0x8(%eax),%edx
c01088ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01088af:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c01088b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01088b4:	83 ec 0c             	sub    $0xc,%esp
c01088b7:	50                   	push   %eax
c01088b8:	e8 77 f9 ff ff       	call   c0108234 <__intr_restore>
c01088bd:	83 c4 10             	add    $0x10,%esp
				__slob_free_pages((unsigned long)block, bb->order);
c01088c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088c3:	8b 10                	mov    (%eax),%edx
c01088c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01088c8:	83 ec 08             	sub    $0x8,%esp
c01088cb:	52                   	push   %edx
c01088cc:	50                   	push   %eax
c01088cd:	e8 b2 fa ff ff       	call   c0108384 <__slob_free_pages>
c01088d2:	83 c4 10             	add    $0x10,%esp
				slob_free(bb, sizeof(bigblock_t));
c01088d5:	83 ec 08             	sub    $0x8,%esp
c01088d8:	6a 0c                	push   $0xc
c01088da:	ff 75 f4             	pushl  -0xc(%ebp)
c01088dd:	e8 aa fc ff ff       	call   c010858c <slob_free>
c01088e2:	83 c4 10             	add    $0x10,%esp
				return;
c01088e5:	eb 3e                	jmp    c0108925 <kfree+0xc7>
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c01088e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088ea:	83 c0 08             	add    $0x8,%eax
c01088ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01088f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088f3:	8b 40 08             	mov    0x8(%eax),%eax
c01088f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01088f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01088fd:	75 9c                	jne    c010889b <kfree+0x3d>
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c01088ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108902:	83 ec 0c             	sub    $0xc,%esp
c0108905:	50                   	push   %eax
c0108906:	e8 29 f9 ff ff       	call   c0108234 <__intr_restore>
c010890b:	83 c4 10             	add    $0x10,%esp
	}

	slob_free((slob_t *)block - 1, 0);
c010890e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108911:	83 e8 08             	sub    $0x8,%eax
c0108914:	83 ec 08             	sub    $0x8,%esp
c0108917:	6a 00                	push   $0x0
c0108919:	50                   	push   %eax
c010891a:	e8 6d fc ff ff       	call   c010858c <slob_free>
c010891f:	83 c4 10             	add    $0x10,%esp
	return;
c0108922:	eb 01                	jmp    c0108925 <kfree+0xc7>
		return;
c0108924:	90                   	nop
}
c0108925:	c9                   	leave  
c0108926:	c3                   	ret    

c0108927 <ksize>:


unsigned int ksize(const void *block)
{
c0108927:	f3 0f 1e fb          	endbr32 
c010892b:	55                   	push   %ebp
c010892c:	89 e5                	mov    %esp,%ebp
c010892e:	83 ec 18             	sub    $0x18,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0108931:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108935:	75 07                	jne    c010893e <ksize+0x17>
		return 0;
c0108937:	b8 00 00 00 00       	mov    $0x0,%eax
c010893c:	eb 73                	jmp    c01089b1 <ksize+0x8a>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c010893e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108941:	25 ff 0f 00 00       	and    $0xfff,%eax
c0108946:	85 c0                	test   %eax,%eax
c0108948:	75 5c                	jne    c01089a6 <ksize+0x7f>
		spin_lock_irqsave(&block_lock, flags);
c010894a:	e8 bb f8 ff ff       	call   c010820a <__intr_save>
c010894f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c0108952:	a1 1c 60 1b c0       	mov    0xc01b601c,%eax
c0108957:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010895a:	eb 35                	jmp    c0108991 <ksize+0x6a>
			if (bb->pages == block) {
c010895c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010895f:	8b 40 04             	mov    0x4(%eax),%eax
c0108962:	39 45 08             	cmp    %eax,0x8(%ebp)
c0108965:	75 21                	jne    c0108988 <ksize+0x61>
				spin_unlock_irqrestore(&slob_lock, flags);
c0108967:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010896a:	83 ec 0c             	sub    $0xc,%esp
c010896d:	50                   	push   %eax
c010896e:	e8 c1 f8 ff ff       	call   c0108234 <__intr_restore>
c0108973:	83 c4 10             	add    $0x10,%esp
				return PAGE_SIZE << bb->order;
c0108976:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108979:	8b 00                	mov    (%eax),%eax
c010897b:	ba 00 10 00 00       	mov    $0x1000,%edx
c0108980:	89 c1                	mov    %eax,%ecx
c0108982:	d3 e2                	shl    %cl,%edx
c0108984:	89 d0                	mov    %edx,%eax
c0108986:	eb 29                	jmp    c01089b1 <ksize+0x8a>
		for (bb = bigblocks; bb; bb = bb->next)
c0108988:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010898b:	8b 40 08             	mov    0x8(%eax),%eax
c010898e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108991:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108995:	75 c5                	jne    c010895c <ksize+0x35>
			}
		spin_unlock_irqrestore(&block_lock, flags);
c0108997:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010899a:	83 ec 0c             	sub    $0xc,%esp
c010899d:	50                   	push   %eax
c010899e:	e8 91 f8 ff ff       	call   c0108234 <__intr_restore>
c01089a3:	83 c4 10             	add    $0x10,%esp
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c01089a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01089a9:	83 e8 08             	sub    $0x8,%eax
c01089ac:	8b 00                	mov    (%eax),%eax
c01089ae:	c1 e0 03             	shl    $0x3,%eax
}
c01089b1:	c9                   	leave  
c01089b2:	c3                   	ret    

c01089b3 <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c01089b3:	f3 0f 1e fb          	endbr32 
c01089b7:	55                   	push   %ebp
c01089b8:	89 e5                	mov    %esp,%ebp
c01089ba:	83 ec 10             	sub    $0x10,%esp
c01089bd:	c7 45 fc 44 81 1b c0 	movl   $0xc01b8144,-0x4(%ebp)
    elm->prev = elm->next = elm;
c01089c4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01089c7:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01089ca:	89 50 04             	mov    %edx,0x4(%eax)
c01089cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01089d0:	8b 50 04             	mov    0x4(%eax),%edx
c01089d3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01089d6:	89 10                	mov    %edx,(%eax)
}
c01089d8:	90                   	nop
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c01089d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01089dc:	c7 40 14 44 81 1b c0 	movl   $0xc01b8144,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c01089e3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01089e8:	c9                   	leave  
c01089e9:	c3                   	ret    

c01089ea <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c01089ea:	f3 0f 1e fb          	endbr32 
c01089ee:	55                   	push   %ebp
c01089ef:	89 e5                	mov    %esp,%ebp
c01089f1:	83 ec 38             	sub    $0x38,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c01089f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01089f7:	8b 40 14             	mov    0x14(%eax),%eax
c01089fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c01089fd:	8b 45 10             	mov    0x10(%ebp),%eax
c0108a00:	83 c0 18             	add    $0x18,%eax
c0108a03:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c0108a06:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108a0a:	74 06                	je     c0108a12 <_fifo_map_swappable+0x28>
c0108a0c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108a10:	75 16                	jne    c0108a28 <_fifo_map_swappable+0x3e>
c0108a12:	68 b0 e8 10 c0       	push   $0xc010e8b0
c0108a17:	68 ce e8 10 c0       	push   $0xc010e8ce
c0108a1c:	6a 32                	push   $0x32
c0108a1e:	68 e3 e8 10 c0       	push   $0xc010e8e3
c0108a23:	e8 c6 8d ff ff       	call   c01017ee <__panic>
c0108a28:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a2b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108a2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108a31:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108a34:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108a37:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108a3a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a3d:	89 45 e0             	mov    %eax,-0x20(%ebp)
    __list_add(elm, listelm, listelm->next);
c0108a40:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108a43:	8b 40 04             	mov    0x4(%eax),%eax
c0108a46:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108a49:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0108a4c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108a4f:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0108a52:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    prev->next = next->prev = elm;
c0108a55:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108a58:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108a5b:	89 10                	mov    %edx,(%eax)
c0108a5d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108a60:	8b 10                	mov    (%eax),%edx
c0108a62:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108a65:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0108a68:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108a6b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0108a6e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0108a71:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108a74:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0108a77:	89 10                	mov    %edx,(%eax)
}
c0108a79:	90                   	nop
}
c0108a7a:	90                   	nop
}
c0108a7b:	90                   	nop
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add(head, entry);
    return 0;
c0108a7c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108a81:	c9                   	leave  
c0108a82:	c3                   	ret    

c0108a83 <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then assign the value of *ptr_page to the addr of this page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0108a83:	f3 0f 1e fb          	endbr32 
c0108a87:	55                   	push   %ebp
c0108a88:	89 e5                	mov    %esp,%ebp
c0108a8a:	83 ec 28             	sub    $0x28,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0108a8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108a90:	8b 40 14             	mov    0x14(%eax),%eax
c0108a93:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c0108a96:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108a9a:	75 16                	jne    c0108ab2 <_fifo_swap_out_victim+0x2f>
c0108a9c:	68 f7 e8 10 c0       	push   $0xc010e8f7
c0108aa1:	68 ce e8 10 c0       	push   $0xc010e8ce
c0108aa6:	6a 41                	push   $0x41
c0108aa8:	68 e3 e8 10 c0       	push   $0xc010e8e3
c0108aad:	e8 3c 8d ff ff       	call   c01017ee <__panic>
     assert(in_tick==0);
c0108ab2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0108ab6:	74 16                	je     c0108ace <_fifo_swap_out_victim+0x4b>
c0108ab8:	68 04 e9 10 c0       	push   $0xc010e904
c0108abd:	68 ce e8 10 c0       	push   $0xc010e8ce
c0108ac2:	6a 42                	push   $0x42
c0108ac4:	68 e3 e8 10 c0       	push   $0xc010e8e3
c0108ac9:	e8 20 8d ff ff       	call   c01017ee <__panic>
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  assign the value of *ptr_page to the addr of this page
     /* Select the tail */
     list_entry_t *le = head->prev;
c0108ace:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ad1:	8b 00                	mov    (%eax),%eax
c0108ad3:	89 45 f0             	mov    %eax,-0x10(%ebp)
     assert(head!=le);
c0108ad6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ad9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108adc:	75 16                	jne    c0108af4 <_fifo_swap_out_victim+0x71>
c0108ade:	68 0f e9 10 c0       	push   $0xc010e90f
c0108ae3:	68 ce e8 10 c0       	push   $0xc010e8ce
c0108ae8:	6a 49                	push   $0x49
c0108aea:	68 e3 e8 10 c0       	push   $0xc010e8e3
c0108aef:	e8 fa 8c ff ff       	call   c01017ee <__panic>
     struct Page *p = le2page(le, pra_page_link);
c0108af4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108af7:	83 e8 18             	sub    $0x18,%eax
c0108afa:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108afd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108b00:	89 45 e8             	mov    %eax,-0x18(%ebp)
    __list_del(listelm->prev, listelm->next);
c0108b03:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b06:	8b 40 04             	mov    0x4(%eax),%eax
c0108b09:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0108b0c:	8b 12                	mov    (%edx),%edx
c0108b0e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0108b11:	89 45 e0             	mov    %eax,-0x20(%ebp)
    prev->next = next;
c0108b14:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108b17:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108b1a:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0108b1d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108b20:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108b23:	89 10                	mov    %edx,(%eax)
}
c0108b25:	90                   	nop
}
c0108b26:	90                   	nop
     list_del(le);
     assert(p !=NULL);
c0108b27:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108b2b:	75 16                	jne    c0108b43 <_fifo_swap_out_victim+0xc0>
c0108b2d:	68 18 e9 10 c0       	push   $0xc010e918
c0108b32:	68 ce e8 10 c0       	push   $0xc010e8ce
c0108b37:	6a 4c                	push   $0x4c
c0108b39:	68 e3 e8 10 c0       	push   $0xc010e8e3
c0108b3e:	e8 ab 8c ff ff       	call   c01017ee <__panic>
     *ptr_page = p;
c0108b43:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108b46:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108b49:	89 10                	mov    %edx,(%eax)
     return 0;
c0108b4b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108b50:	c9                   	leave  
c0108b51:	c3                   	ret    

c0108b52 <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0108b52:	f3 0f 1e fb          	endbr32 
c0108b56:	55                   	push   %ebp
c0108b57:	89 e5                	mov    %esp,%ebp
c0108b59:	83 ec 08             	sub    $0x8,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0108b5c:	83 ec 0c             	sub    $0xc,%esp
c0108b5f:	68 24 e9 10 c0       	push   $0xc010e924
c0108b64:	e8 49 77 ff ff       	call   c01002b2 <cprintf>
c0108b69:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x3000 = 0x0c;
c0108b6c:	b8 00 30 00 00       	mov    $0x3000,%eax
c0108b71:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0108b74:	a1 0c 60 1b c0       	mov    0xc01b600c,%eax
c0108b79:	83 f8 04             	cmp    $0x4,%eax
c0108b7c:	74 16                	je     c0108b94 <_fifo_check_swap+0x42>
c0108b7e:	68 4a e9 10 c0       	push   $0xc010e94a
c0108b83:	68 ce e8 10 c0       	push   $0xc010e8ce
c0108b88:	6a 55                	push   $0x55
c0108b8a:	68 e3 e8 10 c0       	push   $0xc010e8e3
c0108b8f:	e8 5a 8c ff ff       	call   c01017ee <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0108b94:	83 ec 0c             	sub    $0xc,%esp
c0108b97:	68 5c e9 10 c0       	push   $0xc010e95c
c0108b9c:	e8 11 77 ff ff       	call   c01002b2 <cprintf>
c0108ba1:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x1000 = 0x0a;
c0108ba4:	b8 00 10 00 00       	mov    $0x1000,%eax
c0108ba9:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0108bac:	a1 0c 60 1b c0       	mov    0xc01b600c,%eax
c0108bb1:	83 f8 04             	cmp    $0x4,%eax
c0108bb4:	74 16                	je     c0108bcc <_fifo_check_swap+0x7a>
c0108bb6:	68 4a e9 10 c0       	push   $0xc010e94a
c0108bbb:	68 ce e8 10 c0       	push   $0xc010e8ce
c0108bc0:	6a 58                	push   $0x58
c0108bc2:	68 e3 e8 10 c0       	push   $0xc010e8e3
c0108bc7:	e8 22 8c ff ff       	call   c01017ee <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0108bcc:	83 ec 0c             	sub    $0xc,%esp
c0108bcf:	68 84 e9 10 c0       	push   $0xc010e984
c0108bd4:	e8 d9 76 ff ff       	call   c01002b2 <cprintf>
c0108bd9:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x4000 = 0x0d;
c0108bdc:	b8 00 40 00 00       	mov    $0x4000,%eax
c0108be1:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0108be4:	a1 0c 60 1b c0       	mov    0xc01b600c,%eax
c0108be9:	83 f8 04             	cmp    $0x4,%eax
c0108bec:	74 16                	je     c0108c04 <_fifo_check_swap+0xb2>
c0108bee:	68 4a e9 10 c0       	push   $0xc010e94a
c0108bf3:	68 ce e8 10 c0       	push   $0xc010e8ce
c0108bf8:	6a 5b                	push   $0x5b
c0108bfa:	68 e3 e8 10 c0       	push   $0xc010e8e3
c0108bff:	e8 ea 8b ff ff       	call   c01017ee <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0108c04:	83 ec 0c             	sub    $0xc,%esp
c0108c07:	68 ac e9 10 c0       	push   $0xc010e9ac
c0108c0c:	e8 a1 76 ff ff       	call   c01002b2 <cprintf>
c0108c11:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0108c14:	b8 00 20 00 00       	mov    $0x2000,%eax
c0108c19:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0108c1c:	a1 0c 60 1b c0       	mov    0xc01b600c,%eax
c0108c21:	83 f8 04             	cmp    $0x4,%eax
c0108c24:	74 16                	je     c0108c3c <_fifo_check_swap+0xea>
c0108c26:	68 4a e9 10 c0       	push   $0xc010e94a
c0108c2b:	68 ce e8 10 c0       	push   $0xc010e8ce
c0108c30:	6a 5e                	push   $0x5e
c0108c32:	68 e3 e8 10 c0       	push   $0xc010e8e3
c0108c37:	e8 b2 8b ff ff       	call   c01017ee <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0108c3c:	83 ec 0c             	sub    $0xc,%esp
c0108c3f:	68 d4 e9 10 c0       	push   $0xc010e9d4
c0108c44:	e8 69 76 ff ff       	call   c01002b2 <cprintf>
c0108c49:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x5000 = 0x0e;
c0108c4c:	b8 00 50 00 00       	mov    $0x5000,%eax
c0108c51:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0108c54:	a1 0c 60 1b c0       	mov    0xc01b600c,%eax
c0108c59:	83 f8 05             	cmp    $0x5,%eax
c0108c5c:	74 16                	je     c0108c74 <_fifo_check_swap+0x122>
c0108c5e:	68 fa e9 10 c0       	push   $0xc010e9fa
c0108c63:	68 ce e8 10 c0       	push   $0xc010e8ce
c0108c68:	6a 61                	push   $0x61
c0108c6a:	68 e3 e8 10 c0       	push   $0xc010e8e3
c0108c6f:	e8 7a 8b ff ff       	call   c01017ee <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0108c74:	83 ec 0c             	sub    $0xc,%esp
c0108c77:	68 ac e9 10 c0       	push   $0xc010e9ac
c0108c7c:	e8 31 76 ff ff       	call   c01002b2 <cprintf>
c0108c81:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0108c84:	b8 00 20 00 00       	mov    $0x2000,%eax
c0108c89:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0108c8c:	a1 0c 60 1b c0       	mov    0xc01b600c,%eax
c0108c91:	83 f8 05             	cmp    $0x5,%eax
c0108c94:	74 16                	je     c0108cac <_fifo_check_swap+0x15a>
c0108c96:	68 fa e9 10 c0       	push   $0xc010e9fa
c0108c9b:	68 ce e8 10 c0       	push   $0xc010e8ce
c0108ca0:	6a 64                	push   $0x64
c0108ca2:	68 e3 e8 10 c0       	push   $0xc010e8e3
c0108ca7:	e8 42 8b ff ff       	call   c01017ee <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0108cac:	83 ec 0c             	sub    $0xc,%esp
c0108caf:	68 5c e9 10 c0       	push   $0xc010e95c
c0108cb4:	e8 f9 75 ff ff       	call   c01002b2 <cprintf>
c0108cb9:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x1000 = 0x0a;
c0108cbc:	b8 00 10 00 00       	mov    $0x1000,%eax
c0108cc1:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0108cc4:	a1 0c 60 1b c0       	mov    0xc01b600c,%eax
c0108cc9:	83 f8 06             	cmp    $0x6,%eax
c0108ccc:	74 16                	je     c0108ce4 <_fifo_check_swap+0x192>
c0108cce:	68 09 ea 10 c0       	push   $0xc010ea09
c0108cd3:	68 ce e8 10 c0       	push   $0xc010e8ce
c0108cd8:	6a 67                	push   $0x67
c0108cda:	68 e3 e8 10 c0       	push   $0xc010e8e3
c0108cdf:	e8 0a 8b ff ff       	call   c01017ee <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0108ce4:	83 ec 0c             	sub    $0xc,%esp
c0108ce7:	68 ac e9 10 c0       	push   $0xc010e9ac
c0108cec:	e8 c1 75 ff ff       	call   c01002b2 <cprintf>
c0108cf1:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0108cf4:	b8 00 20 00 00       	mov    $0x2000,%eax
c0108cf9:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0108cfc:	a1 0c 60 1b c0       	mov    0xc01b600c,%eax
c0108d01:	83 f8 07             	cmp    $0x7,%eax
c0108d04:	74 16                	je     c0108d1c <_fifo_check_swap+0x1ca>
c0108d06:	68 18 ea 10 c0       	push   $0xc010ea18
c0108d0b:	68 ce e8 10 c0       	push   $0xc010e8ce
c0108d10:	6a 6a                	push   $0x6a
c0108d12:	68 e3 e8 10 c0       	push   $0xc010e8e3
c0108d17:	e8 d2 8a ff ff       	call   c01017ee <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0108d1c:	83 ec 0c             	sub    $0xc,%esp
c0108d1f:	68 24 e9 10 c0       	push   $0xc010e924
c0108d24:	e8 89 75 ff ff       	call   c01002b2 <cprintf>
c0108d29:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x3000 = 0x0c;
c0108d2c:	b8 00 30 00 00       	mov    $0x3000,%eax
c0108d31:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0108d34:	a1 0c 60 1b c0       	mov    0xc01b600c,%eax
c0108d39:	83 f8 08             	cmp    $0x8,%eax
c0108d3c:	74 16                	je     c0108d54 <_fifo_check_swap+0x202>
c0108d3e:	68 27 ea 10 c0       	push   $0xc010ea27
c0108d43:	68 ce e8 10 c0       	push   $0xc010e8ce
c0108d48:	6a 6d                	push   $0x6d
c0108d4a:	68 e3 e8 10 c0       	push   $0xc010e8e3
c0108d4f:	e8 9a 8a ff ff       	call   c01017ee <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0108d54:	83 ec 0c             	sub    $0xc,%esp
c0108d57:	68 84 e9 10 c0       	push   $0xc010e984
c0108d5c:	e8 51 75 ff ff       	call   c01002b2 <cprintf>
c0108d61:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x4000 = 0x0d;
c0108d64:	b8 00 40 00 00       	mov    $0x4000,%eax
c0108d69:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0108d6c:	a1 0c 60 1b c0       	mov    0xc01b600c,%eax
c0108d71:	83 f8 09             	cmp    $0x9,%eax
c0108d74:	74 16                	je     c0108d8c <_fifo_check_swap+0x23a>
c0108d76:	68 36 ea 10 c0       	push   $0xc010ea36
c0108d7b:	68 ce e8 10 c0       	push   $0xc010e8ce
c0108d80:	6a 70                	push   $0x70
c0108d82:	68 e3 e8 10 c0       	push   $0xc010e8e3
c0108d87:	e8 62 8a ff ff       	call   c01017ee <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0108d8c:	83 ec 0c             	sub    $0xc,%esp
c0108d8f:	68 d4 e9 10 c0       	push   $0xc010e9d4
c0108d94:	e8 19 75 ff ff       	call   c01002b2 <cprintf>
c0108d99:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x5000 = 0x0e;
c0108d9c:	b8 00 50 00 00       	mov    $0x5000,%eax
c0108da1:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==10);
c0108da4:	a1 0c 60 1b c0       	mov    0xc01b600c,%eax
c0108da9:	83 f8 0a             	cmp    $0xa,%eax
c0108dac:	74 16                	je     c0108dc4 <_fifo_check_swap+0x272>
c0108dae:	68 45 ea 10 c0       	push   $0xc010ea45
c0108db3:	68 ce e8 10 c0       	push   $0xc010e8ce
c0108db8:	6a 73                	push   $0x73
c0108dba:	68 e3 e8 10 c0       	push   $0xc010e8e3
c0108dbf:	e8 2a 8a ff ff       	call   c01017ee <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0108dc4:	83 ec 0c             	sub    $0xc,%esp
c0108dc7:	68 5c e9 10 c0       	push   $0xc010e95c
c0108dcc:	e8 e1 74 ff ff       	call   c01002b2 <cprintf>
c0108dd1:	83 c4 10             	add    $0x10,%esp
    assert(*(unsigned char *)0x1000 == 0x0a);
c0108dd4:	b8 00 10 00 00       	mov    $0x1000,%eax
c0108dd9:	0f b6 00             	movzbl (%eax),%eax
c0108ddc:	3c 0a                	cmp    $0xa,%al
c0108dde:	74 16                	je     c0108df6 <_fifo_check_swap+0x2a4>
c0108de0:	68 58 ea 10 c0       	push   $0xc010ea58
c0108de5:	68 ce e8 10 c0       	push   $0xc010e8ce
c0108dea:	6a 75                	push   $0x75
c0108dec:	68 e3 e8 10 c0       	push   $0xc010e8e3
c0108df1:	e8 f8 89 ff ff       	call   c01017ee <__panic>
    *(unsigned char *)0x1000 = 0x0a;
c0108df6:	b8 00 10 00 00       	mov    $0x1000,%eax
c0108dfb:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==11);
c0108dfe:	a1 0c 60 1b c0       	mov    0xc01b600c,%eax
c0108e03:	83 f8 0b             	cmp    $0xb,%eax
c0108e06:	74 16                	je     c0108e1e <_fifo_check_swap+0x2cc>
c0108e08:	68 79 ea 10 c0       	push   $0xc010ea79
c0108e0d:	68 ce e8 10 c0       	push   $0xc010e8ce
c0108e12:	6a 77                	push   $0x77
c0108e14:	68 e3 e8 10 c0       	push   $0xc010e8e3
c0108e19:	e8 d0 89 ff ff       	call   c01017ee <__panic>
    return 0;
c0108e1e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108e23:	c9                   	leave  
c0108e24:	c3                   	ret    

c0108e25 <_fifo_init>:


static int
_fifo_init(void)
{
c0108e25:	f3 0f 1e fb          	endbr32 
c0108e29:	55                   	push   %ebp
c0108e2a:	89 e5                	mov    %esp,%ebp
    return 0;
c0108e2c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108e31:	5d                   	pop    %ebp
c0108e32:	c3                   	ret    

c0108e33 <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0108e33:	f3 0f 1e fb          	endbr32 
c0108e37:	55                   	push   %ebp
c0108e38:	89 e5                	mov    %esp,%ebp
    return 0;
c0108e3a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108e3f:	5d                   	pop    %ebp
c0108e40:	c3                   	ret    

c0108e41 <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0108e41:	f3 0f 1e fb          	endbr32 
c0108e45:	55                   	push   %ebp
c0108e46:	89 e5                	mov    %esp,%ebp
c0108e48:	b8 00 00 00 00       	mov    $0x0,%eax
c0108e4d:	5d                   	pop    %ebp
c0108e4e:	c3                   	ret    

c0108e4f <page2ppn>:
page2ppn(struct Page *page) {
c0108e4f:	55                   	push   %ebp
c0108e50:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0108e52:	a1 60 80 1b c0       	mov    0xc01b8060,%eax
c0108e57:	8b 55 08             	mov    0x8(%ebp),%edx
c0108e5a:	29 c2                	sub    %eax,%edx
c0108e5c:	89 d0                	mov    %edx,%eax
c0108e5e:	c1 f8 02             	sar    $0x2,%eax
c0108e61:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c0108e67:	5d                   	pop    %ebp
c0108e68:	c3                   	ret    

c0108e69 <page2pa>:
page2pa(struct Page *page) {
c0108e69:	55                   	push   %ebp
c0108e6a:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0108e6c:	ff 75 08             	pushl  0x8(%ebp)
c0108e6f:	e8 db ff ff ff       	call   c0108e4f <page2ppn>
c0108e74:	83 c4 04             	add    $0x4,%esp
c0108e77:	c1 e0 0c             	shl    $0xc,%eax
}
c0108e7a:	c9                   	leave  
c0108e7b:	c3                   	ret    

c0108e7c <page_ref>:
page_ref(struct Page *page) {
c0108e7c:	55                   	push   %ebp
c0108e7d:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0108e7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e82:	8b 00                	mov    (%eax),%eax
}
c0108e84:	5d                   	pop    %ebp
c0108e85:	c3                   	ret    

c0108e86 <set_page_ref>:
set_page_ref(struct Page *page, int val) {
c0108e86:	55                   	push   %ebp
c0108e87:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0108e89:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e8c:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108e8f:	89 10                	mov    %edx,(%eax)
}
c0108e91:	90                   	nop
c0108e92:	5d                   	pop    %ebp
c0108e93:	c3                   	ret    

c0108e94 <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c0108e94:	f3 0f 1e fb          	endbr32 
c0108e98:	55                   	push   %ebp
c0108e99:	89 e5                	mov    %esp,%ebp
c0108e9b:	83 ec 10             	sub    $0x10,%esp
c0108e9e:	c7 45 fc 4c 81 1b c0 	movl   $0xc01b814c,-0x4(%ebp)
    elm->prev = elm->next = elm;
c0108ea5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108ea8:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0108eab:	89 50 04             	mov    %edx,0x4(%eax)
c0108eae:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108eb1:	8b 50 04             	mov    0x4(%eax),%edx
c0108eb4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108eb7:	89 10                	mov    %edx,(%eax)
}
c0108eb9:	90                   	nop
    list_init(&free_list);
    nr_free = 0;
c0108eba:	c7 05 54 81 1b c0 00 	movl   $0x0,0xc01b8154
c0108ec1:	00 00 00 
}
c0108ec4:	90                   	nop
c0108ec5:	c9                   	leave  
c0108ec6:	c3                   	ret    

c0108ec7 <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c0108ec7:	f3 0f 1e fb          	endbr32 
c0108ecb:	55                   	push   %ebp
c0108ecc:	89 e5                	mov    %esp,%ebp
c0108ece:	83 ec 38             	sub    $0x38,%esp
    assert(n > 0);
c0108ed1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0108ed5:	75 16                	jne    c0108eed <default_init_memmap+0x26>
c0108ed7:	68 9c ea 10 c0       	push   $0xc010ea9c
c0108edc:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0108ee1:	6a 6d                	push   $0x6d
c0108ee3:	68 b7 ea 10 c0       	push   $0xc010eab7
c0108ee8:	e8 01 89 ff ff       	call   c01017ee <__panic>
    struct Page *p = base;
c0108eed:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ef0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0108ef3:	eb 6c                	jmp    c0108f61 <default_init_memmap+0x9a>
        assert(PageReserved(p));
c0108ef5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ef8:	83 c0 04             	add    $0x4,%eax
c0108efb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0108f02:	89 45 ec             	mov    %eax,-0x14(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0108f05:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108f08:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108f0b:	0f a3 10             	bt     %edx,(%eax)
c0108f0e:	19 c0                	sbb    %eax,%eax
c0108f10:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return oldbit != 0;
c0108f13:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0108f17:	0f 95 c0             	setne  %al
c0108f1a:	0f b6 c0             	movzbl %al,%eax
c0108f1d:	85 c0                	test   %eax,%eax
c0108f1f:	75 16                	jne    c0108f37 <default_init_memmap+0x70>
c0108f21:	68 cd ea 10 c0       	push   $0xc010eacd
c0108f26:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0108f2b:	6a 70                	push   $0x70
c0108f2d:	68 b7 ea 10 c0       	push   $0xc010eab7
c0108f32:	e8 b7 88 ff ff       	call   c01017ee <__panic>
        p->flags = p->property = 0;
c0108f37:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108f3a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0108f41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108f44:	8b 50 08             	mov    0x8(%eax),%edx
c0108f47:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108f4a:	89 50 04             	mov    %edx,0x4(%eax)
        set_page_ref(p, 0);
c0108f4d:	83 ec 08             	sub    $0x8,%esp
c0108f50:	6a 00                	push   $0x0
c0108f52:	ff 75 f4             	pushl  -0xc(%ebp)
c0108f55:	e8 2c ff ff ff       	call   c0108e86 <set_page_ref>
c0108f5a:	83 c4 10             	add    $0x10,%esp
    for (; p != base + n; p ++) {
c0108f5d:	83 45 f4 24          	addl   $0x24,-0xc(%ebp)
c0108f61:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108f64:	89 d0                	mov    %edx,%eax
c0108f66:	c1 e0 03             	shl    $0x3,%eax
c0108f69:	01 d0                	add    %edx,%eax
c0108f6b:	c1 e0 02             	shl    $0x2,%eax
c0108f6e:	89 c2                	mov    %eax,%edx
c0108f70:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f73:	01 d0                	add    %edx,%eax
c0108f75:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0108f78:	0f 85 77 ff ff ff    	jne    c0108ef5 <default_init_memmap+0x2e>
    }
    base->property = n;
c0108f7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f81:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108f84:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c0108f87:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f8a:	83 c0 04             	add    $0x4,%eax
c0108f8d:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c0108f94:	89 45 cc             	mov    %eax,-0x34(%ebp)
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0108f97:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108f9a:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0108f9d:	0f ab 10             	bts    %edx,(%eax)
}
c0108fa0:	90                   	nop
    nr_free += n;
c0108fa1:	8b 15 54 81 1b c0    	mov    0xc01b8154,%edx
c0108fa7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108faa:	01 d0                	add    %edx,%eax
c0108fac:	a3 54 81 1b c0       	mov    %eax,0xc01b8154
    list_add_before(&free_list, &(base->page_link));
c0108fb1:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fb4:	83 c0 10             	add    $0x10,%eax
c0108fb7:	c7 45 e4 4c 81 1b c0 	movl   $0xc01b814c,-0x1c(%ebp)
c0108fbe:	89 45 e0             	mov    %eax,-0x20(%ebp)
    __list_add(elm, listelm->prev, listelm);
c0108fc1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108fc4:	8b 00                	mov    (%eax),%eax
c0108fc6:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108fc9:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0108fcc:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0108fcf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108fd2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    prev->next = next->prev = elm;
c0108fd5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108fd8:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108fdb:	89 10                	mov    %edx,(%eax)
c0108fdd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108fe0:	8b 10                	mov    (%eax),%edx
c0108fe2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108fe5:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0108fe8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108feb:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0108fee:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0108ff1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108ff4:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0108ff7:	89 10                	mov    %edx,(%eax)
}
c0108ff9:	90                   	nop
}
c0108ffa:	90                   	nop
}
c0108ffb:	90                   	nop
c0108ffc:	c9                   	leave  
c0108ffd:	c3                   	ret    

c0108ffe <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c0108ffe:	f3 0f 1e fb          	endbr32 
c0109002:	55                   	push   %ebp
c0109003:	89 e5                	mov    %esp,%ebp
c0109005:	83 ec 58             	sub    $0x58,%esp
    assert(n > 0);
c0109008:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010900c:	75 16                	jne    c0109024 <default_alloc_pages+0x26>
c010900e:	68 9c ea 10 c0       	push   $0xc010ea9c
c0109013:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0109018:	6a 7c                	push   $0x7c
c010901a:	68 b7 ea 10 c0       	push   $0xc010eab7
c010901f:	e8 ca 87 ff ff       	call   c01017ee <__panic>
    if (n > nr_free) {
c0109024:	a1 54 81 1b c0       	mov    0xc01b8154,%eax
c0109029:	39 45 08             	cmp    %eax,0x8(%ebp)
c010902c:	76 0a                	jbe    c0109038 <default_alloc_pages+0x3a>
        return NULL;
c010902e:	b8 00 00 00 00       	mov    $0x0,%eax
c0109033:	e9 43 01 00 00       	jmp    c010917b <default_alloc_pages+0x17d>
    }
    struct Page *page = NULL;
c0109038:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    list_entry_t *le = &free_list;
c010903f:	c7 45 f0 4c 81 1b c0 	movl   $0xc01b814c,-0x10(%ebp)
    // TODO: optimize (next-fit)
    while ((le = list_next(le)) != &free_list) {
c0109046:	eb 1c                	jmp    c0109064 <default_alloc_pages+0x66>
        struct Page *p = le2page(le, page_link);
c0109048:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010904b:	83 e8 10             	sub    $0x10,%eax
c010904e:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (p->property >= n) {
c0109051:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109054:	8b 40 08             	mov    0x8(%eax),%eax
c0109057:	39 45 08             	cmp    %eax,0x8(%ebp)
c010905a:	77 08                	ja     c0109064 <default_alloc_pages+0x66>
            page = p;
c010905c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010905f:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
c0109062:	eb 18                	jmp    c010907c <default_alloc_pages+0x7e>
c0109064:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109067:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return listelm->next;
c010906a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010906d:	8b 40 04             	mov    0x4(%eax),%eax
    while ((le = list_next(le)) != &free_list) {
c0109070:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109073:	81 7d f0 4c 81 1b c0 	cmpl   $0xc01b814c,-0x10(%ebp)
c010907a:	75 cc                	jne    c0109048 <default_alloc_pages+0x4a>
        }
    }
    if (page != NULL) {
c010907c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109080:	0f 84 f2 00 00 00    	je     c0109178 <default_alloc_pages+0x17a>
        if (page->property > n) {
c0109086:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109089:	8b 40 08             	mov    0x8(%eax),%eax
c010908c:	39 45 08             	cmp    %eax,0x8(%ebp)
c010908f:	0f 83 8f 00 00 00    	jae    c0109124 <default_alloc_pages+0x126>
            struct Page *p = page + n;
c0109095:	8b 55 08             	mov    0x8(%ebp),%edx
c0109098:	89 d0                	mov    %edx,%eax
c010909a:	c1 e0 03             	shl    $0x3,%eax
c010909d:	01 d0                	add    %edx,%eax
c010909f:	c1 e0 02             	shl    $0x2,%eax
c01090a2:	89 c2                	mov    %eax,%edx
c01090a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090a7:	01 d0                	add    %edx,%eax
c01090a9:	89 45 e8             	mov    %eax,-0x18(%ebp)
            p->property = page->property - n;
c01090ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090af:	8b 40 08             	mov    0x8(%eax),%eax
c01090b2:	2b 45 08             	sub    0x8(%ebp),%eax
c01090b5:	89 c2                	mov    %eax,%edx
c01090b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01090ba:	89 50 08             	mov    %edx,0x8(%eax)
            SetPageProperty(p);
c01090bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01090c0:	83 c0 04             	add    $0x4,%eax
c01090c3:	c7 45 cc 01 00 00 00 	movl   $0x1,-0x34(%ebp)
c01090ca:	89 45 c8             	mov    %eax,-0x38(%ebp)
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01090cd:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01090d0:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01090d3:	0f ab 10             	bts    %edx,(%eax)
}
c01090d6:	90                   	nop
            list_add_after(&(page->page_link), &(p->page_link));
c01090d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01090da:	83 c0 10             	add    $0x10,%eax
c01090dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01090e0:	83 c2 10             	add    $0x10,%edx
c01090e3:	89 55 e0             	mov    %edx,-0x20(%ebp)
c01090e6:	89 45 dc             	mov    %eax,-0x24(%ebp)
    __list_add(elm, listelm, listelm->next);
c01090e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01090ec:	8b 40 04             	mov    0x4(%eax),%eax
c01090ef:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01090f2:	89 55 d8             	mov    %edx,-0x28(%ebp)
c01090f5:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01090f8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01090fb:	89 45 d0             	mov    %eax,-0x30(%ebp)
    prev->next = next->prev = elm;
c01090fe:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109101:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0109104:	89 10                	mov    %edx,(%eax)
c0109106:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109109:	8b 10                	mov    (%eax),%edx
c010910b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010910e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109111:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109114:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0109117:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010911a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010911d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0109120:	89 10                	mov    %edx,(%eax)
}
c0109122:	90                   	nop
}
c0109123:	90                   	nop
        }
        list_del(&(page->page_link));
c0109124:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109127:	83 c0 10             	add    $0x10,%eax
c010912a:	89 45 bc             	mov    %eax,-0x44(%ebp)
    __list_del(listelm->prev, listelm->next);
c010912d:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0109130:	8b 40 04             	mov    0x4(%eax),%eax
c0109133:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0109136:	8b 12                	mov    (%edx),%edx
c0109138:	89 55 b8             	mov    %edx,-0x48(%ebp)
c010913b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    prev->next = next;
c010913e:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0109141:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0109144:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109147:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010914a:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010914d:	89 10                	mov    %edx,(%eax)
}
c010914f:	90                   	nop
}
c0109150:	90                   	nop
        nr_free -= n;
c0109151:	a1 54 81 1b c0       	mov    0xc01b8154,%eax
c0109156:	2b 45 08             	sub    0x8(%ebp),%eax
c0109159:	a3 54 81 1b c0       	mov    %eax,0xc01b8154
        ClearPageProperty(page);
c010915e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109161:	83 c0 04             	add    $0x4,%eax
c0109164:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c010916b:	89 45 c0             	mov    %eax,-0x40(%ebp)
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010916e:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0109171:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0109174:	0f b3 10             	btr    %edx,(%eax)
}
c0109177:	90                   	nop
    }
    return page;
c0109178:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010917b:	c9                   	leave  
c010917c:	c3                   	ret    

c010917d <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c010917d:	f3 0f 1e fb          	endbr32 
c0109181:	55                   	push   %ebp
c0109182:	89 e5                	mov    %esp,%ebp
c0109184:	81 ec 88 00 00 00    	sub    $0x88,%esp
    assert(n > 0);
c010918a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010918e:	75 19                	jne    c01091a9 <default_free_pages+0x2c>
c0109190:	68 9c ea 10 c0       	push   $0xc010ea9c
c0109195:	68 a2 ea 10 c0       	push   $0xc010eaa2
c010919a:	68 9a 00 00 00       	push   $0x9a
c010919f:	68 b7 ea 10 c0       	push   $0xc010eab7
c01091a4:	e8 45 86 ff ff       	call   c01017ee <__panic>
    struct Page *p = base;
c01091a9:	8b 45 08             	mov    0x8(%ebp),%eax
c01091ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c01091af:	e9 8f 00 00 00       	jmp    c0109243 <default_free_pages+0xc6>
        assert(!PageReserved(p) && !PageProperty(p));
c01091b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01091b7:	83 c0 04             	add    $0x4,%eax
c01091ba:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01091c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01091c4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01091c7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01091ca:	0f a3 10             	bt     %edx,(%eax)
c01091cd:	19 c0                	sbb    %eax,%eax
c01091cf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return oldbit != 0;
c01091d2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01091d6:	0f 95 c0             	setne  %al
c01091d9:	0f b6 c0             	movzbl %al,%eax
c01091dc:	85 c0                	test   %eax,%eax
c01091de:	75 2c                	jne    c010920c <default_free_pages+0x8f>
c01091e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01091e3:	83 c0 04             	add    $0x4,%eax
c01091e6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
c01091ed:	89 45 dc             	mov    %eax,-0x24(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01091f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01091f3:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01091f6:	0f a3 10             	bt     %edx,(%eax)
c01091f9:	19 c0                	sbb    %eax,%eax
c01091fb:	89 45 d8             	mov    %eax,-0x28(%ebp)
    return oldbit != 0;
c01091fe:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0109202:	0f 95 c0             	setne  %al
c0109205:	0f b6 c0             	movzbl %al,%eax
c0109208:	85 c0                	test   %eax,%eax
c010920a:	74 19                	je     c0109225 <default_free_pages+0xa8>
c010920c:	68 e0 ea 10 c0       	push   $0xc010eae0
c0109211:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0109216:	68 9d 00 00 00       	push   $0x9d
c010921b:	68 b7 ea 10 c0       	push   $0xc010eab7
c0109220:	e8 c9 85 ff ff       	call   c01017ee <__panic>
        p->flags = 0;
c0109225:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109228:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        set_page_ref(p, 0);
c010922f:	83 ec 08             	sub    $0x8,%esp
c0109232:	6a 00                	push   $0x0
c0109234:	ff 75 f4             	pushl  -0xc(%ebp)
c0109237:	e8 4a fc ff ff       	call   c0108e86 <set_page_ref>
c010923c:	83 c4 10             	add    $0x10,%esp
    for (; p != base + n; p ++) {
c010923f:	83 45 f4 24          	addl   $0x24,-0xc(%ebp)
c0109243:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109246:	89 d0                	mov    %edx,%eax
c0109248:	c1 e0 03             	shl    $0x3,%eax
c010924b:	01 d0                	add    %edx,%eax
c010924d:	c1 e0 02             	shl    $0x2,%eax
c0109250:	89 c2                	mov    %eax,%edx
c0109252:	8b 45 08             	mov    0x8(%ebp),%eax
c0109255:	01 d0                	add    %edx,%eax
c0109257:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010925a:	0f 85 54 ff ff ff    	jne    c01091b4 <default_free_pages+0x37>
    }
    base->property = n;
c0109260:	8b 45 08             	mov    0x8(%ebp),%eax
c0109263:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109266:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c0109269:	8b 45 08             	mov    0x8(%ebp),%eax
c010926c:	83 c0 04             	add    $0x4,%eax
c010926f:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c0109276:	89 45 cc             	mov    %eax,-0x34(%ebp)
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0109279:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010927c:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010927f:	0f ab 10             	bts    %edx,(%eax)
}
c0109282:	90                   	nop
c0109283:	c7 45 d4 4c 81 1b c0 	movl   $0xc01b814c,-0x2c(%ebp)
    return listelm->next;
c010928a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010928d:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *le = list_next(&free_list);
c0109290:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c0109293:	e9 0e 01 00 00       	jmp    c01093a6 <default_free_pages+0x229>
        p = le2page(le, page_link);
c0109298:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010929b:	83 e8 10             	sub    $0x10,%eax
c010929e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01092a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01092a4:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01092a7:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01092aa:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c01092ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
        // TODO: optimize
        if (base + base->property == p) {
c01092b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01092b3:	8b 50 08             	mov    0x8(%eax),%edx
c01092b6:	89 d0                	mov    %edx,%eax
c01092b8:	c1 e0 03             	shl    $0x3,%eax
c01092bb:	01 d0                	add    %edx,%eax
c01092bd:	c1 e0 02             	shl    $0x2,%eax
c01092c0:	89 c2                	mov    %eax,%edx
c01092c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01092c5:	01 d0                	add    %edx,%eax
c01092c7:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c01092ca:	75 5d                	jne    c0109329 <default_free_pages+0x1ac>
            base->property += p->property;
c01092cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01092cf:	8b 50 08             	mov    0x8(%eax),%edx
c01092d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01092d5:	8b 40 08             	mov    0x8(%eax),%eax
c01092d8:	01 c2                	add    %eax,%edx
c01092da:	8b 45 08             	mov    0x8(%ebp),%eax
c01092dd:	89 50 08             	mov    %edx,0x8(%eax)
            ClearPageProperty(p);
c01092e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01092e3:	83 c0 04             	add    $0x4,%eax
c01092e6:	c7 45 b8 01 00 00 00 	movl   $0x1,-0x48(%ebp)
c01092ed:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01092f0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01092f3:	8b 55 b8             	mov    -0x48(%ebp),%edx
c01092f6:	0f b3 10             	btr    %edx,(%eax)
}
c01092f9:	90                   	nop
            list_del(&(p->page_link));
c01092fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01092fd:	83 c0 10             	add    $0x10,%eax
c0109300:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    __list_del(listelm->prev, listelm->next);
c0109303:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0109306:	8b 40 04             	mov    0x4(%eax),%eax
c0109309:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010930c:	8b 12                	mov    (%edx),%edx
c010930e:	89 55 c0             	mov    %edx,-0x40(%ebp)
c0109311:	89 45 bc             	mov    %eax,-0x44(%ebp)
    prev->next = next;
c0109314:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0109317:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010931a:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010931d:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0109320:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0109323:	89 10                	mov    %edx,(%eax)
}
c0109325:	90                   	nop
}
c0109326:	90                   	nop
c0109327:	eb 7d                	jmp    c01093a6 <default_free_pages+0x229>
        }
        else if (p + p->property == base) {
c0109329:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010932c:	8b 50 08             	mov    0x8(%eax),%edx
c010932f:	89 d0                	mov    %edx,%eax
c0109331:	c1 e0 03             	shl    $0x3,%eax
c0109334:	01 d0                	add    %edx,%eax
c0109336:	c1 e0 02             	shl    $0x2,%eax
c0109339:	89 c2                	mov    %eax,%edx
c010933b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010933e:	01 d0                	add    %edx,%eax
c0109340:	39 45 08             	cmp    %eax,0x8(%ebp)
c0109343:	75 61                	jne    c01093a6 <default_free_pages+0x229>
            p->property += base->property;
c0109345:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109348:	8b 50 08             	mov    0x8(%eax),%edx
c010934b:	8b 45 08             	mov    0x8(%ebp),%eax
c010934e:	8b 40 08             	mov    0x8(%eax),%eax
c0109351:	01 c2                	add    %eax,%edx
c0109353:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109356:	89 50 08             	mov    %edx,0x8(%eax)
            ClearPageProperty(base);
c0109359:	8b 45 08             	mov    0x8(%ebp),%eax
c010935c:	83 c0 04             	add    $0x4,%eax
c010935f:	c7 45 a4 01 00 00 00 	movl   $0x1,-0x5c(%ebp)
c0109366:	89 45 a0             	mov    %eax,-0x60(%ebp)
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0109369:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010936c:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c010936f:	0f b3 10             	btr    %edx,(%eax)
}
c0109372:	90                   	nop
            base = p;
c0109373:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109376:	89 45 08             	mov    %eax,0x8(%ebp)
            list_del(&(p->page_link));
c0109379:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010937c:	83 c0 10             	add    $0x10,%eax
c010937f:	89 45 b0             	mov    %eax,-0x50(%ebp)
    __list_del(listelm->prev, listelm->next);
c0109382:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109385:	8b 40 04             	mov    0x4(%eax),%eax
c0109388:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010938b:	8b 12                	mov    (%edx),%edx
c010938d:	89 55 ac             	mov    %edx,-0x54(%ebp)
c0109390:	89 45 a8             	mov    %eax,-0x58(%ebp)
    prev->next = next;
c0109393:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0109396:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0109399:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010939c:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010939f:	8b 55 ac             	mov    -0x54(%ebp),%edx
c01093a2:	89 10                	mov    %edx,(%eax)
}
c01093a4:	90                   	nop
}
c01093a5:	90                   	nop
    while (le != &free_list) {
c01093a6:	81 7d f0 4c 81 1b c0 	cmpl   $0xc01b814c,-0x10(%ebp)
c01093ad:	0f 85 e5 fe ff ff    	jne    c0109298 <default_free_pages+0x11b>
        }
    }
    nr_free += n;
c01093b3:	8b 15 54 81 1b c0    	mov    0xc01b8154,%edx
c01093b9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01093bc:	01 d0                	add    %edx,%eax
c01093be:	a3 54 81 1b c0       	mov    %eax,0xc01b8154
c01093c3:	c7 45 9c 4c 81 1b c0 	movl   $0xc01b814c,-0x64(%ebp)
    return listelm->next;
c01093ca:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01093cd:	8b 40 04             	mov    0x4(%eax),%eax
    le = list_next(&free_list);
c01093d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c01093d3:	eb 69                	jmp    c010943e <default_free_pages+0x2c1>
        p = le2page(le, page_link);
c01093d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01093d8:	83 e8 10             	sub    $0x10,%eax
c01093db:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (base + base->property <= p) {
c01093de:	8b 45 08             	mov    0x8(%ebp),%eax
c01093e1:	8b 50 08             	mov    0x8(%eax),%edx
c01093e4:	89 d0                	mov    %edx,%eax
c01093e6:	c1 e0 03             	shl    $0x3,%eax
c01093e9:	01 d0                	add    %edx,%eax
c01093eb:	c1 e0 02             	shl    $0x2,%eax
c01093ee:	89 c2                	mov    %eax,%edx
c01093f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01093f3:	01 d0                	add    %edx,%eax
c01093f5:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c01093f8:	72 35                	jb     c010942f <default_free_pages+0x2b2>
            assert(base + base->property != p);
c01093fa:	8b 45 08             	mov    0x8(%ebp),%eax
c01093fd:	8b 50 08             	mov    0x8(%eax),%edx
c0109400:	89 d0                	mov    %edx,%eax
c0109402:	c1 e0 03             	shl    $0x3,%eax
c0109405:	01 d0                	add    %edx,%eax
c0109407:	c1 e0 02             	shl    $0x2,%eax
c010940a:	89 c2                	mov    %eax,%edx
c010940c:	8b 45 08             	mov    0x8(%ebp),%eax
c010940f:	01 d0                	add    %edx,%eax
c0109411:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109414:	75 33                	jne    c0109449 <default_free_pages+0x2cc>
c0109416:	68 05 eb 10 c0       	push   $0xc010eb05
c010941b:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0109420:	68 b9 00 00 00       	push   $0xb9
c0109425:	68 b7 ea 10 c0       	push   $0xc010eab7
c010942a:	e8 bf 83 ff ff       	call   c01017ee <__panic>
c010942f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109432:	89 45 98             	mov    %eax,-0x68(%ebp)
c0109435:	8b 45 98             	mov    -0x68(%ebp),%eax
c0109438:	8b 40 04             	mov    0x4(%eax),%eax
            break;
        }
        le = list_next(le);
c010943b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c010943e:	81 7d f0 4c 81 1b c0 	cmpl   $0xc01b814c,-0x10(%ebp)
c0109445:	75 8e                	jne    c01093d5 <default_free_pages+0x258>
c0109447:	eb 01                	jmp    c010944a <default_free_pages+0x2cd>
            break;
c0109449:	90                   	nop
    }
    list_add_before(le, &(base->page_link));
c010944a:	8b 45 08             	mov    0x8(%ebp),%eax
c010944d:	8d 50 10             	lea    0x10(%eax),%edx
c0109450:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109453:	89 45 94             	mov    %eax,-0x6c(%ebp)
c0109456:	89 55 90             	mov    %edx,-0x70(%ebp)
    __list_add(elm, listelm->prev, listelm);
c0109459:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010945c:	8b 00                	mov    (%eax),%eax
c010945e:	8b 55 90             	mov    -0x70(%ebp),%edx
c0109461:	89 55 8c             	mov    %edx,-0x74(%ebp)
c0109464:	89 45 88             	mov    %eax,-0x78(%ebp)
c0109467:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010946a:	89 45 84             	mov    %eax,-0x7c(%ebp)
    prev->next = next->prev = elm;
c010946d:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0109470:	8b 55 8c             	mov    -0x74(%ebp),%edx
c0109473:	89 10                	mov    %edx,(%eax)
c0109475:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0109478:	8b 10                	mov    (%eax),%edx
c010947a:	8b 45 88             	mov    -0x78(%ebp),%eax
c010947d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109480:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0109483:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0109486:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109489:	8b 45 8c             	mov    -0x74(%ebp),%eax
c010948c:	8b 55 88             	mov    -0x78(%ebp),%edx
c010948f:	89 10                	mov    %edx,(%eax)
}
c0109491:	90                   	nop
}
c0109492:	90                   	nop
}
c0109493:	90                   	nop
c0109494:	c9                   	leave  
c0109495:	c3                   	ret    

c0109496 <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0109496:	f3 0f 1e fb          	endbr32 
c010949a:	55                   	push   %ebp
c010949b:	89 e5                	mov    %esp,%ebp
    return nr_free;
c010949d:	a1 54 81 1b c0       	mov    0xc01b8154,%eax
}
c01094a2:	5d                   	pop    %ebp
c01094a3:	c3                   	ret    

c01094a4 <basic_check>:

static void
basic_check(void) {
c01094a4:	f3 0f 1e fb          	endbr32 
c01094a8:	55                   	push   %ebp
c01094a9:	89 e5                	mov    %esp,%ebp
c01094ab:	83 ec 38             	sub    $0x38,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c01094ae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01094b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01094bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01094be:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c01094c1:	83 ec 0c             	sub    $0xc,%esp
c01094c4:	6a 01                	push   $0x1
c01094c6:	e8 9b b7 ff ff       	call   c0104c66 <alloc_pages>
c01094cb:	83 c4 10             	add    $0x10,%esp
c01094ce:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01094d1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01094d5:	75 19                	jne    c01094f0 <basic_check+0x4c>
c01094d7:	68 20 eb 10 c0       	push   $0xc010eb20
c01094dc:	68 a2 ea 10 c0       	push   $0xc010eaa2
c01094e1:	68 ca 00 00 00       	push   $0xca
c01094e6:	68 b7 ea 10 c0       	push   $0xc010eab7
c01094eb:	e8 fe 82 ff ff       	call   c01017ee <__panic>
    assert((p1 = alloc_page()) != NULL);
c01094f0:	83 ec 0c             	sub    $0xc,%esp
c01094f3:	6a 01                	push   $0x1
c01094f5:	e8 6c b7 ff ff       	call   c0104c66 <alloc_pages>
c01094fa:	83 c4 10             	add    $0x10,%esp
c01094fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109500:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109504:	75 19                	jne    c010951f <basic_check+0x7b>
c0109506:	68 3c eb 10 c0       	push   $0xc010eb3c
c010950b:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0109510:	68 cb 00 00 00       	push   $0xcb
c0109515:	68 b7 ea 10 c0       	push   $0xc010eab7
c010951a:	e8 cf 82 ff ff       	call   c01017ee <__panic>
    assert((p2 = alloc_page()) != NULL);
c010951f:	83 ec 0c             	sub    $0xc,%esp
c0109522:	6a 01                	push   $0x1
c0109524:	e8 3d b7 ff ff       	call   c0104c66 <alloc_pages>
c0109529:	83 c4 10             	add    $0x10,%esp
c010952c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010952f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109533:	75 19                	jne    c010954e <basic_check+0xaa>
c0109535:	68 58 eb 10 c0       	push   $0xc010eb58
c010953a:	68 a2 ea 10 c0       	push   $0xc010eaa2
c010953f:	68 cc 00 00 00       	push   $0xcc
c0109544:	68 b7 ea 10 c0       	push   $0xc010eab7
c0109549:	e8 a0 82 ff ff       	call   c01017ee <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c010954e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109551:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0109554:	74 10                	je     c0109566 <basic_check+0xc2>
c0109556:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109559:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010955c:	74 08                	je     c0109566 <basic_check+0xc2>
c010955e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109561:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109564:	75 19                	jne    c010957f <basic_check+0xdb>
c0109566:	68 74 eb 10 c0       	push   $0xc010eb74
c010956b:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0109570:	68 ce 00 00 00       	push   $0xce
c0109575:	68 b7 ea 10 c0       	push   $0xc010eab7
c010957a:	e8 6f 82 ff ff       	call   c01017ee <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c010957f:	83 ec 0c             	sub    $0xc,%esp
c0109582:	ff 75 ec             	pushl  -0x14(%ebp)
c0109585:	e8 f2 f8 ff ff       	call   c0108e7c <page_ref>
c010958a:	83 c4 10             	add    $0x10,%esp
c010958d:	85 c0                	test   %eax,%eax
c010958f:	75 24                	jne    c01095b5 <basic_check+0x111>
c0109591:	83 ec 0c             	sub    $0xc,%esp
c0109594:	ff 75 f0             	pushl  -0x10(%ebp)
c0109597:	e8 e0 f8 ff ff       	call   c0108e7c <page_ref>
c010959c:	83 c4 10             	add    $0x10,%esp
c010959f:	85 c0                	test   %eax,%eax
c01095a1:	75 12                	jne    c01095b5 <basic_check+0x111>
c01095a3:	83 ec 0c             	sub    $0xc,%esp
c01095a6:	ff 75 f4             	pushl  -0xc(%ebp)
c01095a9:	e8 ce f8 ff ff       	call   c0108e7c <page_ref>
c01095ae:	83 c4 10             	add    $0x10,%esp
c01095b1:	85 c0                	test   %eax,%eax
c01095b3:	74 19                	je     c01095ce <basic_check+0x12a>
c01095b5:	68 98 eb 10 c0       	push   $0xc010eb98
c01095ba:	68 a2 ea 10 c0       	push   $0xc010eaa2
c01095bf:	68 cf 00 00 00       	push   $0xcf
c01095c4:	68 b7 ea 10 c0       	push   $0xc010eab7
c01095c9:	e8 20 82 ff ff       	call   c01017ee <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c01095ce:	83 ec 0c             	sub    $0xc,%esp
c01095d1:	ff 75 ec             	pushl  -0x14(%ebp)
c01095d4:	e8 90 f8 ff ff       	call   c0108e69 <page2pa>
c01095d9:	83 c4 10             	add    $0x10,%esp
c01095dc:	8b 15 80 5f 1b c0    	mov    0xc01b5f80,%edx
c01095e2:	c1 e2 0c             	shl    $0xc,%edx
c01095e5:	39 d0                	cmp    %edx,%eax
c01095e7:	72 19                	jb     c0109602 <basic_check+0x15e>
c01095e9:	68 d4 eb 10 c0       	push   $0xc010ebd4
c01095ee:	68 a2 ea 10 c0       	push   $0xc010eaa2
c01095f3:	68 d1 00 00 00       	push   $0xd1
c01095f8:	68 b7 ea 10 c0       	push   $0xc010eab7
c01095fd:	e8 ec 81 ff ff       	call   c01017ee <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0109602:	83 ec 0c             	sub    $0xc,%esp
c0109605:	ff 75 f0             	pushl  -0x10(%ebp)
c0109608:	e8 5c f8 ff ff       	call   c0108e69 <page2pa>
c010960d:	83 c4 10             	add    $0x10,%esp
c0109610:	8b 15 80 5f 1b c0    	mov    0xc01b5f80,%edx
c0109616:	c1 e2 0c             	shl    $0xc,%edx
c0109619:	39 d0                	cmp    %edx,%eax
c010961b:	72 19                	jb     c0109636 <basic_check+0x192>
c010961d:	68 f1 eb 10 c0       	push   $0xc010ebf1
c0109622:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0109627:	68 d2 00 00 00       	push   $0xd2
c010962c:	68 b7 ea 10 c0       	push   $0xc010eab7
c0109631:	e8 b8 81 ff ff       	call   c01017ee <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0109636:	83 ec 0c             	sub    $0xc,%esp
c0109639:	ff 75 f4             	pushl  -0xc(%ebp)
c010963c:	e8 28 f8 ff ff       	call   c0108e69 <page2pa>
c0109641:	83 c4 10             	add    $0x10,%esp
c0109644:	8b 15 80 5f 1b c0    	mov    0xc01b5f80,%edx
c010964a:	c1 e2 0c             	shl    $0xc,%edx
c010964d:	39 d0                	cmp    %edx,%eax
c010964f:	72 19                	jb     c010966a <basic_check+0x1c6>
c0109651:	68 0e ec 10 c0       	push   $0xc010ec0e
c0109656:	68 a2 ea 10 c0       	push   $0xc010eaa2
c010965b:	68 d3 00 00 00       	push   $0xd3
c0109660:	68 b7 ea 10 c0       	push   $0xc010eab7
c0109665:	e8 84 81 ff ff       	call   c01017ee <__panic>

    list_entry_t free_list_store = free_list;
c010966a:	a1 4c 81 1b c0       	mov    0xc01b814c,%eax
c010966f:	8b 15 50 81 1b c0    	mov    0xc01b8150,%edx
c0109675:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0109678:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010967b:	c7 45 dc 4c 81 1b c0 	movl   $0xc01b814c,-0x24(%ebp)
    elm->prev = elm->next = elm;
c0109682:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109685:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0109688:	89 50 04             	mov    %edx,0x4(%eax)
c010968b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010968e:	8b 50 04             	mov    0x4(%eax),%edx
c0109691:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109694:	89 10                	mov    %edx,(%eax)
}
c0109696:	90                   	nop
c0109697:	c7 45 e0 4c 81 1b c0 	movl   $0xc01b814c,-0x20(%ebp)
    return list->next == list;
c010969e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01096a1:	8b 40 04             	mov    0x4(%eax),%eax
c01096a4:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c01096a7:	0f 94 c0             	sete   %al
c01096aa:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c01096ad:	85 c0                	test   %eax,%eax
c01096af:	75 19                	jne    c01096ca <basic_check+0x226>
c01096b1:	68 2b ec 10 c0       	push   $0xc010ec2b
c01096b6:	68 a2 ea 10 c0       	push   $0xc010eaa2
c01096bb:	68 d7 00 00 00       	push   $0xd7
c01096c0:	68 b7 ea 10 c0       	push   $0xc010eab7
c01096c5:	e8 24 81 ff ff       	call   c01017ee <__panic>

    unsigned int nr_free_store = nr_free;
c01096ca:	a1 54 81 1b c0       	mov    0xc01b8154,%eax
c01096cf:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c01096d2:	c7 05 54 81 1b c0 00 	movl   $0x0,0xc01b8154
c01096d9:	00 00 00 

    assert(alloc_page() == NULL);
c01096dc:	83 ec 0c             	sub    $0xc,%esp
c01096df:	6a 01                	push   $0x1
c01096e1:	e8 80 b5 ff ff       	call   c0104c66 <alloc_pages>
c01096e6:	83 c4 10             	add    $0x10,%esp
c01096e9:	85 c0                	test   %eax,%eax
c01096eb:	74 19                	je     c0109706 <basic_check+0x262>
c01096ed:	68 42 ec 10 c0       	push   $0xc010ec42
c01096f2:	68 a2 ea 10 c0       	push   $0xc010eaa2
c01096f7:	68 dc 00 00 00       	push   $0xdc
c01096fc:	68 b7 ea 10 c0       	push   $0xc010eab7
c0109701:	e8 e8 80 ff ff       	call   c01017ee <__panic>

    free_page(p0);
c0109706:	83 ec 08             	sub    $0x8,%esp
c0109709:	6a 01                	push   $0x1
c010970b:	ff 75 ec             	pushl  -0x14(%ebp)
c010970e:	e8 c3 b5 ff ff       	call   c0104cd6 <free_pages>
c0109713:	83 c4 10             	add    $0x10,%esp
    free_page(p1);
c0109716:	83 ec 08             	sub    $0x8,%esp
c0109719:	6a 01                	push   $0x1
c010971b:	ff 75 f0             	pushl  -0x10(%ebp)
c010971e:	e8 b3 b5 ff ff       	call   c0104cd6 <free_pages>
c0109723:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c0109726:	83 ec 08             	sub    $0x8,%esp
c0109729:	6a 01                	push   $0x1
c010972b:	ff 75 f4             	pushl  -0xc(%ebp)
c010972e:	e8 a3 b5 ff ff       	call   c0104cd6 <free_pages>
c0109733:	83 c4 10             	add    $0x10,%esp
    assert(nr_free == 3);
c0109736:	a1 54 81 1b c0       	mov    0xc01b8154,%eax
c010973b:	83 f8 03             	cmp    $0x3,%eax
c010973e:	74 19                	je     c0109759 <basic_check+0x2b5>
c0109740:	68 57 ec 10 c0       	push   $0xc010ec57
c0109745:	68 a2 ea 10 c0       	push   $0xc010eaa2
c010974a:	68 e1 00 00 00       	push   $0xe1
c010974f:	68 b7 ea 10 c0       	push   $0xc010eab7
c0109754:	e8 95 80 ff ff       	call   c01017ee <__panic>

    assert((p0 = alloc_page()) != NULL);
c0109759:	83 ec 0c             	sub    $0xc,%esp
c010975c:	6a 01                	push   $0x1
c010975e:	e8 03 b5 ff ff       	call   c0104c66 <alloc_pages>
c0109763:	83 c4 10             	add    $0x10,%esp
c0109766:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109769:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010976d:	75 19                	jne    c0109788 <basic_check+0x2e4>
c010976f:	68 20 eb 10 c0       	push   $0xc010eb20
c0109774:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0109779:	68 e3 00 00 00       	push   $0xe3
c010977e:	68 b7 ea 10 c0       	push   $0xc010eab7
c0109783:	e8 66 80 ff ff       	call   c01017ee <__panic>
    assert((p1 = alloc_page()) != NULL);
c0109788:	83 ec 0c             	sub    $0xc,%esp
c010978b:	6a 01                	push   $0x1
c010978d:	e8 d4 b4 ff ff       	call   c0104c66 <alloc_pages>
c0109792:	83 c4 10             	add    $0x10,%esp
c0109795:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109798:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010979c:	75 19                	jne    c01097b7 <basic_check+0x313>
c010979e:	68 3c eb 10 c0       	push   $0xc010eb3c
c01097a3:	68 a2 ea 10 c0       	push   $0xc010eaa2
c01097a8:	68 e4 00 00 00       	push   $0xe4
c01097ad:	68 b7 ea 10 c0       	push   $0xc010eab7
c01097b2:	e8 37 80 ff ff       	call   c01017ee <__panic>
    assert((p2 = alloc_page()) != NULL);
c01097b7:	83 ec 0c             	sub    $0xc,%esp
c01097ba:	6a 01                	push   $0x1
c01097bc:	e8 a5 b4 ff ff       	call   c0104c66 <alloc_pages>
c01097c1:	83 c4 10             	add    $0x10,%esp
c01097c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01097c7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01097cb:	75 19                	jne    c01097e6 <basic_check+0x342>
c01097cd:	68 58 eb 10 c0       	push   $0xc010eb58
c01097d2:	68 a2 ea 10 c0       	push   $0xc010eaa2
c01097d7:	68 e5 00 00 00       	push   $0xe5
c01097dc:	68 b7 ea 10 c0       	push   $0xc010eab7
c01097e1:	e8 08 80 ff ff       	call   c01017ee <__panic>

    assert(alloc_page() == NULL);
c01097e6:	83 ec 0c             	sub    $0xc,%esp
c01097e9:	6a 01                	push   $0x1
c01097eb:	e8 76 b4 ff ff       	call   c0104c66 <alloc_pages>
c01097f0:	83 c4 10             	add    $0x10,%esp
c01097f3:	85 c0                	test   %eax,%eax
c01097f5:	74 19                	je     c0109810 <basic_check+0x36c>
c01097f7:	68 42 ec 10 c0       	push   $0xc010ec42
c01097fc:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0109801:	68 e7 00 00 00       	push   $0xe7
c0109806:	68 b7 ea 10 c0       	push   $0xc010eab7
c010980b:	e8 de 7f ff ff       	call   c01017ee <__panic>

    free_page(p0);
c0109810:	83 ec 08             	sub    $0x8,%esp
c0109813:	6a 01                	push   $0x1
c0109815:	ff 75 ec             	pushl  -0x14(%ebp)
c0109818:	e8 b9 b4 ff ff       	call   c0104cd6 <free_pages>
c010981d:	83 c4 10             	add    $0x10,%esp
c0109820:	c7 45 d8 4c 81 1b c0 	movl   $0xc01b814c,-0x28(%ebp)
c0109827:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010982a:	8b 40 04             	mov    0x4(%eax),%eax
c010982d:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0109830:	0f 94 c0             	sete   %al
c0109833:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0109836:	85 c0                	test   %eax,%eax
c0109838:	74 19                	je     c0109853 <basic_check+0x3af>
c010983a:	68 64 ec 10 c0       	push   $0xc010ec64
c010983f:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0109844:	68 ea 00 00 00       	push   $0xea
c0109849:	68 b7 ea 10 c0       	push   $0xc010eab7
c010984e:	e8 9b 7f ff ff       	call   c01017ee <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0109853:	83 ec 0c             	sub    $0xc,%esp
c0109856:	6a 01                	push   $0x1
c0109858:	e8 09 b4 ff ff       	call   c0104c66 <alloc_pages>
c010985d:	83 c4 10             	add    $0x10,%esp
c0109860:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109863:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109866:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0109869:	74 19                	je     c0109884 <basic_check+0x3e0>
c010986b:	68 7c ec 10 c0       	push   $0xc010ec7c
c0109870:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0109875:	68 ed 00 00 00       	push   $0xed
c010987a:	68 b7 ea 10 c0       	push   $0xc010eab7
c010987f:	e8 6a 7f ff ff       	call   c01017ee <__panic>
    assert(alloc_page() == NULL);
c0109884:	83 ec 0c             	sub    $0xc,%esp
c0109887:	6a 01                	push   $0x1
c0109889:	e8 d8 b3 ff ff       	call   c0104c66 <alloc_pages>
c010988e:	83 c4 10             	add    $0x10,%esp
c0109891:	85 c0                	test   %eax,%eax
c0109893:	74 19                	je     c01098ae <basic_check+0x40a>
c0109895:	68 42 ec 10 c0       	push   $0xc010ec42
c010989a:	68 a2 ea 10 c0       	push   $0xc010eaa2
c010989f:	68 ee 00 00 00       	push   $0xee
c01098a4:	68 b7 ea 10 c0       	push   $0xc010eab7
c01098a9:	e8 40 7f ff ff       	call   c01017ee <__panic>

    assert(nr_free == 0);
c01098ae:	a1 54 81 1b c0       	mov    0xc01b8154,%eax
c01098b3:	85 c0                	test   %eax,%eax
c01098b5:	74 19                	je     c01098d0 <basic_check+0x42c>
c01098b7:	68 95 ec 10 c0       	push   $0xc010ec95
c01098bc:	68 a2 ea 10 c0       	push   $0xc010eaa2
c01098c1:	68 f0 00 00 00       	push   $0xf0
c01098c6:	68 b7 ea 10 c0       	push   $0xc010eab7
c01098cb:	e8 1e 7f ff ff       	call   c01017ee <__panic>
    free_list = free_list_store;
c01098d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01098d3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01098d6:	a3 4c 81 1b c0       	mov    %eax,0xc01b814c
c01098db:	89 15 50 81 1b c0    	mov    %edx,0xc01b8150
    nr_free = nr_free_store;
c01098e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01098e4:	a3 54 81 1b c0       	mov    %eax,0xc01b8154

    free_page(p);
c01098e9:	83 ec 08             	sub    $0x8,%esp
c01098ec:	6a 01                	push   $0x1
c01098ee:	ff 75 e4             	pushl  -0x1c(%ebp)
c01098f1:	e8 e0 b3 ff ff       	call   c0104cd6 <free_pages>
c01098f6:	83 c4 10             	add    $0x10,%esp
    free_page(p1);
c01098f9:	83 ec 08             	sub    $0x8,%esp
c01098fc:	6a 01                	push   $0x1
c01098fe:	ff 75 f0             	pushl  -0x10(%ebp)
c0109901:	e8 d0 b3 ff ff       	call   c0104cd6 <free_pages>
c0109906:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c0109909:	83 ec 08             	sub    $0x8,%esp
c010990c:	6a 01                	push   $0x1
c010990e:	ff 75 f4             	pushl  -0xc(%ebp)
c0109911:	e8 c0 b3 ff ff       	call   c0104cd6 <free_pages>
c0109916:	83 c4 10             	add    $0x10,%esp
}
c0109919:	90                   	nop
c010991a:	c9                   	leave  
c010991b:	c3                   	ret    

c010991c <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c010991c:	f3 0f 1e fb          	endbr32 
c0109920:	55                   	push   %ebp
c0109921:	89 e5                	mov    %esp,%ebp
c0109923:	81 ec 88 00 00 00    	sub    $0x88,%esp
    int count = 0, total = 0;
c0109929:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109930:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c0109937:	c7 45 ec 4c 81 1b c0 	movl   $0xc01b814c,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c010993e:	eb 60                	jmp    c01099a0 <default_check+0x84>
        struct Page *p = le2page(le, page_link);
c0109940:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109943:	83 e8 10             	sub    $0x10,%eax
c0109946:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(PageProperty(p));
c0109949:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010994c:	83 c0 04             	add    $0x4,%eax
c010994f:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c0109956:	89 45 cc             	mov    %eax,-0x34(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0109959:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010995c:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010995f:	0f a3 10             	bt     %edx,(%eax)
c0109962:	19 c0                	sbb    %eax,%eax
c0109964:	89 45 c8             	mov    %eax,-0x38(%ebp)
    return oldbit != 0;
c0109967:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c010996b:	0f 95 c0             	setne  %al
c010996e:	0f b6 c0             	movzbl %al,%eax
c0109971:	85 c0                	test   %eax,%eax
c0109973:	75 19                	jne    c010998e <default_check+0x72>
c0109975:	68 a2 ec 10 c0       	push   $0xc010eca2
c010997a:	68 a2 ea 10 c0       	push   $0xc010eaa2
c010997f:	68 01 01 00 00       	push   $0x101
c0109984:	68 b7 ea 10 c0       	push   $0xc010eab7
c0109989:	e8 60 7e ff ff       	call   c01017ee <__panic>
        count ++, total += p->property;
c010998e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109992:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0109995:	8b 50 08             	mov    0x8(%eax),%edx
c0109998:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010999b:	01 d0                	add    %edx,%eax
c010999d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01099a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01099a3:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    return listelm->next;
c01099a6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01099a9:	8b 40 04             	mov    0x4(%eax),%eax
    while ((le = list_next(le)) != &free_list) {
c01099ac:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01099af:	81 7d ec 4c 81 1b c0 	cmpl   $0xc01b814c,-0x14(%ebp)
c01099b6:	75 88                	jne    c0109940 <default_check+0x24>
    }
    assert(total == nr_free_pages());
c01099b8:	e8 52 b3 ff ff       	call   c0104d0f <nr_free_pages>
c01099bd:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01099c0:	39 d0                	cmp    %edx,%eax
c01099c2:	74 19                	je     c01099dd <default_check+0xc1>
c01099c4:	68 b2 ec 10 c0       	push   $0xc010ecb2
c01099c9:	68 a2 ea 10 c0       	push   $0xc010eaa2
c01099ce:	68 04 01 00 00       	push   $0x104
c01099d3:	68 b7 ea 10 c0       	push   $0xc010eab7
c01099d8:	e8 11 7e ff ff       	call   c01017ee <__panic>

    basic_check();
c01099dd:	e8 c2 fa ff ff       	call   c01094a4 <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c01099e2:	83 ec 0c             	sub    $0xc,%esp
c01099e5:	6a 05                	push   $0x5
c01099e7:	e8 7a b2 ff ff       	call   c0104c66 <alloc_pages>
c01099ec:	83 c4 10             	add    $0x10,%esp
c01099ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(p0 != NULL);
c01099f2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01099f6:	75 19                	jne    c0109a11 <default_check+0xf5>
c01099f8:	68 cb ec 10 c0       	push   $0xc010eccb
c01099fd:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0109a02:	68 09 01 00 00       	push   $0x109
c0109a07:	68 b7 ea 10 c0       	push   $0xc010eab7
c0109a0c:	e8 dd 7d ff ff       	call   c01017ee <__panic>
    assert(!PageProperty(p0));
c0109a11:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109a14:	83 c0 04             	add    $0x4,%eax
c0109a17:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0109a1e:	89 45 bc             	mov    %eax,-0x44(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0109a21:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0109a24:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0109a27:	0f a3 10             	bt     %edx,(%eax)
c0109a2a:	19 c0                	sbb    %eax,%eax
c0109a2c:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c0109a2f:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0109a33:	0f 95 c0             	setne  %al
c0109a36:	0f b6 c0             	movzbl %al,%eax
c0109a39:	85 c0                	test   %eax,%eax
c0109a3b:	74 19                	je     c0109a56 <default_check+0x13a>
c0109a3d:	68 d6 ec 10 c0       	push   $0xc010ecd6
c0109a42:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0109a47:	68 0a 01 00 00       	push   $0x10a
c0109a4c:	68 b7 ea 10 c0       	push   $0xc010eab7
c0109a51:	e8 98 7d ff ff       	call   c01017ee <__panic>

    list_entry_t free_list_store = free_list;
c0109a56:	a1 4c 81 1b c0       	mov    0xc01b814c,%eax
c0109a5b:	8b 15 50 81 1b c0    	mov    0xc01b8150,%edx
c0109a61:	89 45 80             	mov    %eax,-0x80(%ebp)
c0109a64:	89 55 84             	mov    %edx,-0x7c(%ebp)
c0109a67:	c7 45 b0 4c 81 1b c0 	movl   $0xc01b814c,-0x50(%ebp)
    elm->prev = elm->next = elm;
c0109a6e:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109a71:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0109a74:	89 50 04             	mov    %edx,0x4(%eax)
c0109a77:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109a7a:	8b 50 04             	mov    0x4(%eax),%edx
c0109a7d:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109a80:	89 10                	mov    %edx,(%eax)
}
c0109a82:	90                   	nop
c0109a83:	c7 45 b4 4c 81 1b c0 	movl   $0xc01b814c,-0x4c(%ebp)
    return list->next == list;
c0109a8a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0109a8d:	8b 40 04             	mov    0x4(%eax),%eax
c0109a90:	39 45 b4             	cmp    %eax,-0x4c(%ebp)
c0109a93:	0f 94 c0             	sete   %al
c0109a96:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0109a99:	85 c0                	test   %eax,%eax
c0109a9b:	75 19                	jne    c0109ab6 <default_check+0x19a>
c0109a9d:	68 2b ec 10 c0       	push   $0xc010ec2b
c0109aa2:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0109aa7:	68 0e 01 00 00       	push   $0x10e
c0109aac:	68 b7 ea 10 c0       	push   $0xc010eab7
c0109ab1:	e8 38 7d ff ff       	call   c01017ee <__panic>
    assert(alloc_page() == NULL);
c0109ab6:	83 ec 0c             	sub    $0xc,%esp
c0109ab9:	6a 01                	push   $0x1
c0109abb:	e8 a6 b1 ff ff       	call   c0104c66 <alloc_pages>
c0109ac0:	83 c4 10             	add    $0x10,%esp
c0109ac3:	85 c0                	test   %eax,%eax
c0109ac5:	74 19                	je     c0109ae0 <default_check+0x1c4>
c0109ac7:	68 42 ec 10 c0       	push   $0xc010ec42
c0109acc:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0109ad1:	68 0f 01 00 00       	push   $0x10f
c0109ad6:	68 b7 ea 10 c0       	push   $0xc010eab7
c0109adb:	e8 0e 7d ff ff       	call   c01017ee <__panic>

    unsigned int nr_free_store = nr_free;
c0109ae0:	a1 54 81 1b c0       	mov    0xc01b8154,%eax
c0109ae5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    nr_free = 0;
c0109ae8:	c7 05 54 81 1b c0 00 	movl   $0x0,0xc01b8154
c0109aef:	00 00 00 

    free_pages(p0 + 2, 3);
c0109af2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109af5:	83 c0 48             	add    $0x48,%eax
c0109af8:	83 ec 08             	sub    $0x8,%esp
c0109afb:	6a 03                	push   $0x3
c0109afd:	50                   	push   %eax
c0109afe:	e8 d3 b1 ff ff       	call   c0104cd6 <free_pages>
c0109b03:	83 c4 10             	add    $0x10,%esp
    assert(alloc_pages(4) == NULL);
c0109b06:	83 ec 0c             	sub    $0xc,%esp
c0109b09:	6a 04                	push   $0x4
c0109b0b:	e8 56 b1 ff ff       	call   c0104c66 <alloc_pages>
c0109b10:	83 c4 10             	add    $0x10,%esp
c0109b13:	85 c0                	test   %eax,%eax
c0109b15:	74 19                	je     c0109b30 <default_check+0x214>
c0109b17:	68 e8 ec 10 c0       	push   $0xc010ece8
c0109b1c:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0109b21:	68 15 01 00 00       	push   $0x115
c0109b26:	68 b7 ea 10 c0       	push   $0xc010eab7
c0109b2b:	e8 be 7c ff ff       	call   c01017ee <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c0109b30:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109b33:	83 c0 48             	add    $0x48,%eax
c0109b36:	83 c0 04             	add    $0x4,%eax
c0109b39:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c0109b40:	89 45 a8             	mov    %eax,-0x58(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0109b43:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0109b46:	8b 55 ac             	mov    -0x54(%ebp),%edx
c0109b49:	0f a3 10             	bt     %edx,(%eax)
c0109b4c:	19 c0                	sbb    %eax,%eax
c0109b4e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    return oldbit != 0;
c0109b51:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c0109b55:	0f 95 c0             	setne  %al
c0109b58:	0f b6 c0             	movzbl %al,%eax
c0109b5b:	85 c0                	test   %eax,%eax
c0109b5d:	74 0e                	je     c0109b6d <default_check+0x251>
c0109b5f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109b62:	83 c0 48             	add    $0x48,%eax
c0109b65:	8b 40 08             	mov    0x8(%eax),%eax
c0109b68:	83 f8 03             	cmp    $0x3,%eax
c0109b6b:	74 19                	je     c0109b86 <default_check+0x26a>
c0109b6d:	68 00 ed 10 c0       	push   $0xc010ed00
c0109b72:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0109b77:	68 16 01 00 00       	push   $0x116
c0109b7c:	68 b7 ea 10 c0       	push   $0xc010eab7
c0109b81:	e8 68 7c ff ff       	call   c01017ee <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c0109b86:	83 ec 0c             	sub    $0xc,%esp
c0109b89:	6a 03                	push   $0x3
c0109b8b:	e8 d6 b0 ff ff       	call   c0104c66 <alloc_pages>
c0109b90:	83 c4 10             	add    $0x10,%esp
c0109b93:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0109b96:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0109b9a:	75 19                	jne    c0109bb5 <default_check+0x299>
c0109b9c:	68 2c ed 10 c0       	push   $0xc010ed2c
c0109ba1:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0109ba6:	68 17 01 00 00       	push   $0x117
c0109bab:	68 b7 ea 10 c0       	push   $0xc010eab7
c0109bb0:	e8 39 7c ff ff       	call   c01017ee <__panic>
    assert(alloc_page() == NULL);
c0109bb5:	83 ec 0c             	sub    $0xc,%esp
c0109bb8:	6a 01                	push   $0x1
c0109bba:	e8 a7 b0 ff ff       	call   c0104c66 <alloc_pages>
c0109bbf:	83 c4 10             	add    $0x10,%esp
c0109bc2:	85 c0                	test   %eax,%eax
c0109bc4:	74 19                	je     c0109bdf <default_check+0x2c3>
c0109bc6:	68 42 ec 10 c0       	push   $0xc010ec42
c0109bcb:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0109bd0:	68 18 01 00 00       	push   $0x118
c0109bd5:	68 b7 ea 10 c0       	push   $0xc010eab7
c0109bda:	e8 0f 7c ff ff       	call   c01017ee <__panic>
    assert(p0 + 2 == p1);
c0109bdf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109be2:	83 c0 48             	add    $0x48,%eax
c0109be5:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c0109be8:	74 19                	je     c0109c03 <default_check+0x2e7>
c0109bea:	68 4a ed 10 c0       	push   $0xc010ed4a
c0109bef:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0109bf4:	68 19 01 00 00       	push   $0x119
c0109bf9:	68 b7 ea 10 c0       	push   $0xc010eab7
c0109bfe:	e8 eb 7b ff ff       	call   c01017ee <__panic>

    p2 = p0 + 1;
c0109c03:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109c06:	83 c0 24             	add    $0x24,%eax
c0109c09:	89 45 dc             	mov    %eax,-0x24(%ebp)
    free_page(p0);
c0109c0c:	83 ec 08             	sub    $0x8,%esp
c0109c0f:	6a 01                	push   $0x1
c0109c11:	ff 75 e8             	pushl  -0x18(%ebp)
c0109c14:	e8 bd b0 ff ff       	call   c0104cd6 <free_pages>
c0109c19:	83 c4 10             	add    $0x10,%esp
    free_pages(p1, 3);
c0109c1c:	83 ec 08             	sub    $0x8,%esp
c0109c1f:	6a 03                	push   $0x3
c0109c21:	ff 75 e0             	pushl  -0x20(%ebp)
c0109c24:	e8 ad b0 ff ff       	call   c0104cd6 <free_pages>
c0109c29:	83 c4 10             	add    $0x10,%esp
    assert(PageProperty(p0) && p0->property == 1);
c0109c2c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109c2f:	83 c0 04             	add    $0x4,%eax
c0109c32:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c0109c39:	89 45 9c             	mov    %eax,-0x64(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0109c3c:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0109c3f:	8b 55 a0             	mov    -0x60(%ebp),%edx
c0109c42:	0f a3 10             	bt     %edx,(%eax)
c0109c45:	19 c0                	sbb    %eax,%eax
c0109c47:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c0109c4a:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c0109c4e:	0f 95 c0             	setne  %al
c0109c51:	0f b6 c0             	movzbl %al,%eax
c0109c54:	85 c0                	test   %eax,%eax
c0109c56:	74 0b                	je     c0109c63 <default_check+0x347>
c0109c58:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109c5b:	8b 40 08             	mov    0x8(%eax),%eax
c0109c5e:	83 f8 01             	cmp    $0x1,%eax
c0109c61:	74 19                	je     c0109c7c <default_check+0x360>
c0109c63:	68 58 ed 10 c0       	push   $0xc010ed58
c0109c68:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0109c6d:	68 1e 01 00 00       	push   $0x11e
c0109c72:	68 b7 ea 10 c0       	push   $0xc010eab7
c0109c77:	e8 72 7b ff ff       	call   c01017ee <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c0109c7c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109c7f:	83 c0 04             	add    $0x4,%eax
c0109c82:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c0109c89:	89 45 90             	mov    %eax,-0x70(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0109c8c:	8b 45 90             	mov    -0x70(%ebp),%eax
c0109c8f:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0109c92:	0f a3 10             	bt     %edx,(%eax)
c0109c95:	19 c0                	sbb    %eax,%eax
c0109c97:	89 45 8c             	mov    %eax,-0x74(%ebp)
    return oldbit != 0;
c0109c9a:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c0109c9e:	0f 95 c0             	setne  %al
c0109ca1:	0f b6 c0             	movzbl %al,%eax
c0109ca4:	85 c0                	test   %eax,%eax
c0109ca6:	74 0b                	je     c0109cb3 <default_check+0x397>
c0109ca8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109cab:	8b 40 08             	mov    0x8(%eax),%eax
c0109cae:	83 f8 03             	cmp    $0x3,%eax
c0109cb1:	74 19                	je     c0109ccc <default_check+0x3b0>
c0109cb3:	68 80 ed 10 c0       	push   $0xc010ed80
c0109cb8:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0109cbd:	68 1f 01 00 00       	push   $0x11f
c0109cc2:	68 b7 ea 10 c0       	push   $0xc010eab7
c0109cc7:	e8 22 7b ff ff       	call   c01017ee <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c0109ccc:	83 ec 0c             	sub    $0xc,%esp
c0109ccf:	6a 01                	push   $0x1
c0109cd1:	e8 90 af ff ff       	call   c0104c66 <alloc_pages>
c0109cd6:	83 c4 10             	add    $0x10,%esp
c0109cd9:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109cdc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109cdf:	83 e8 24             	sub    $0x24,%eax
c0109ce2:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0109ce5:	74 19                	je     c0109d00 <default_check+0x3e4>
c0109ce7:	68 a6 ed 10 c0       	push   $0xc010eda6
c0109cec:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0109cf1:	68 21 01 00 00       	push   $0x121
c0109cf6:	68 b7 ea 10 c0       	push   $0xc010eab7
c0109cfb:	e8 ee 7a ff ff       	call   c01017ee <__panic>
    free_page(p0);
c0109d00:	83 ec 08             	sub    $0x8,%esp
c0109d03:	6a 01                	push   $0x1
c0109d05:	ff 75 e8             	pushl  -0x18(%ebp)
c0109d08:	e8 c9 af ff ff       	call   c0104cd6 <free_pages>
c0109d0d:	83 c4 10             	add    $0x10,%esp
    assert((p0 = alloc_pages(2)) == p2 + 1);
c0109d10:	83 ec 0c             	sub    $0xc,%esp
c0109d13:	6a 02                	push   $0x2
c0109d15:	e8 4c af ff ff       	call   c0104c66 <alloc_pages>
c0109d1a:	83 c4 10             	add    $0x10,%esp
c0109d1d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109d20:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109d23:	83 c0 24             	add    $0x24,%eax
c0109d26:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0109d29:	74 19                	je     c0109d44 <default_check+0x428>
c0109d2b:	68 c4 ed 10 c0       	push   $0xc010edc4
c0109d30:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0109d35:	68 23 01 00 00       	push   $0x123
c0109d3a:	68 b7 ea 10 c0       	push   $0xc010eab7
c0109d3f:	e8 aa 7a ff ff       	call   c01017ee <__panic>

    free_pages(p0, 2);
c0109d44:	83 ec 08             	sub    $0x8,%esp
c0109d47:	6a 02                	push   $0x2
c0109d49:	ff 75 e8             	pushl  -0x18(%ebp)
c0109d4c:	e8 85 af ff ff       	call   c0104cd6 <free_pages>
c0109d51:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c0109d54:	83 ec 08             	sub    $0x8,%esp
c0109d57:	6a 01                	push   $0x1
c0109d59:	ff 75 dc             	pushl  -0x24(%ebp)
c0109d5c:	e8 75 af ff ff       	call   c0104cd6 <free_pages>
c0109d61:	83 c4 10             	add    $0x10,%esp

    assert((p0 = alloc_pages(5)) != NULL);
c0109d64:	83 ec 0c             	sub    $0xc,%esp
c0109d67:	6a 05                	push   $0x5
c0109d69:	e8 f8 ae ff ff       	call   c0104c66 <alloc_pages>
c0109d6e:	83 c4 10             	add    $0x10,%esp
c0109d71:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109d74:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0109d78:	75 19                	jne    c0109d93 <default_check+0x477>
c0109d7a:	68 e4 ed 10 c0       	push   $0xc010ede4
c0109d7f:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0109d84:	68 28 01 00 00       	push   $0x128
c0109d89:	68 b7 ea 10 c0       	push   $0xc010eab7
c0109d8e:	e8 5b 7a ff ff       	call   c01017ee <__panic>
    assert(alloc_page() == NULL);
c0109d93:	83 ec 0c             	sub    $0xc,%esp
c0109d96:	6a 01                	push   $0x1
c0109d98:	e8 c9 ae ff ff       	call   c0104c66 <alloc_pages>
c0109d9d:	83 c4 10             	add    $0x10,%esp
c0109da0:	85 c0                	test   %eax,%eax
c0109da2:	74 19                	je     c0109dbd <default_check+0x4a1>
c0109da4:	68 42 ec 10 c0       	push   $0xc010ec42
c0109da9:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0109dae:	68 29 01 00 00       	push   $0x129
c0109db3:	68 b7 ea 10 c0       	push   $0xc010eab7
c0109db8:	e8 31 7a ff ff       	call   c01017ee <__panic>

    assert(nr_free == 0);
c0109dbd:	a1 54 81 1b c0       	mov    0xc01b8154,%eax
c0109dc2:	85 c0                	test   %eax,%eax
c0109dc4:	74 19                	je     c0109ddf <default_check+0x4c3>
c0109dc6:	68 95 ec 10 c0       	push   $0xc010ec95
c0109dcb:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0109dd0:	68 2b 01 00 00       	push   $0x12b
c0109dd5:	68 b7 ea 10 c0       	push   $0xc010eab7
c0109dda:	e8 0f 7a ff ff       	call   c01017ee <__panic>
    nr_free = nr_free_store;
c0109ddf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109de2:	a3 54 81 1b c0       	mov    %eax,0xc01b8154

    free_list = free_list_store;
c0109de7:	8b 45 80             	mov    -0x80(%ebp),%eax
c0109dea:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0109ded:	a3 4c 81 1b c0       	mov    %eax,0xc01b814c
c0109df2:	89 15 50 81 1b c0    	mov    %edx,0xc01b8150
    free_pages(p0, 5);
c0109df8:	83 ec 08             	sub    $0x8,%esp
c0109dfb:	6a 05                	push   $0x5
c0109dfd:	ff 75 e8             	pushl  -0x18(%ebp)
c0109e00:	e8 d1 ae ff ff       	call   c0104cd6 <free_pages>
c0109e05:	83 c4 10             	add    $0x10,%esp

    le = &free_list;
c0109e08:	c7 45 ec 4c 81 1b c0 	movl   $0xc01b814c,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0109e0f:	eb 1d                	jmp    c0109e2e <default_check+0x512>
        struct Page *p = le2page(le, page_link);
c0109e11:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109e14:	83 e8 10             	sub    $0x10,%eax
c0109e17:	89 45 d8             	mov    %eax,-0x28(%ebp)
        count --, total -= p->property;
c0109e1a:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0109e1e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109e21:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109e24:	8b 40 08             	mov    0x8(%eax),%eax
c0109e27:	29 c2                	sub    %eax,%edx
c0109e29:	89 d0                	mov    %edx,%eax
c0109e2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109e2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109e31:	89 45 88             	mov    %eax,-0x78(%ebp)
    return listelm->next;
c0109e34:	8b 45 88             	mov    -0x78(%ebp),%eax
c0109e37:	8b 40 04             	mov    0x4(%eax),%eax
    while ((le = list_next(le)) != &free_list) {
c0109e3a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109e3d:	81 7d ec 4c 81 1b c0 	cmpl   $0xc01b814c,-0x14(%ebp)
c0109e44:	75 cb                	jne    c0109e11 <default_check+0x4f5>
    }
    assert(count == 0);
c0109e46:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109e4a:	74 19                	je     c0109e65 <default_check+0x549>
c0109e4c:	68 02 ee 10 c0       	push   $0xc010ee02
c0109e51:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0109e56:	68 36 01 00 00       	push   $0x136
c0109e5b:	68 b7 ea 10 c0       	push   $0xc010eab7
c0109e60:	e8 89 79 ff ff       	call   c01017ee <__panic>
    assert(total == 0);
c0109e65:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109e69:	74 19                	je     c0109e84 <default_check+0x568>
c0109e6b:	68 0d ee 10 c0       	push   $0xc010ee0d
c0109e70:	68 a2 ea 10 c0       	push   $0xc010eaa2
c0109e75:	68 37 01 00 00       	push   $0x137
c0109e7a:	68 b7 ea 10 c0       	push   $0xc010eab7
c0109e7f:	e8 6a 79 ff ff       	call   c01017ee <__panic>
}
c0109e84:	90                   	nop
c0109e85:	c9                   	leave  
c0109e86:	c3                   	ret    

c0109e87 <page2ppn>:
page2ppn(struct Page *page) {
c0109e87:	55                   	push   %ebp
c0109e88:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0109e8a:	a1 60 80 1b c0       	mov    0xc01b8060,%eax
c0109e8f:	8b 55 08             	mov    0x8(%ebp),%edx
c0109e92:	29 c2                	sub    %eax,%edx
c0109e94:	89 d0                	mov    %edx,%eax
c0109e96:	c1 f8 02             	sar    $0x2,%eax
c0109e99:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c0109e9f:	5d                   	pop    %ebp
c0109ea0:	c3                   	ret    

c0109ea1 <page2pa>:
page2pa(struct Page *page) {
c0109ea1:	55                   	push   %ebp
c0109ea2:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0109ea4:	ff 75 08             	pushl  0x8(%ebp)
c0109ea7:	e8 db ff ff ff       	call   c0109e87 <page2ppn>
c0109eac:	83 c4 04             	add    $0x4,%esp
c0109eaf:	c1 e0 0c             	shl    $0xc,%eax
}
c0109eb2:	c9                   	leave  
c0109eb3:	c3                   	ret    

c0109eb4 <page2kva>:
page2kva(struct Page *page) {
c0109eb4:	55                   	push   %ebp
c0109eb5:	89 e5                	mov    %esp,%ebp
c0109eb7:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c0109eba:	ff 75 08             	pushl  0x8(%ebp)
c0109ebd:	e8 df ff ff ff       	call   c0109ea1 <page2pa>
c0109ec2:	83 c4 04             	add    $0x4,%esp
c0109ec5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109ec8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ecb:	c1 e8 0c             	shr    $0xc,%eax
c0109ece:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109ed1:	a1 80 5f 1b c0       	mov    0xc01b5f80,%eax
c0109ed6:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109ed9:	72 14                	jb     c0109eef <page2kva+0x3b>
c0109edb:	ff 75 f4             	pushl  -0xc(%ebp)
c0109ede:	68 48 ee 10 c0       	push   $0xc010ee48
c0109ee3:	6a 65                	push   $0x65
c0109ee5:	68 6b ee 10 c0       	push   $0xc010ee6b
c0109eea:	e8 ff 78 ff ff       	call   c01017ee <__panic>
c0109eef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ef2:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0109ef7:	c9                   	leave  
c0109ef8:	c3                   	ret    

c0109ef9 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c0109ef9:	f3 0f 1e fb          	endbr32 
c0109efd:	55                   	push   %ebp
c0109efe:	89 e5                	mov    %esp,%ebp
c0109f00:	83 ec 08             	sub    $0x8,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c0109f03:	83 ec 0c             	sub    $0xc,%esp
c0109f06:	6a 01                	push   $0x1
c0109f08:	e8 8e 86 ff ff       	call   c010259b <ide_device_valid>
c0109f0d:	83 c4 10             	add    $0x10,%esp
c0109f10:	85 c0                	test   %eax,%eax
c0109f12:	75 14                	jne    c0109f28 <swapfs_init+0x2f>
        panic("swap fs isn't available.\n");
c0109f14:	83 ec 04             	sub    $0x4,%esp
c0109f17:	68 79 ee 10 c0       	push   $0xc010ee79
c0109f1c:	6a 0d                	push   $0xd
c0109f1e:	68 93 ee 10 c0       	push   $0xc010ee93
c0109f23:	e8 c6 78 ff ff       	call   c01017ee <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c0109f28:	83 ec 0c             	sub    $0xc,%esp
c0109f2b:	6a 01                	push   $0x1
c0109f2d:	e8 a2 86 ff ff       	call   c01025d4 <ide_device_size>
c0109f32:	83 c4 10             	add    $0x10,%esp
c0109f35:	c1 e8 03             	shr    $0x3,%eax
c0109f38:	a3 1c 81 1b c0       	mov    %eax,0xc01b811c
}
c0109f3d:	90                   	nop
c0109f3e:	c9                   	leave  
c0109f3f:	c3                   	ret    

c0109f40 <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c0109f40:	f3 0f 1e fb          	endbr32 
c0109f44:	55                   	push   %ebp
c0109f45:	89 e5                	mov    %esp,%ebp
c0109f47:	83 ec 18             	sub    $0x18,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c0109f4a:	83 ec 0c             	sub    $0xc,%esp
c0109f4d:	ff 75 0c             	pushl  0xc(%ebp)
c0109f50:	e8 5f ff ff ff       	call   c0109eb4 <page2kva>
c0109f55:	83 c4 10             	add    $0x10,%esp
c0109f58:	8b 55 08             	mov    0x8(%ebp),%edx
c0109f5b:	c1 ea 08             	shr    $0x8,%edx
c0109f5e:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109f61:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109f65:	74 0b                	je     c0109f72 <swapfs_read+0x32>
c0109f67:	8b 15 1c 81 1b c0    	mov    0xc01b811c,%edx
c0109f6d:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c0109f70:	72 14                	jb     c0109f86 <swapfs_read+0x46>
c0109f72:	ff 75 08             	pushl  0x8(%ebp)
c0109f75:	68 a4 ee 10 c0       	push   $0xc010eea4
c0109f7a:	6a 14                	push   $0x14
c0109f7c:	68 93 ee 10 c0       	push   $0xc010ee93
c0109f81:	e8 68 78 ff ff       	call   c01017ee <__panic>
c0109f86:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109f89:	c1 e2 03             	shl    $0x3,%edx
c0109f8c:	6a 08                	push   $0x8
c0109f8e:	50                   	push   %eax
c0109f8f:	52                   	push   %edx
c0109f90:	6a 01                	push   $0x1
c0109f92:	e8 76 86 ff ff       	call   c010260d <ide_read_secs>
c0109f97:	83 c4 10             	add    $0x10,%esp
}
c0109f9a:	c9                   	leave  
c0109f9b:	c3                   	ret    

c0109f9c <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c0109f9c:	f3 0f 1e fb          	endbr32 
c0109fa0:	55                   	push   %ebp
c0109fa1:	89 e5                	mov    %esp,%ebp
c0109fa3:	83 ec 18             	sub    $0x18,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c0109fa6:	83 ec 0c             	sub    $0xc,%esp
c0109fa9:	ff 75 0c             	pushl  0xc(%ebp)
c0109fac:	e8 03 ff ff ff       	call   c0109eb4 <page2kva>
c0109fb1:	83 c4 10             	add    $0x10,%esp
c0109fb4:	8b 55 08             	mov    0x8(%ebp),%edx
c0109fb7:	c1 ea 08             	shr    $0x8,%edx
c0109fba:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109fbd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109fc1:	74 0b                	je     c0109fce <swapfs_write+0x32>
c0109fc3:	8b 15 1c 81 1b c0    	mov    0xc01b811c,%edx
c0109fc9:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c0109fcc:	72 14                	jb     c0109fe2 <swapfs_write+0x46>
c0109fce:	ff 75 08             	pushl  0x8(%ebp)
c0109fd1:	68 a4 ee 10 c0       	push   $0xc010eea4
c0109fd6:	6a 19                	push   $0x19
c0109fd8:	68 93 ee 10 c0       	push   $0xc010ee93
c0109fdd:	e8 0c 78 ff ff       	call   c01017ee <__panic>
c0109fe2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109fe5:	c1 e2 03             	shl    $0x3,%edx
c0109fe8:	6a 08                	push   $0x8
c0109fea:	50                   	push   %eax
c0109feb:	52                   	push   %edx
c0109fec:	6a 01                	push   $0x1
c0109fee:	e8 45 88 ff ff       	call   c0102838 <ide_write_secs>
c0109ff3:	83 c4 10             	add    $0x10,%esp
}
c0109ff6:	c9                   	leave  
c0109ff7:	c3                   	ret    

c0109ff8 <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c0109ff8:	52                   	push   %edx
    call *%ebx              # call fn
c0109ff9:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c0109ffb:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c0109ffc:	e8 91 0c 00 00       	call   c010ac92 <do_exit>

c010a001 <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010a001:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010a005:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010a007:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010a00a:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010a00d:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010a010:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010a013:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010a016:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010a019:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010a01c:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010a020:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010a023:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010a026:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010a029:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010a02c:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010a02f:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010a032:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010a035:	ff 30                	pushl  (%eax)

    ret
c010a037:	c3                   	ret    

c010a038 <test_and_set_bit>:
 * test_and_set_bit - Atomically set a bit and return its old value
 * @nr:     the bit to set
 * @addr:   the address to count from
 * */
static inline bool
test_and_set_bit(int nr, volatile void *addr) {
c010a038:	55                   	push   %ebp
c010a039:	89 e5                	mov    %esp,%ebp
c010a03b:	83 ec 10             	sub    $0x10,%esp
    int oldbit;
    asm volatile ("btsl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
c010a03e:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a041:	8b 45 08             	mov    0x8(%ebp),%eax
c010a044:	0f ab 02             	bts    %eax,(%edx)
c010a047:	19 c0                	sbb    %eax,%eax
c010a049:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return oldbit != 0;
c010a04c:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010a050:	0f 95 c0             	setne  %al
c010a053:	0f b6 c0             	movzbl %al,%eax
}
c010a056:	c9                   	leave  
c010a057:	c3                   	ret    

c010a058 <test_and_clear_bit>:
 * test_and_clear_bit - Atomically clear a bit and return its old value
 * @nr:     the bit to clear
 * @addr:   the address to count from
 * */
static inline bool
test_and_clear_bit(int nr, volatile void *addr) {
c010a058:	55                   	push   %ebp
c010a059:	89 e5                	mov    %esp,%ebp
c010a05b:	83 ec 10             	sub    $0x10,%esp
    int oldbit;
    asm volatile ("btrl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
c010a05e:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a061:	8b 45 08             	mov    0x8(%ebp),%eax
c010a064:	0f b3 02             	btr    %eax,(%edx)
c010a067:	19 c0                	sbb    %eax,%eax
c010a069:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return oldbit != 0;
c010a06c:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010a070:	0f 95 c0             	setne  %al
c010a073:	0f b6 c0             	movzbl %al,%eax
}
c010a076:	c9                   	leave  
c010a077:	c3                   	ret    

c010a078 <__intr_save>:
__intr_save(void) {
c010a078:	55                   	push   %ebp
c010a079:	89 e5                	mov    %esp,%ebp
c010a07b:	83 ec 18             	sub    $0x18,%esp
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010a07e:	9c                   	pushf  
c010a07f:	58                   	pop    %eax
c010a080:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010a083:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010a086:	25 00 02 00 00       	and    $0x200,%eax
c010a08b:	85 c0                	test   %eax,%eax
c010a08d:	74 0c                	je     c010a09b <__intr_save+0x23>
        intr_disable();
c010a08f:	e8 6b 95 ff ff       	call   c01035ff <intr_disable>
        return 1;
c010a094:	b8 01 00 00 00       	mov    $0x1,%eax
c010a099:	eb 05                	jmp    c010a0a0 <__intr_save+0x28>
    return 0;
c010a09b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a0a0:	c9                   	leave  
c010a0a1:	c3                   	ret    

c010a0a2 <__intr_restore>:
__intr_restore(bool flag) {
c010a0a2:	55                   	push   %ebp
c010a0a3:	89 e5                	mov    %esp,%ebp
c010a0a5:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010a0a8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a0ac:	74 05                	je     c010a0b3 <__intr_restore+0x11>
        intr_enable();
c010a0ae:	e8 40 95 ff ff       	call   c01035f3 <intr_enable>
}
c010a0b3:	90                   	nop
c010a0b4:	c9                   	leave  
c010a0b5:	c3                   	ret    

c010a0b6 <try_lock>:

static inline bool
try_lock(lock_t *lock) {
c010a0b6:	55                   	push   %ebp
c010a0b7:	89 e5                	mov    %esp,%ebp
    return !test_and_set_bit(0, lock);
c010a0b9:	ff 75 08             	pushl  0x8(%ebp)
c010a0bc:	6a 00                	push   $0x0
c010a0be:	e8 75 ff ff ff       	call   c010a038 <test_and_set_bit>
c010a0c3:	83 c4 08             	add    $0x8,%esp
c010a0c6:	85 c0                	test   %eax,%eax
c010a0c8:	0f 94 c0             	sete   %al
c010a0cb:	0f b6 c0             	movzbl %al,%eax
}
c010a0ce:	c9                   	leave  
c010a0cf:	c3                   	ret    

c010a0d0 <lock>:

static inline void
lock(lock_t *lock) {
c010a0d0:	55                   	push   %ebp
c010a0d1:	89 e5                	mov    %esp,%ebp
c010a0d3:	83 ec 08             	sub    $0x8,%esp
    while (!try_lock(lock)) {
c010a0d6:	eb 05                	jmp    c010a0dd <lock+0xd>
        schedule();
c010a0d8:	e8 52 1b 00 00       	call   c010bc2f <schedule>
    while (!try_lock(lock)) {
c010a0dd:	83 ec 0c             	sub    $0xc,%esp
c010a0e0:	ff 75 08             	pushl  0x8(%ebp)
c010a0e3:	e8 ce ff ff ff       	call   c010a0b6 <try_lock>
c010a0e8:	83 c4 10             	add    $0x10,%esp
c010a0eb:	85 c0                	test   %eax,%eax
c010a0ed:	74 e9                	je     c010a0d8 <lock+0x8>
    }
}
c010a0ef:	90                   	nop
c010a0f0:	90                   	nop
c010a0f1:	c9                   	leave  
c010a0f2:	c3                   	ret    

c010a0f3 <unlock>:

static inline void
unlock(lock_t *lock) {
c010a0f3:	55                   	push   %ebp
c010a0f4:	89 e5                	mov    %esp,%ebp
c010a0f6:	83 ec 08             	sub    $0x8,%esp
    if (!test_and_clear_bit(0, lock)) {
c010a0f9:	ff 75 08             	pushl  0x8(%ebp)
c010a0fc:	6a 00                	push   $0x0
c010a0fe:	e8 55 ff ff ff       	call   c010a058 <test_and_clear_bit>
c010a103:	83 c4 08             	add    $0x8,%esp
c010a106:	85 c0                	test   %eax,%eax
c010a108:	75 14                	jne    c010a11e <unlock+0x2b>
        panic("Unlock failed.\n");
c010a10a:	83 ec 04             	sub    $0x4,%esp
c010a10d:	68 c4 ee 10 c0       	push   $0xc010eec4
c010a112:	6a 34                	push   $0x34
c010a114:	68 d4 ee 10 c0       	push   $0xc010eed4
c010a119:	e8 d0 76 ff ff       	call   c01017ee <__panic>
    }
}
c010a11e:	90                   	nop
c010a11f:	c9                   	leave  
c010a120:	c3                   	ret    

c010a121 <page2ppn>:
page2ppn(struct Page *page) {
c010a121:	55                   	push   %ebp
c010a122:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010a124:	a1 60 80 1b c0       	mov    0xc01b8060,%eax
c010a129:	8b 55 08             	mov    0x8(%ebp),%edx
c010a12c:	29 c2                	sub    %eax,%edx
c010a12e:	89 d0                	mov    %edx,%eax
c010a130:	c1 f8 02             	sar    $0x2,%eax
c010a133:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c010a139:	5d                   	pop    %ebp
c010a13a:	c3                   	ret    

c010a13b <page2pa>:
page2pa(struct Page *page) {
c010a13b:	55                   	push   %ebp
c010a13c:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c010a13e:	ff 75 08             	pushl  0x8(%ebp)
c010a141:	e8 db ff ff ff       	call   c010a121 <page2ppn>
c010a146:	83 c4 04             	add    $0x4,%esp
c010a149:	c1 e0 0c             	shl    $0xc,%eax
}
c010a14c:	c9                   	leave  
c010a14d:	c3                   	ret    

c010a14e <pa2page>:
pa2page(uintptr_t pa) {
c010a14e:	55                   	push   %ebp
c010a14f:	89 e5                	mov    %esp,%ebp
c010a151:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c010a154:	8b 45 08             	mov    0x8(%ebp),%eax
c010a157:	c1 e8 0c             	shr    $0xc,%eax
c010a15a:	89 c2                	mov    %eax,%edx
c010a15c:	a1 80 5f 1b c0       	mov    0xc01b5f80,%eax
c010a161:	39 c2                	cmp    %eax,%edx
c010a163:	72 14                	jb     c010a179 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c010a165:	83 ec 04             	sub    $0x4,%esp
c010a168:	68 e8 ee 10 c0       	push   $0xc010eee8
c010a16d:	6a 5e                	push   $0x5e
c010a16f:	68 07 ef 10 c0       	push   $0xc010ef07
c010a174:	e8 75 76 ff ff       	call   c01017ee <__panic>
    return &pages[PPN(pa)];
c010a179:	8b 0d 60 80 1b c0    	mov    0xc01b8060,%ecx
c010a17f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a182:	c1 e8 0c             	shr    $0xc,%eax
c010a185:	89 c2                	mov    %eax,%edx
c010a187:	89 d0                	mov    %edx,%eax
c010a189:	c1 e0 03             	shl    $0x3,%eax
c010a18c:	01 d0                	add    %edx,%eax
c010a18e:	c1 e0 02             	shl    $0x2,%eax
c010a191:	01 c8                	add    %ecx,%eax
}
c010a193:	c9                   	leave  
c010a194:	c3                   	ret    

c010a195 <page2kva>:
page2kva(struct Page *page) {
c010a195:	55                   	push   %ebp
c010a196:	89 e5                	mov    %esp,%ebp
c010a198:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c010a19b:	ff 75 08             	pushl  0x8(%ebp)
c010a19e:	e8 98 ff ff ff       	call   c010a13b <page2pa>
c010a1a3:	83 c4 04             	add    $0x4,%esp
c010a1a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a1a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a1ac:	c1 e8 0c             	shr    $0xc,%eax
c010a1af:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a1b2:	a1 80 5f 1b c0       	mov    0xc01b5f80,%eax
c010a1b7:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a1ba:	72 14                	jb     c010a1d0 <page2kva+0x3b>
c010a1bc:	ff 75 f4             	pushl  -0xc(%ebp)
c010a1bf:	68 18 ef 10 c0       	push   $0xc010ef18
c010a1c4:	6a 65                	push   $0x65
c010a1c6:	68 07 ef 10 c0       	push   $0xc010ef07
c010a1cb:	e8 1e 76 ff ff       	call   c01017ee <__panic>
c010a1d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a1d3:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010a1d8:	c9                   	leave  
c010a1d9:	c3                   	ret    

c010a1da <kva2page>:
kva2page(void *kva) {
c010a1da:	55                   	push   %ebp
c010a1db:	89 e5                	mov    %esp,%ebp
c010a1dd:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PADDR(kva));
c010a1e0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a1e6:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010a1ed:	77 14                	ja     c010a203 <kva2page+0x29>
c010a1ef:	ff 75 f4             	pushl  -0xc(%ebp)
c010a1f2:	68 3c ef 10 c0       	push   $0xc010ef3c
c010a1f7:	6a 6a                	push   $0x6a
c010a1f9:	68 07 ef 10 c0       	push   $0xc010ef07
c010a1fe:	e8 eb 75 ff ff       	call   c01017ee <__panic>
c010a203:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a206:	05 00 00 00 40       	add    $0x40000000,%eax
c010a20b:	83 ec 0c             	sub    $0xc,%esp
c010a20e:	50                   	push   %eax
c010a20f:	e8 3a ff ff ff       	call   c010a14e <pa2page>
c010a214:	83 c4 10             	add    $0x10,%esp
}
c010a217:	c9                   	leave  
c010a218:	c3                   	ret    

c010a219 <mm_count_inc>:

static inline int
mm_count_inc(struct mm_struct *mm) {
c010a219:	55                   	push   %ebp
c010a21a:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c010a21c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a21f:	8b 40 18             	mov    0x18(%eax),%eax
c010a222:	8d 50 01             	lea    0x1(%eax),%edx
c010a225:	8b 45 08             	mov    0x8(%ebp),%eax
c010a228:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010a22b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a22e:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a231:	5d                   	pop    %ebp
c010a232:	c3                   	ret    

c010a233 <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c010a233:	55                   	push   %ebp
c010a234:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c010a236:	8b 45 08             	mov    0x8(%ebp),%eax
c010a239:	8b 40 18             	mov    0x18(%eax),%eax
c010a23c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010a23f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a242:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010a245:	8b 45 08             	mov    0x8(%ebp),%eax
c010a248:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a24b:	5d                   	pop    %ebp
c010a24c:	c3                   	ret    

c010a24d <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c010a24d:	55                   	push   %ebp
c010a24e:	89 e5                	mov    %esp,%ebp
c010a250:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c010a253:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a257:	74 12                	je     c010a26b <lock_mm+0x1e>
        lock(&(mm->mm_lock));
c010a259:	8b 45 08             	mov    0x8(%ebp),%eax
c010a25c:	83 c0 1c             	add    $0x1c,%eax
c010a25f:	83 ec 0c             	sub    $0xc,%esp
c010a262:	50                   	push   %eax
c010a263:	e8 68 fe ff ff       	call   c010a0d0 <lock>
c010a268:	83 c4 10             	add    $0x10,%esp
    }
}
c010a26b:	90                   	nop
c010a26c:	c9                   	leave  
c010a26d:	c3                   	ret    

c010a26e <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010a26e:	55                   	push   %ebp
c010a26f:	89 e5                	mov    %esp,%ebp
c010a271:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c010a274:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a278:	74 12                	je     c010a28c <unlock_mm+0x1e>
        unlock(&(mm->mm_lock));
c010a27a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a27d:	83 c0 1c             	add    $0x1c,%eax
c010a280:	83 ec 0c             	sub    $0xc,%esp
c010a283:	50                   	push   %eax
c010a284:	e8 6a fe ff ff       	call   c010a0f3 <unlock>
c010a289:	83 c4 10             	add    $0x10,%esp
    }
}
c010a28c:	90                   	nop
c010a28d:	c9                   	leave  
c010a28e:	c3                   	ret    

c010a28f <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010a28f:	f3 0f 1e fb          	endbr32 
c010a293:	55                   	push   %ebp
c010a294:	89 e5                	mov    %esp,%ebp
c010a296:	83 ec 18             	sub    $0x18,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c010a299:	83 ec 0c             	sub    $0xc,%esp
c010a29c:	6a 7c                	push   $0x7c
c010a29e:	e8 9f e5 ff ff       	call   c0108842 <kmalloc>
c010a2a3:	83 c4 10             	add    $0x10,%esp
c010a2a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c010a2a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a2ad:	0f 84 bd 00 00 00    	je     c010a370 <alloc_proc+0xe1>
     *       struct trapframe *tf;                       // Trap frame for current interrupt
     *       uintptr_t cr3;                              // CR3 register: the base addr of Page Directroy Table(PDT)
     *       uint32_t flags;                             // Process flag
     *       char name[PROC_NAME_LEN + 1];               // Process name
     */
        proc->state = PROC_UNINIT;
c010a2b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2b6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;
c010a2bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2bf:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->runs = 0;
c010a2c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2c9:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        proc->kstack = 0;
c010a2d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2d3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        proc->need_resched = 0;
c010a2da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2dd:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        proc->parent = NULL;
c010a2e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2e7:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        proc->mm = NULL;
c010a2ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2f1:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        memset(&(proc->context), 0, sizeof(struct context));
c010a2f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2fb:	83 c0 1c             	add    $0x1c,%eax
c010a2fe:	83 ec 04             	sub    $0x4,%esp
c010a301:	6a 20                	push   $0x20
c010a303:	6a 00                	push   $0x0
c010a305:	50                   	push   %eax
c010a306:	e8 57 1f 00 00       	call   c010c262 <memset>
c010a30b:	83 c4 10             	add    $0x10,%esp
        proc->tf = NULL;
c010a30e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a311:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
        proc->cr3 = boot_cr3;
c010a318:	8b 15 5c 80 1b c0    	mov    0xc01b805c,%edx
c010a31e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a321:	89 50 40             	mov    %edx,0x40(%eax)
        proc->flags = 0;
c010a324:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a327:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
        memset(proc->name, 0, PROC_NAME_LEN);
c010a32e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a331:	83 c0 48             	add    $0x48,%eax
c010a334:	83 ec 04             	sub    $0x4,%esp
c010a337:	6a 0f                	push   $0xf
c010a339:	6a 00                	push   $0x0
c010a33b:	50                   	push   %eax
c010a33c:	e8 21 1f 00 00       	call   c010c262 <memset>
c010a341:	83 c4 10             	add    $0x10,%esp
        proc->wait_state = 0;
c010a344:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a347:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
        proc->cptr = proc->optr = proc->yptr = NULL;
c010a34e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a351:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
c010a358:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a35b:	8b 50 74             	mov    0x74(%eax),%edx
c010a35e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a361:	89 50 78             	mov    %edx,0x78(%eax)
c010a364:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a367:	8b 50 78             	mov    0x78(%eax),%edx
c010a36a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a36d:	89 50 70             	mov    %edx,0x70(%eax)
    }
    return proc;
c010a370:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a373:	c9                   	leave  
c010a374:	c3                   	ret    

c010a375 <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010a375:	f3 0f 1e fb          	endbr32 
c010a379:	55                   	push   %ebp
c010a37a:	89 e5                	mov    %esp,%ebp
c010a37c:	83 ec 08             	sub    $0x8,%esp
    memset(proc->name, 0, sizeof(proc->name));
c010a37f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a382:	83 c0 48             	add    $0x48,%eax
c010a385:	83 ec 04             	sub    $0x4,%esp
c010a388:	6a 10                	push   $0x10
c010a38a:	6a 00                	push   $0x0
c010a38c:	50                   	push   %eax
c010a38d:	e8 d0 1e 00 00       	call   c010c262 <memset>
c010a392:	83 c4 10             	add    $0x10,%esp
    return memcpy(proc->name, name, PROC_NAME_LEN);
c010a395:	8b 45 08             	mov    0x8(%ebp),%eax
c010a398:	83 c0 48             	add    $0x48,%eax
c010a39b:	83 ec 04             	sub    $0x4,%esp
c010a39e:	6a 0f                	push   $0xf
c010a3a0:	ff 75 0c             	pushl  0xc(%ebp)
c010a3a3:	50                   	push   %eax
c010a3a4:	e8 a3 1f 00 00       	call   c010c34c <memcpy>
c010a3a9:	83 c4 10             	add    $0x10,%esp
}
c010a3ac:	c9                   	leave  
c010a3ad:	c3                   	ret    

c010a3ae <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c010a3ae:	f3 0f 1e fb          	endbr32 
c010a3b2:	55                   	push   %ebp
c010a3b3:	89 e5                	mov    %esp,%ebp
c010a3b5:	83 ec 08             	sub    $0x8,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c010a3b8:	83 ec 04             	sub    $0x4,%esp
c010a3bb:	6a 10                	push   $0x10
c010a3bd:	6a 00                	push   $0x0
c010a3bf:	68 44 80 1b c0       	push   $0xc01b8044
c010a3c4:	e8 99 1e 00 00       	call   c010c262 <memset>
c010a3c9:	83 c4 10             	add    $0x10,%esp
    return memcpy(name, proc->name, PROC_NAME_LEN);
c010a3cc:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3cf:	83 c0 48             	add    $0x48,%eax
c010a3d2:	83 ec 04             	sub    $0x4,%esp
c010a3d5:	6a 0f                	push   $0xf
c010a3d7:	50                   	push   %eax
c010a3d8:	68 44 80 1b c0       	push   $0xc01b8044
c010a3dd:	e8 6a 1f 00 00       	call   c010c34c <memcpy>
c010a3e2:	83 c4 10             	add    $0x10,%esp
}
c010a3e5:	c9                   	leave  
c010a3e6:	c3                   	ret    

c010a3e7 <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c010a3e7:	f3 0f 1e fb          	endbr32 
c010a3eb:	55                   	push   %ebp
c010a3ec:	89 e5                	mov    %esp,%ebp
c010a3ee:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c010a3f1:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3f4:	83 c0 58             	add    $0x58,%eax
c010a3f7:	c7 45 fc 58 81 1b c0 	movl   $0xc01b8158,-0x4(%ebp)
c010a3fe:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010a401:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a404:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a407:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a40a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    __list_add(elm, listelm, listelm->next);
c010a40d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a410:	8b 40 04             	mov    0x4(%eax),%eax
c010a413:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a416:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010a419:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a41c:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010a41f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    prev->next = next->prev = elm;
c010a422:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a425:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a428:	89 10                	mov    %edx,(%eax)
c010a42a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a42d:	8b 10                	mov    (%eax),%edx
c010a42f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a432:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010a435:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a438:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a43b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010a43e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a441:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a444:	89 10                	mov    %edx,(%eax)
}
c010a446:	90                   	nop
}
c010a447:	90                   	nop
}
c010a448:	90                   	nop
    proc->yptr = NULL;
c010a449:	8b 45 08             	mov    0x8(%ebp),%eax
c010a44c:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010a453:	8b 45 08             	mov    0x8(%ebp),%eax
c010a456:	8b 40 14             	mov    0x14(%eax),%eax
c010a459:	8b 50 70             	mov    0x70(%eax),%edx
c010a45c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a45f:	89 50 78             	mov    %edx,0x78(%eax)
c010a462:	8b 45 08             	mov    0x8(%ebp),%eax
c010a465:	8b 40 78             	mov    0x78(%eax),%eax
c010a468:	85 c0                	test   %eax,%eax
c010a46a:	74 0c                	je     c010a478 <set_links+0x91>
        proc->optr->yptr = proc;
c010a46c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a46f:	8b 40 78             	mov    0x78(%eax),%eax
c010a472:	8b 55 08             	mov    0x8(%ebp),%edx
c010a475:	89 50 74             	mov    %edx,0x74(%eax)
    }
    proc->parent->cptr = proc;
c010a478:	8b 45 08             	mov    0x8(%ebp),%eax
c010a47b:	8b 40 14             	mov    0x14(%eax),%eax
c010a47e:	8b 55 08             	mov    0x8(%ebp),%edx
c010a481:	89 50 70             	mov    %edx,0x70(%eax)
    nr_process ++;
c010a484:	a1 40 80 1b c0       	mov    0xc01b8040,%eax
c010a489:	83 c0 01             	add    $0x1,%eax
c010a48c:	a3 40 80 1b c0       	mov    %eax,0xc01b8040
}
c010a491:	90                   	nop
c010a492:	c9                   	leave  
c010a493:	c3                   	ret    

c010a494 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010a494:	f3 0f 1e fb          	endbr32 
c010a498:	55                   	push   %ebp
c010a499:	89 e5                	mov    %esp,%ebp
c010a49b:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c010a49e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4a1:	83 c0 58             	add    $0x58,%eax
c010a4a4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __list_del(listelm->prev, listelm->next);
c010a4a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a4aa:	8b 40 04             	mov    0x4(%eax),%eax
c010a4ad:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a4b0:	8b 12                	mov    (%edx),%edx
c010a4b2:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010a4b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    prev->next = next;
c010a4b8:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a4bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a4be:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010a4c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4c4:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010a4c7:	89 10                	mov    %edx,(%eax)
}
c010a4c9:	90                   	nop
}
c010a4ca:	90                   	nop
    if (proc->optr != NULL) {
c010a4cb:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4ce:	8b 40 78             	mov    0x78(%eax),%eax
c010a4d1:	85 c0                	test   %eax,%eax
c010a4d3:	74 0f                	je     c010a4e4 <remove_links+0x50>
        proc->optr->yptr = proc->yptr;
c010a4d5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4d8:	8b 40 78             	mov    0x78(%eax),%eax
c010a4db:	8b 55 08             	mov    0x8(%ebp),%edx
c010a4de:	8b 52 74             	mov    0x74(%edx),%edx
c010a4e1:	89 50 74             	mov    %edx,0x74(%eax)
    }
    if (proc->yptr != NULL) {
c010a4e4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4e7:	8b 40 74             	mov    0x74(%eax),%eax
c010a4ea:	85 c0                	test   %eax,%eax
c010a4ec:	74 11                	je     c010a4ff <remove_links+0x6b>
        proc->yptr->optr = proc->optr;
c010a4ee:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4f1:	8b 40 74             	mov    0x74(%eax),%eax
c010a4f4:	8b 55 08             	mov    0x8(%ebp),%edx
c010a4f7:	8b 52 78             	mov    0x78(%edx),%edx
c010a4fa:	89 50 78             	mov    %edx,0x78(%eax)
c010a4fd:	eb 0f                	jmp    c010a50e <remove_links+0x7a>
    }
    else {
       proc->parent->cptr = proc->optr;
c010a4ff:	8b 45 08             	mov    0x8(%ebp),%eax
c010a502:	8b 40 14             	mov    0x14(%eax),%eax
c010a505:	8b 55 08             	mov    0x8(%ebp),%edx
c010a508:	8b 52 78             	mov    0x78(%edx),%edx
c010a50b:	89 50 70             	mov    %edx,0x70(%eax)
    }
    nr_process --;
c010a50e:	a1 40 80 1b c0       	mov    0xc01b8040,%eax
c010a513:	83 e8 01             	sub    $0x1,%eax
c010a516:	a3 40 80 1b c0       	mov    %eax,0xc01b8040
}
c010a51b:	90                   	nop
c010a51c:	c9                   	leave  
c010a51d:	c3                   	ret    

c010a51e <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010a51e:	f3 0f 1e fb          	endbr32 
c010a522:	55                   	push   %ebp
c010a523:	89 e5                	mov    %esp,%ebp
c010a525:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010a528:	c7 45 f8 58 81 1b c0 	movl   $0xc01b8158,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010a52f:	a1 80 2a 13 c0       	mov    0xc0132a80,%eax
c010a534:	83 c0 01             	add    $0x1,%eax
c010a537:	a3 80 2a 13 c0       	mov    %eax,0xc0132a80
c010a53c:	a1 80 2a 13 c0       	mov    0xc0132a80,%eax
c010a541:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010a546:	7e 0c                	jle    c010a554 <get_pid+0x36>
        last_pid = 1;
c010a548:	c7 05 80 2a 13 c0 01 	movl   $0x1,0xc0132a80
c010a54f:	00 00 00 
        goto inside;
c010a552:	eb 14                	jmp    c010a568 <get_pid+0x4a>
    }
    if (last_pid >= next_safe) {
c010a554:	8b 15 80 2a 13 c0    	mov    0xc0132a80,%edx
c010a55a:	a1 84 2a 13 c0       	mov    0xc0132a84,%eax
c010a55f:	39 c2                	cmp    %eax,%edx
c010a561:	0f 8c ad 00 00 00    	jl     c010a614 <get_pid+0xf6>
    inside:
c010a567:	90                   	nop
        next_safe = MAX_PID;
c010a568:	c7 05 84 2a 13 c0 00 	movl   $0x2000,0xc0132a84
c010a56f:	20 00 00 
    repeat:
        le = list;
c010a572:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a575:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010a578:	eb 7f                	jmp    c010a5f9 <get_pid+0xdb>
            proc = le2proc(le, list_link);
c010a57a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a57d:	83 e8 58             	sub    $0x58,%eax
c010a580:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010a583:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a586:	8b 50 04             	mov    0x4(%eax),%edx
c010a589:	a1 80 2a 13 c0       	mov    0xc0132a80,%eax
c010a58e:	39 c2                	cmp    %eax,%edx
c010a590:	75 3e                	jne    c010a5d0 <get_pid+0xb2>
                if (++ last_pid >= next_safe) {
c010a592:	a1 80 2a 13 c0       	mov    0xc0132a80,%eax
c010a597:	83 c0 01             	add    $0x1,%eax
c010a59a:	a3 80 2a 13 c0       	mov    %eax,0xc0132a80
c010a59f:	8b 15 80 2a 13 c0    	mov    0xc0132a80,%edx
c010a5a5:	a1 84 2a 13 c0       	mov    0xc0132a84,%eax
c010a5aa:	39 c2                	cmp    %eax,%edx
c010a5ac:	7c 4b                	jl     c010a5f9 <get_pid+0xdb>
                    if (last_pid >= MAX_PID) {
c010a5ae:	a1 80 2a 13 c0       	mov    0xc0132a80,%eax
c010a5b3:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010a5b8:	7e 0a                	jle    c010a5c4 <get_pid+0xa6>
                        last_pid = 1;
c010a5ba:	c7 05 80 2a 13 c0 01 	movl   $0x1,0xc0132a80
c010a5c1:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010a5c4:	c7 05 84 2a 13 c0 00 	movl   $0x2000,0xc0132a84
c010a5cb:	20 00 00 
                    goto repeat;
c010a5ce:	eb a2                	jmp    c010a572 <get_pid+0x54>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010a5d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5d3:	8b 50 04             	mov    0x4(%eax),%edx
c010a5d6:	a1 80 2a 13 c0       	mov    0xc0132a80,%eax
c010a5db:	39 c2                	cmp    %eax,%edx
c010a5dd:	7e 1a                	jle    c010a5f9 <get_pid+0xdb>
c010a5df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5e2:	8b 50 04             	mov    0x4(%eax),%edx
c010a5e5:	a1 84 2a 13 c0       	mov    0xc0132a84,%eax
c010a5ea:	39 c2                	cmp    %eax,%edx
c010a5ec:	7d 0b                	jge    c010a5f9 <get_pid+0xdb>
                next_safe = proc->pid;
c010a5ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5f1:	8b 40 04             	mov    0x4(%eax),%eax
c010a5f4:	a3 84 2a 13 c0       	mov    %eax,0xc0132a84
c010a5f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a5fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return listelm->next;
c010a5ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a602:	8b 40 04             	mov    0x4(%eax),%eax
        while ((le = list_next(le)) != list) {
c010a605:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010a608:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a60b:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010a60e:	0f 85 66 ff ff ff    	jne    c010a57a <get_pid+0x5c>
            }
        }
    }
    return last_pid;
c010a614:	a1 80 2a 13 c0       	mov    0xc0132a80,%eax
}
c010a619:	c9                   	leave  
c010a61a:	c3                   	ret    

c010a61b <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010a61b:	f3 0f 1e fb          	endbr32 
c010a61f:	55                   	push   %ebp
c010a620:	89 e5                	mov    %esp,%ebp
c010a622:	83 ec 18             	sub    $0x18,%esp
    if (proc != current) {
c010a625:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010a62a:	39 45 08             	cmp    %eax,0x8(%ebp)
c010a62d:	74 6c                	je     c010a69b <proc_run+0x80>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010a62f:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010a634:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a637:	8b 45 08             	mov    0x8(%ebp),%eax
c010a63a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010a63d:	e8 36 fa ff ff       	call   c010a078 <__intr_save>
c010a642:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010a645:	8b 45 08             	mov    0x8(%ebp),%eax
c010a648:	a3 28 60 1b c0       	mov    %eax,0xc01b6028
            load_esp0(next->kstack + KSTACKSIZE);
c010a64d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a650:	8b 40 0c             	mov    0xc(%eax),%eax
c010a653:	05 00 20 00 00       	add    $0x2000,%eax
c010a658:	83 ec 0c             	sub    $0xc,%esp
c010a65b:	50                   	push   %eax
c010a65c:	e8 a0 a4 ff ff       	call   c0104b01 <load_esp0>
c010a661:	83 c4 10             	add    $0x10,%esp
            lcr3(next->cr3);
c010a664:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a667:	8b 40 40             	mov    0x40(%eax),%eax
c010a66a:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010a66d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a670:	0f 22 d8             	mov    %eax,%cr3
}
c010a673:	90                   	nop
            switch_to(&(prev->context), &(next->context));
c010a674:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a677:	8d 50 1c             	lea    0x1c(%eax),%edx
c010a67a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a67d:	83 c0 1c             	add    $0x1c,%eax
c010a680:	83 ec 08             	sub    $0x8,%esp
c010a683:	52                   	push   %edx
c010a684:	50                   	push   %eax
c010a685:	e8 77 f9 ff ff       	call   c010a001 <switch_to>
c010a68a:	83 c4 10             	add    $0x10,%esp
        }
        local_intr_restore(intr_flag);
c010a68d:	83 ec 0c             	sub    $0xc,%esp
c010a690:	ff 75 ec             	pushl  -0x14(%ebp)
c010a693:	e8 0a fa ff ff       	call   c010a0a2 <__intr_restore>
c010a698:	83 c4 10             	add    $0x10,%esp
    }
}
c010a69b:	90                   	nop
c010a69c:	c9                   	leave  
c010a69d:	c3                   	ret    

c010a69e <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010a69e:	f3 0f 1e fb          	endbr32 
c010a6a2:	55                   	push   %ebp
c010a6a3:	89 e5                	mov    %esp,%ebp
c010a6a5:	83 ec 08             	sub    $0x8,%esp
    forkrets(current->tf);
c010a6a8:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010a6ad:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a6b0:	83 ec 0c             	sub    $0xc,%esp
c010a6b3:	50                   	push   %eax
c010a6b4:	e8 79 a2 ff ff       	call   c0104932 <forkrets>
c010a6b9:	83 c4 10             	add    $0x10,%esp
}
c010a6bc:	90                   	nop
c010a6bd:	c9                   	leave  
c010a6be:	c3                   	ret    

c010a6bf <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010a6bf:	f3 0f 1e fb          	endbr32 
c010a6c3:	55                   	push   %ebp
c010a6c4:	89 e5                	mov    %esp,%ebp
c010a6c6:	53                   	push   %ebx
c010a6c7:	83 ec 24             	sub    $0x24,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010a6ca:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6cd:	8d 58 60             	lea    0x60(%eax),%ebx
c010a6d0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6d3:	8b 40 04             	mov    0x4(%eax),%eax
c010a6d6:	83 ec 08             	sub    $0x8,%esp
c010a6d9:	6a 0a                	push   $0xa
c010a6db:	50                   	push   %eax
c010a6dc:	e8 42 23 00 00       	call   c010ca23 <hash32>
c010a6e1:	83 c4 10             	add    $0x10,%esp
c010a6e4:	c1 e0 03             	shl    $0x3,%eax
c010a6e7:	05 40 60 1b c0       	add    $0xc01b6040,%eax
c010a6ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a6ef:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010a6f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a6f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a6fb:	89 45 e8             	mov    %eax,-0x18(%ebp)
    __list_add(elm, listelm, listelm->next);
c010a6fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a701:	8b 40 04             	mov    0x4(%eax),%eax
c010a704:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a707:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010a70a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a70d:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010a710:	89 45 dc             	mov    %eax,-0x24(%ebp)
    prev->next = next->prev = elm;
c010a713:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a716:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a719:	89 10                	mov    %edx,(%eax)
c010a71b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a71e:	8b 10                	mov    (%eax),%edx
c010a720:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a723:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010a726:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a729:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a72c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010a72f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a732:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010a735:	89 10                	mov    %edx,(%eax)
}
c010a737:	90                   	nop
}
c010a738:	90                   	nop
}
c010a739:	90                   	nop
}
c010a73a:	90                   	nop
c010a73b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010a73e:	c9                   	leave  
c010a73f:	c3                   	ret    

c010a740 <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010a740:	f3 0f 1e fb          	endbr32 
c010a744:	55                   	push   %ebp
c010a745:	89 e5                	mov    %esp,%ebp
c010a747:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010a74a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a74d:	83 c0 60             	add    $0x60,%eax
c010a750:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __list_del(listelm->prev, listelm->next);
c010a753:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a756:	8b 40 04             	mov    0x4(%eax),%eax
c010a759:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a75c:	8b 12                	mov    (%edx),%edx
c010a75e:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010a761:	89 45 f4             	mov    %eax,-0xc(%ebp)
    prev->next = next;
c010a764:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a767:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a76a:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010a76d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a770:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010a773:	89 10                	mov    %edx,(%eax)
}
c010a775:	90                   	nop
}
c010a776:	90                   	nop
}
c010a777:	90                   	nop
c010a778:	c9                   	leave  
c010a779:	c3                   	ret    

c010a77a <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010a77a:	f3 0f 1e fb          	endbr32 
c010a77e:	55                   	push   %ebp
c010a77f:	89 e5                	mov    %esp,%ebp
c010a781:	83 ec 18             	sub    $0x18,%esp
    if (0 < pid && pid < MAX_PID) {
c010a784:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a788:	7e 5d                	jle    c010a7e7 <find_proc+0x6d>
c010a78a:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010a791:	7f 54                	jg     c010a7e7 <find_proc+0x6d>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010a793:	8b 45 08             	mov    0x8(%ebp),%eax
c010a796:	83 ec 08             	sub    $0x8,%esp
c010a799:	6a 0a                	push   $0xa
c010a79b:	50                   	push   %eax
c010a79c:	e8 82 22 00 00       	call   c010ca23 <hash32>
c010a7a1:	83 c4 10             	add    $0x10,%esp
c010a7a4:	c1 e0 03             	shl    $0x3,%eax
c010a7a7:	05 40 60 1b c0       	add    $0xc01b6040,%eax
c010a7ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a7af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a7b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010a7b5:	eb 19                	jmp    c010a7d0 <find_proc+0x56>
            struct proc_struct *proc = le2proc(le, hash_link);
c010a7b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7ba:	83 e8 60             	sub    $0x60,%eax
c010a7bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010a7c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a7c3:	8b 40 04             	mov    0x4(%eax),%eax
c010a7c6:	39 45 08             	cmp    %eax,0x8(%ebp)
c010a7c9:	75 05                	jne    c010a7d0 <find_proc+0x56>
                return proc;
c010a7cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a7ce:	eb 1c                	jmp    c010a7ec <find_proc+0x72>
c010a7d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7d3:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return listelm->next;
c010a7d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a7d9:	8b 40 04             	mov    0x4(%eax),%eax
        while ((le = list_next(le)) != list) {
c010a7dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a7df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7e2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010a7e5:	75 d0                	jne    c010a7b7 <find_proc+0x3d>
            }
        }
    }
    return NULL;
c010a7e7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a7ec:	c9                   	leave  
c010a7ed:	c3                   	ret    

c010a7ee <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010a7ee:	f3 0f 1e fb          	endbr32 
c010a7f2:	55                   	push   %ebp
c010a7f3:	89 e5                	mov    %esp,%ebp
c010a7f5:	83 ec 58             	sub    $0x58,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010a7f8:	83 ec 04             	sub    $0x4,%esp
c010a7fb:	6a 4c                	push   $0x4c
c010a7fd:	6a 00                	push   $0x0
c010a7ff:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010a802:	50                   	push   %eax
c010a803:	e8 5a 1a 00 00       	call   c010c262 <memset>
c010a808:	83 c4 10             	add    $0x10,%esp
    tf.tf_cs = KERNEL_CS;
c010a80b:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010a811:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010a817:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010a81b:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010a81f:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010a823:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010a827:	8b 45 08             	mov    0x8(%ebp),%eax
c010a82a:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010a82d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a830:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010a833:	b8 f8 9f 10 c0       	mov    $0xc0109ff8,%eax
c010a838:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010a83b:	8b 45 10             	mov    0x10(%ebp),%eax
c010a83e:	80 cc 01             	or     $0x1,%ah
c010a841:	89 c2                	mov    %eax,%edx
c010a843:	83 ec 04             	sub    $0x4,%esp
c010a846:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010a849:	50                   	push   %eax
c010a84a:	6a 00                	push   $0x0
c010a84c:	52                   	push   %edx
c010a84d:	e8 0f 03 00 00       	call   c010ab61 <do_fork>
c010a852:	83 c4 10             	add    $0x10,%esp
}
c010a855:	c9                   	leave  
c010a856:	c3                   	ret    

c010a857 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010a857:	f3 0f 1e fb          	endbr32 
c010a85b:	55                   	push   %ebp
c010a85c:	89 e5                	mov    %esp,%ebp
c010a85e:	83 ec 18             	sub    $0x18,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010a861:	83 ec 0c             	sub    $0xc,%esp
c010a864:	6a 02                	push   $0x2
c010a866:	e8 fb a3 ff ff       	call   c0104c66 <alloc_pages>
c010a86b:	83 c4 10             	add    $0x10,%esp
c010a86e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010a871:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a875:	74 1d                	je     c010a894 <setup_kstack+0x3d>
        proc->kstack = (uintptr_t)page2kva(page);
c010a877:	83 ec 0c             	sub    $0xc,%esp
c010a87a:	ff 75 f4             	pushl  -0xc(%ebp)
c010a87d:	e8 13 f9 ff ff       	call   c010a195 <page2kva>
c010a882:	83 c4 10             	add    $0x10,%esp
c010a885:	89 c2                	mov    %eax,%edx
c010a887:	8b 45 08             	mov    0x8(%ebp),%eax
c010a88a:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010a88d:	b8 00 00 00 00       	mov    $0x0,%eax
c010a892:	eb 05                	jmp    c010a899 <setup_kstack+0x42>
    }
    return -E_NO_MEM;
c010a894:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010a899:	c9                   	leave  
c010a89a:	c3                   	ret    

c010a89b <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010a89b:	f3 0f 1e fb          	endbr32 
c010a89f:	55                   	push   %ebp
c010a8a0:	89 e5                	mov    %esp,%ebp
c010a8a2:	83 ec 08             	sub    $0x8,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010a8a5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8a8:	8b 40 0c             	mov    0xc(%eax),%eax
c010a8ab:	83 ec 0c             	sub    $0xc,%esp
c010a8ae:	50                   	push   %eax
c010a8af:	e8 26 f9 ff ff       	call   c010a1da <kva2page>
c010a8b4:	83 c4 10             	add    $0x10,%esp
c010a8b7:	83 ec 08             	sub    $0x8,%esp
c010a8ba:	6a 02                	push   $0x2
c010a8bc:	50                   	push   %eax
c010a8bd:	e8 14 a4 ff ff       	call   c0104cd6 <free_pages>
c010a8c2:	83 c4 10             	add    $0x10,%esp
}
c010a8c5:	90                   	nop
c010a8c6:	c9                   	leave  
c010a8c7:	c3                   	ret    

c010a8c8 <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010a8c8:	f3 0f 1e fb          	endbr32 
c010a8cc:	55                   	push   %ebp
c010a8cd:	89 e5                	mov    %esp,%ebp
c010a8cf:	83 ec 18             	sub    $0x18,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010a8d2:	83 ec 0c             	sub    $0xc,%esp
c010a8d5:	6a 01                	push   $0x1
c010a8d7:	e8 8a a3 ff ff       	call   c0104c66 <alloc_pages>
c010a8dc:	83 c4 10             	add    $0x10,%esp
c010a8df:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a8e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a8e6:	75 07                	jne    c010a8ef <setup_pgdir+0x27>
        return -E_NO_MEM;
c010a8e8:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010a8ed:	eb 74                	jmp    c010a963 <setup_pgdir+0x9b>
    }
    pde_t *pgdir = page2kva(page);
c010a8ef:	83 ec 0c             	sub    $0xc,%esp
c010a8f2:	ff 75 f4             	pushl  -0xc(%ebp)
c010a8f5:	e8 9b f8 ff ff       	call   c010a195 <page2kva>
c010a8fa:	83 c4 10             	add    $0x10,%esp
c010a8fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010a900:	a1 e0 29 13 c0       	mov    0xc01329e0,%eax
c010a905:	83 ec 04             	sub    $0x4,%esp
c010a908:	68 00 10 00 00       	push   $0x1000
c010a90d:	50                   	push   %eax
c010a90e:	ff 75 f0             	pushl  -0x10(%ebp)
c010a911:	e8 36 1a 00 00       	call   c010c34c <memcpy>
c010a916:	83 c4 10             	add    $0x10,%esp
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010a919:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a91c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a91f:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010a926:	77 17                	ja     c010a93f <setup_pgdir+0x77>
c010a928:	ff 75 ec             	pushl  -0x14(%ebp)
c010a92b:	68 3c ef 10 c0       	push   $0xc010ef3c
c010a930:	68 28 01 00 00       	push   $0x128
c010a935:	68 60 ef 10 c0       	push   $0xc010ef60
c010a93a:	e8 af 6e ff ff       	call   c01017ee <__panic>
c010a93f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a942:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010a948:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a94b:	05 ac 0f 00 00       	add    $0xfac,%eax
c010a950:	83 ca 03             	or     $0x3,%edx
c010a953:	89 10                	mov    %edx,(%eax)
    mm->pgdir = pgdir;
c010a955:	8b 45 08             	mov    0x8(%ebp),%eax
c010a958:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a95b:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010a95e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a963:	c9                   	leave  
c010a964:	c3                   	ret    

c010a965 <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010a965:	f3 0f 1e fb          	endbr32 
c010a969:	55                   	push   %ebp
c010a96a:	89 e5                	mov    %esp,%ebp
c010a96c:	83 ec 08             	sub    $0x8,%esp
    free_page(kva2page(mm->pgdir));
c010a96f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a972:	8b 40 0c             	mov    0xc(%eax),%eax
c010a975:	83 ec 0c             	sub    $0xc,%esp
c010a978:	50                   	push   %eax
c010a979:	e8 5c f8 ff ff       	call   c010a1da <kva2page>
c010a97e:	83 c4 10             	add    $0x10,%esp
c010a981:	83 ec 08             	sub    $0x8,%esp
c010a984:	6a 01                	push   $0x1
c010a986:	50                   	push   %eax
c010a987:	e8 4a a3 ff ff       	call   c0104cd6 <free_pages>
c010a98c:	83 c4 10             	add    $0x10,%esp
}
c010a98f:	90                   	nop
c010a990:	c9                   	leave  
c010a991:	c3                   	ret    

c010a992 <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010a992:	f3 0f 1e fb          	endbr32 
c010a996:	55                   	push   %ebp
c010a997:	89 e5                	mov    %esp,%ebp
c010a999:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010a99c:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010a9a1:	8b 40 18             	mov    0x18(%eax),%eax
c010a9a4:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010a9a7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a9ab:	75 0a                	jne    c010a9b7 <copy_mm+0x25>
        return 0;
c010a9ad:	b8 00 00 00 00       	mov    $0x0,%eax
c010a9b2:	e9 08 01 00 00       	jmp    c010aabf <copy_mm+0x12d>
    }
    if (clone_flags & CLONE_VM) {
c010a9b7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9ba:	25 00 01 00 00       	and    $0x100,%eax
c010a9bf:	85 c0                	test   %eax,%eax
c010a9c1:	74 08                	je     c010a9cb <copy_mm+0x39>
        mm = oldmm;
c010a9c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a9c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010a9c9:	eb 66                	jmp    c010aa31 <copy_mm+0x9f>
    }

    int ret = -E_NO_MEM;
c010a9cb:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010a9d2:	e8 3d bc ff ff       	call   c0106614 <mm_create>
c010a9d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a9da:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a9de:	0f 84 d7 00 00 00    	je     c010aabb <copy_mm+0x129>
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
c010a9e4:	83 ec 0c             	sub    $0xc,%esp
c010a9e7:	ff 75 f4             	pushl  -0xc(%ebp)
c010a9ea:	e8 d9 fe ff ff       	call   c010a8c8 <setup_pgdir>
c010a9ef:	83 c4 10             	add    $0x10,%esp
c010a9f2:	85 c0                	test   %eax,%eax
c010a9f4:	0f 85 b0 00 00 00    	jne    c010aaaa <copy_mm+0x118>
        goto bad_pgdir_cleanup_mm;
    }

    lock_mm(oldmm);
c010a9fa:	83 ec 0c             	sub    $0xc,%esp
c010a9fd:	ff 75 ec             	pushl  -0x14(%ebp)
c010aa00:	e8 48 f8 ff ff       	call   c010a24d <lock_mm>
c010aa05:	83 c4 10             	add    $0x10,%esp
    {
        ret = dup_mmap(mm, oldmm);
c010aa08:	83 ec 08             	sub    $0x8,%esp
c010aa0b:	ff 75 ec             	pushl  -0x14(%ebp)
c010aa0e:	ff 75 f4             	pushl  -0xc(%ebp)
c010aa11:	e8 ec c0 ff ff       	call   c0106b02 <dup_mmap>
c010aa16:	83 c4 10             	add    $0x10,%esp
c010aa19:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010aa1c:	83 ec 0c             	sub    $0xc,%esp
c010aa1f:	ff 75 ec             	pushl  -0x14(%ebp)
c010aa22:	e8 47 f8 ff ff       	call   c010a26e <unlock_mm>
c010aa27:	83 c4 10             	add    $0x10,%esp

    if (ret != 0) {
c010aa2a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010aa2e:	75 57                	jne    c010aa87 <copy_mm+0xf5>
        goto bad_dup_cleanup_mmap;
    }

good_mm:
c010aa30:	90                   	nop
    mm_count_inc(mm);
c010aa31:	83 ec 0c             	sub    $0xc,%esp
c010aa34:	ff 75 f4             	pushl  -0xc(%ebp)
c010aa37:	e8 dd f7 ff ff       	call   c010a219 <mm_count_inc>
c010aa3c:	83 c4 10             	add    $0x10,%esp
    proc->mm = mm;
c010aa3f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aa42:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010aa45:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010aa48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa4b:	8b 40 0c             	mov    0xc(%eax),%eax
c010aa4e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010aa51:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010aa58:	77 17                	ja     c010aa71 <copy_mm+0xdf>
c010aa5a:	ff 75 e8             	pushl  -0x18(%ebp)
c010aa5d:	68 3c ef 10 c0       	push   $0xc010ef3c
c010aa62:	68 57 01 00 00       	push   $0x157
c010aa67:	68 60 ef 10 c0       	push   $0xc010ef60
c010aa6c:	e8 7d 6d ff ff       	call   c01017ee <__panic>
c010aa71:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aa74:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010aa7a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aa7d:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010aa80:	b8 00 00 00 00       	mov    $0x0,%eax
c010aa85:	eb 38                	jmp    c010aabf <copy_mm+0x12d>
        goto bad_dup_cleanup_mmap;
c010aa87:	90                   	nop
c010aa88:	f3 0f 1e fb          	endbr32 
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010aa8c:	83 ec 0c             	sub    $0xc,%esp
c010aa8f:	ff 75 f4             	pushl  -0xc(%ebp)
c010aa92:	e8 56 c1 ff ff       	call   c0106bed <exit_mmap>
c010aa97:	83 c4 10             	add    $0x10,%esp
    put_pgdir(mm);
c010aa9a:	83 ec 0c             	sub    $0xc,%esp
c010aa9d:	ff 75 f4             	pushl  -0xc(%ebp)
c010aaa0:	e8 c0 fe ff ff       	call   c010a965 <put_pgdir>
c010aaa5:	83 c4 10             	add    $0x10,%esp
c010aaa8:	eb 01                	jmp    c010aaab <copy_mm+0x119>
        goto bad_pgdir_cleanup_mm;
c010aaaa:	90                   	nop
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010aaab:	83 ec 0c             	sub    $0xc,%esp
c010aaae:	ff 75 f4             	pushl  -0xc(%ebp)
c010aab1:	e8 9b be ff ff       	call   c0106951 <mm_destroy>
c010aab6:	83 c4 10             	add    $0x10,%esp
c010aab9:	eb 01                	jmp    c010aabc <copy_mm+0x12a>
        goto bad_mm;
c010aabb:	90                   	nop
bad_mm:
    return ret;
c010aabc:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010aabf:	c9                   	leave  
c010aac0:	c3                   	ret    

c010aac1 <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010aac1:	f3 0f 1e fb          	endbr32 
c010aac5:	55                   	push   %ebp
c010aac6:	89 e5                	mov    %esp,%ebp
c010aac8:	57                   	push   %edi
c010aac9:	56                   	push   %esi
c010aaca:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010aacb:	8b 45 08             	mov    0x8(%ebp),%eax
c010aace:	8b 40 0c             	mov    0xc(%eax),%eax
c010aad1:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010aad6:	89 c2                	mov    %eax,%edx
c010aad8:	8b 45 08             	mov    0x8(%ebp),%eax
c010aadb:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010aade:	8b 45 08             	mov    0x8(%ebp),%eax
c010aae1:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aae4:	8b 55 10             	mov    0x10(%ebp),%edx
c010aae7:	89 d3                	mov    %edx,%ebx
c010aae9:	ba 4c 00 00 00       	mov    $0x4c,%edx
c010aaee:	8b 0b                	mov    (%ebx),%ecx
c010aaf0:	89 08                	mov    %ecx,(%eax)
c010aaf2:	8b 4c 13 fc          	mov    -0x4(%ebx,%edx,1),%ecx
c010aaf6:	89 4c 10 fc          	mov    %ecx,-0x4(%eax,%edx,1)
c010aafa:	8d 78 04             	lea    0x4(%eax),%edi
c010aafd:	83 e7 fc             	and    $0xfffffffc,%edi
c010ab00:	29 f8                	sub    %edi,%eax
c010ab02:	29 c3                	sub    %eax,%ebx
c010ab04:	01 c2                	add    %eax,%edx
c010ab06:	83 e2 fc             	and    $0xfffffffc,%edx
c010ab09:	89 d0                	mov    %edx,%eax
c010ab0b:	c1 e8 02             	shr    $0x2,%eax
c010ab0e:	89 de                	mov    %ebx,%esi
c010ab10:	89 c1                	mov    %eax,%ecx
c010ab12:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
    proc->tf->tf_regs.reg_eax = 0;
c010ab14:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab17:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab1a:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010ab21:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab24:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab27:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ab2a:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010ab2d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab30:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab33:	8b 50 40             	mov    0x40(%eax),%edx
c010ab36:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab39:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab3c:	80 ce 02             	or     $0x2,%dh
c010ab3f:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010ab42:	ba 9e a6 10 c0       	mov    $0xc010a69e,%edx
c010ab47:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab4a:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010ab4d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab50:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab53:	89 c2                	mov    %eax,%edx
c010ab55:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab58:	89 50 20             	mov    %edx,0x20(%eax)
}
c010ab5b:	90                   	nop
c010ab5c:	5b                   	pop    %ebx
c010ab5d:	5e                   	pop    %esi
c010ab5e:	5f                   	pop    %edi
c010ab5f:	5d                   	pop    %ebp
c010ab60:	c3                   	ret    

c010ab61 <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010ab61:	f3 0f 1e fb          	endbr32 
c010ab65:	55                   	push   %ebp
c010ab66:	89 e5                	mov    %esp,%ebp
c010ab68:	83 ec 18             	sub    $0x18,%esp
    int ret = -E_NO_FREE_PROC;
c010ab6b:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010ab72:	a1 40 80 1b c0       	mov    0xc01b8040,%eax
c010ab77:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010ab7c:	0f 8f df 00 00 00    	jg     c010ac61 <do_fork+0x100>
        goto fork_out;
    }
    ret = -E_NO_MEM;
c010ab82:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    //    3. call copy_mm to dup OR share mm according clone_flag
    //    4. call copy_thread to setup tf & context in proc_struct
    //    5. insert proc_struct into hash_list && proc_list
    //    6. call wakeup_proc to make the new child process RUNNABLE
    //    7. set ret vaule using child proc's pid
    if ((proc = alloc_proc()) == NULL) {
c010ab89:	e8 01 f7 ff ff       	call   c010a28f <alloc_proc>
c010ab8e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ab91:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ab95:	0f 84 c9 00 00 00    	je     c010ac64 <do_fork+0x103>
        goto fork_out;
    }

    proc->parent = current;
c010ab9b:	8b 15 28 60 1b c0    	mov    0xc01b6028,%edx
c010aba1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aba4:	89 50 14             	mov    %edx,0x14(%eax)
    assert(current->wait_state == 0);
c010aba7:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010abac:	8b 40 6c             	mov    0x6c(%eax),%eax
c010abaf:	85 c0                	test   %eax,%eax
c010abb1:	74 19                	je     c010abcc <do_fork+0x6b>
c010abb3:	68 74 ef 10 c0       	push   $0xc010ef74
c010abb8:	68 8d ef 10 c0       	push   $0xc010ef8d
c010abbd:	68 9b 01 00 00       	push   $0x19b
c010abc2:	68 60 ef 10 c0       	push   $0xc010ef60
c010abc7:	e8 22 6c ff ff       	call   c01017ee <__panic>

    if (setup_kstack(proc) != 0) {
c010abcc:	83 ec 0c             	sub    $0xc,%esp
c010abcf:	ff 75 f0             	pushl  -0x10(%ebp)
c010abd2:	e8 80 fc ff ff       	call   c010a857 <setup_kstack>
c010abd7:	83 c4 10             	add    $0x10,%esp
c010abda:	85 c0                	test   %eax,%eax
c010abdc:	0f 85 9d 00 00 00    	jne    c010ac7f <do_fork+0x11e>
        goto bad_fork_cleanup_proc;
    }
    if (copy_mm(clone_flags, proc) != 0) {
c010abe2:	83 ec 08             	sub    $0x8,%esp
c010abe5:	ff 75 f0             	pushl  -0x10(%ebp)
c010abe8:	ff 75 08             	pushl  0x8(%ebp)
c010abeb:	e8 a2 fd ff ff       	call   c010a992 <copy_mm>
c010abf0:	83 c4 10             	add    $0x10,%esp
c010abf3:	85 c0                	test   %eax,%eax
c010abf5:	75 73                	jne    c010ac6a <do_fork+0x109>
        goto bad_fork_cleanup_kstack;
    }
    copy_thread(proc, stack, tf);
c010abf7:	83 ec 04             	sub    $0x4,%esp
c010abfa:	ff 75 10             	pushl  0x10(%ebp)
c010abfd:	ff 75 0c             	pushl  0xc(%ebp)
c010ac00:	ff 75 f0             	pushl  -0x10(%ebp)
c010ac03:	e8 b9 fe ff ff       	call   c010aac1 <copy_thread>
c010ac08:	83 c4 10             	add    $0x10,%esp

    bool intr_flag;
    local_intr_save(intr_flag);
c010ac0b:	e8 68 f4 ff ff       	call   c010a078 <__intr_save>
c010ac10:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
        proc->pid = get_pid();
c010ac13:	e8 06 f9 ff ff       	call   c010a51e <get_pid>
c010ac18:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ac1b:	89 42 04             	mov    %eax,0x4(%edx)
        hash_proc(proc);
c010ac1e:	83 ec 0c             	sub    $0xc,%esp
c010ac21:	ff 75 f0             	pushl  -0x10(%ebp)
c010ac24:	e8 96 fa ff ff       	call   c010a6bf <hash_proc>
c010ac29:	83 c4 10             	add    $0x10,%esp
        set_links(proc);
c010ac2c:	83 ec 0c             	sub    $0xc,%esp
c010ac2f:	ff 75 f0             	pushl  -0x10(%ebp)
c010ac32:	e8 b0 f7 ff ff       	call   c010a3e7 <set_links>
c010ac37:	83 c4 10             	add    $0x10,%esp

    }
    local_intr_restore(intr_flag);
c010ac3a:	83 ec 0c             	sub    $0xc,%esp
c010ac3d:	ff 75 ec             	pushl  -0x14(%ebp)
c010ac40:	e8 5d f4 ff ff       	call   c010a0a2 <__intr_restore>
c010ac45:	83 c4 10             	add    $0x10,%esp

    wakeup_proc(proc);
c010ac48:	83 ec 0c             	sub    $0xc,%esp
c010ac4b:	ff 75 f0             	pushl  -0x10(%ebp)
c010ac4e:	e8 63 0f 00 00       	call   c010bbb6 <wakeup_proc>
c010ac53:	83 c4 10             	add    $0x10,%esp

    ret = proc->pid;
c010ac56:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ac59:	8b 40 04             	mov    0x4(%eax),%eax
c010ac5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ac5f:	eb 04                	jmp    c010ac65 <do_fork+0x104>
        goto fork_out;
c010ac61:	90                   	nop
c010ac62:	eb 01                	jmp    c010ac65 <do_fork+0x104>
        goto fork_out;
c010ac64:	90                   	nop
fork_out:
    return ret;
c010ac65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac68:	eb 26                	jmp    c010ac90 <do_fork+0x12f>
        goto bad_fork_cleanup_kstack;
c010ac6a:	90                   	nop
c010ac6b:	f3 0f 1e fb          	endbr32 

bad_fork_cleanup_kstack:
    put_kstack(proc);
c010ac6f:	83 ec 0c             	sub    $0xc,%esp
c010ac72:	ff 75 f0             	pushl  -0x10(%ebp)
c010ac75:	e8 21 fc ff ff       	call   c010a89b <put_kstack>
c010ac7a:	83 c4 10             	add    $0x10,%esp
c010ac7d:	eb 01                	jmp    c010ac80 <do_fork+0x11f>
        goto bad_fork_cleanup_proc;
c010ac7f:	90                   	nop
bad_fork_cleanup_proc:
    kfree(proc);
c010ac80:	83 ec 0c             	sub    $0xc,%esp
c010ac83:	ff 75 f0             	pushl  -0x10(%ebp)
c010ac86:	e8 d3 db ff ff       	call   c010885e <kfree>
c010ac8b:	83 c4 10             	add    $0x10,%esp
    goto fork_out;
c010ac8e:	eb d5                	jmp    c010ac65 <do_fork+0x104>
}
c010ac90:	c9                   	leave  
c010ac91:	c3                   	ret    

c010ac92 <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010ac92:	f3 0f 1e fb          	endbr32 
c010ac96:	55                   	push   %ebp
c010ac97:	89 e5                	mov    %esp,%ebp
c010ac99:	83 ec 18             	sub    $0x18,%esp
    if (current == idleproc) {
c010ac9c:	8b 15 28 60 1b c0    	mov    0xc01b6028,%edx
c010aca2:	a1 20 60 1b c0       	mov    0xc01b6020,%eax
c010aca7:	39 c2                	cmp    %eax,%edx
c010aca9:	75 17                	jne    c010acc2 <do_exit+0x30>
        panic("idleproc exit.\n");
c010acab:	83 ec 04             	sub    $0x4,%esp
c010acae:	68 a2 ef 10 c0       	push   $0xc010efa2
c010acb3:	68 c3 01 00 00       	push   $0x1c3
c010acb8:	68 60 ef 10 c0       	push   $0xc010ef60
c010acbd:	e8 2c 6b ff ff       	call   c01017ee <__panic>
    }
    if (current == initproc) {
c010acc2:	8b 15 28 60 1b c0    	mov    0xc01b6028,%edx
c010acc8:	a1 24 60 1b c0       	mov    0xc01b6024,%eax
c010accd:	39 c2                	cmp    %eax,%edx
c010accf:	75 17                	jne    c010ace8 <do_exit+0x56>
        panic("initproc exit.\n");
c010acd1:	83 ec 04             	sub    $0x4,%esp
c010acd4:	68 b2 ef 10 c0       	push   $0xc010efb2
c010acd9:	68 c6 01 00 00       	push   $0x1c6
c010acde:	68 60 ef 10 c0       	push   $0xc010ef60
c010ace3:	e8 06 6b ff ff       	call   c01017ee <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010ace8:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010aced:	8b 40 18             	mov    0x18(%eax),%eax
c010acf0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010acf3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010acf7:	74 57                	je     c010ad50 <do_exit+0xbe>
        lcr3(boot_cr3);
c010acf9:	a1 5c 80 1b c0       	mov    0xc01b805c,%eax
c010acfe:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010ad01:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ad04:	0f 22 d8             	mov    %eax,%cr3
}
c010ad07:	90                   	nop
        if (mm_count_dec(mm) == 0) {
c010ad08:	83 ec 0c             	sub    $0xc,%esp
c010ad0b:	ff 75 f4             	pushl  -0xc(%ebp)
c010ad0e:	e8 20 f5 ff ff       	call   c010a233 <mm_count_dec>
c010ad13:	83 c4 10             	add    $0x10,%esp
c010ad16:	85 c0                	test   %eax,%eax
c010ad18:	75 2a                	jne    c010ad44 <do_exit+0xb2>
            exit_mmap(mm);
c010ad1a:	83 ec 0c             	sub    $0xc,%esp
c010ad1d:	ff 75 f4             	pushl  -0xc(%ebp)
c010ad20:	e8 c8 be ff ff       	call   c0106bed <exit_mmap>
c010ad25:	83 c4 10             	add    $0x10,%esp
            put_pgdir(mm);
c010ad28:	83 ec 0c             	sub    $0xc,%esp
c010ad2b:	ff 75 f4             	pushl  -0xc(%ebp)
c010ad2e:	e8 32 fc ff ff       	call   c010a965 <put_pgdir>
c010ad33:	83 c4 10             	add    $0x10,%esp
            mm_destroy(mm);
c010ad36:	83 ec 0c             	sub    $0xc,%esp
c010ad39:	ff 75 f4             	pushl  -0xc(%ebp)
c010ad3c:	e8 10 bc ff ff       	call   c0106951 <mm_destroy>
c010ad41:	83 c4 10             	add    $0x10,%esp
        }
        current->mm = NULL;
c010ad44:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010ad49:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    current->state = PROC_ZOMBIE;
c010ad50:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010ad55:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010ad5b:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010ad60:	8b 55 08             	mov    0x8(%ebp),%edx
c010ad63:	89 50 68             	mov    %edx,0x68(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010ad66:	e8 0d f3 ff ff       	call   c010a078 <__intr_save>
c010ad6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010ad6e:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010ad73:	8b 40 14             	mov    0x14(%eax),%eax
c010ad76:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010ad79:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad7c:	8b 40 6c             	mov    0x6c(%eax),%eax
c010ad7f:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010ad84:	0f 85 9d 00 00 00    	jne    c010ae27 <do_exit+0x195>
            wakeup_proc(proc);
c010ad8a:	83 ec 0c             	sub    $0xc,%esp
c010ad8d:	ff 75 ec             	pushl  -0x14(%ebp)
c010ad90:	e8 21 0e 00 00       	call   c010bbb6 <wakeup_proc>
c010ad95:	83 c4 10             	add    $0x10,%esp
        }
        while (current->cptr != NULL) {
c010ad98:	e9 8a 00 00 00       	jmp    c010ae27 <do_exit+0x195>
            proc = current->cptr;
c010ad9d:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010ada2:	8b 40 70             	mov    0x70(%eax),%eax
c010ada5:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010ada8:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010adad:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010adb0:	8b 52 78             	mov    0x78(%edx),%edx
c010adb3:	89 50 70             	mov    %edx,0x70(%eax)
    
            proc->yptr = NULL;
c010adb6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010adb9:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
            if ((proc->optr = initproc->cptr) != NULL) {
c010adc0:	a1 24 60 1b c0       	mov    0xc01b6024,%eax
c010adc5:	8b 50 70             	mov    0x70(%eax),%edx
c010adc8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010adcb:	89 50 78             	mov    %edx,0x78(%eax)
c010adce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010add1:	8b 40 78             	mov    0x78(%eax),%eax
c010add4:	85 c0                	test   %eax,%eax
c010add6:	74 0e                	je     c010ade6 <do_exit+0x154>
                initproc->cptr->yptr = proc;
c010add8:	a1 24 60 1b c0       	mov    0xc01b6024,%eax
c010addd:	8b 40 70             	mov    0x70(%eax),%eax
c010ade0:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ade3:	89 50 74             	mov    %edx,0x74(%eax)
            }
            proc->parent = initproc;
c010ade6:	8b 15 24 60 1b c0    	mov    0xc01b6024,%edx
c010adec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010adef:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010adf2:	a1 24 60 1b c0       	mov    0xc01b6024,%eax
c010adf7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010adfa:	89 50 70             	mov    %edx,0x70(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010adfd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae00:	8b 00                	mov    (%eax),%eax
c010ae02:	83 f8 03             	cmp    $0x3,%eax
c010ae05:	75 20                	jne    c010ae27 <do_exit+0x195>
                if (initproc->wait_state == WT_CHILD) {
c010ae07:	a1 24 60 1b c0       	mov    0xc01b6024,%eax
c010ae0c:	8b 40 6c             	mov    0x6c(%eax),%eax
c010ae0f:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010ae14:	75 11                	jne    c010ae27 <do_exit+0x195>
                    wakeup_proc(initproc);
c010ae16:	a1 24 60 1b c0       	mov    0xc01b6024,%eax
c010ae1b:	83 ec 0c             	sub    $0xc,%esp
c010ae1e:	50                   	push   %eax
c010ae1f:	e8 92 0d 00 00       	call   c010bbb6 <wakeup_proc>
c010ae24:	83 c4 10             	add    $0x10,%esp
        while (current->cptr != NULL) {
c010ae27:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010ae2c:	8b 40 70             	mov    0x70(%eax),%eax
c010ae2f:	85 c0                	test   %eax,%eax
c010ae31:	0f 85 66 ff ff ff    	jne    c010ad9d <do_exit+0x10b>
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010ae37:	83 ec 0c             	sub    $0xc,%esp
c010ae3a:	ff 75 f0             	pushl  -0x10(%ebp)
c010ae3d:	e8 60 f2 ff ff       	call   c010a0a2 <__intr_restore>
c010ae42:	83 c4 10             	add    $0x10,%esp
    
    schedule();
c010ae45:	e8 e5 0d 00 00       	call   c010bc2f <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010ae4a:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010ae4f:	8b 40 04             	mov    0x4(%eax),%eax
c010ae52:	50                   	push   %eax
c010ae53:	68 c4 ef 10 c0       	push   $0xc010efc4
c010ae58:	68 f2 01 00 00       	push   $0x1f2
c010ae5d:	68 60 ef 10 c0       	push   $0xc010ef60
c010ae62:	e8 87 69 ff ff       	call   c01017ee <__panic>

c010ae67 <load_icode>:
/* load_icode - load the content of binary program(ELF format) as the new content of current process
 * @binary:  the memory addr of the content of binary program
 * @size:  the size of the content of binary program
 */
static int
load_icode(unsigned char *binary, size_t size) {
c010ae67:	f3 0f 1e fb          	endbr32 
c010ae6b:	55                   	push   %ebp
c010ae6c:	89 e5                	mov    %esp,%ebp
c010ae6e:	83 ec 58             	sub    $0x58,%esp
    if (current->mm != NULL) {
c010ae71:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010ae76:	8b 40 18             	mov    0x18(%eax),%eax
c010ae79:	85 c0                	test   %eax,%eax
c010ae7b:	74 17                	je     c010ae94 <load_icode+0x2d>
        panic("load_icode: current->mm must be empty.\n");
c010ae7d:	83 ec 04             	sub    $0x4,%esp
c010ae80:	68 e4 ef 10 c0       	push   $0xc010efe4
c010ae85:	68 fc 01 00 00       	push   $0x1fc
c010ae8a:	68 60 ef 10 c0       	push   $0xc010ef60
c010ae8f:	e8 5a 69 ff ff       	call   c01017ee <__panic>
    }

    int ret = -E_NO_MEM;
c010ae94:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
c010ae9b:	e8 74 b7 ff ff       	call   c0106614 <mm_create>
c010aea0:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010aea3:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010aea7:	0f 84 8b 05 00 00    	je     c010b438 <load_icode+0x5d1>
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
c010aead:	83 ec 0c             	sub    $0xc,%esp
c010aeb0:	ff 75 d0             	pushl  -0x30(%ebp)
c010aeb3:	e8 10 fa ff ff       	call   c010a8c8 <setup_pgdir>
c010aeb8:	83 c4 10             	add    $0x10,%esp
c010aebb:	85 c0                	test   %eax,%eax
c010aebd:	0f 85 64 05 00 00    	jne    c010b427 <load_icode+0x5c0>
        goto bad_pgdir_cleanup_mm;
    }
    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
    struct Page *page;
    //(3.1) get the file header of the bianry program (ELF format)
    struct elfhdr *elf = (struct elfhdr *)binary;
c010aec3:	8b 45 08             	mov    0x8(%ebp),%eax
c010aec6:	89 45 cc             	mov    %eax,-0x34(%ebp)
    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
c010aec9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010aecc:	8b 50 1c             	mov    0x1c(%eax),%edx
c010aecf:	8b 45 08             	mov    0x8(%ebp),%eax
c010aed2:	01 d0                	add    %edx,%eax
c010aed4:	89 45 ec             	mov    %eax,-0x14(%ebp)
    //(3.3) This program is valid?
    if (elf->e_magic != ELF_MAGIC) {
c010aed7:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010aeda:	8b 00                	mov    (%eax),%eax
c010aedc:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010aee1:	74 0c                	je     c010aeef <load_icode+0x88>
        ret = -E_INVAL_ELF;
c010aee3:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010aeea:	e9 28 05 00 00       	jmp    c010b417 <load_icode+0x5b0>
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
c010aeef:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010aef2:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010aef6:	0f b7 c0             	movzwl %ax,%eax
c010aef9:	c1 e0 05             	shl    $0x5,%eax
c010aefc:	89 c2                	mov    %eax,%edx
c010aefe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af01:	01 d0                	add    %edx,%eax
c010af03:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; ph < ph_end; ph ++) {
c010af06:	e9 da 02 00 00       	jmp    c010b1e5 <load_icode+0x37e>
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
c010af0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af0e:	8b 00                	mov    (%eax),%eax
c010af10:	83 f8 01             	cmp    $0x1,%eax
c010af13:	0f 85 c1 02 00 00    	jne    c010b1da <load_icode+0x373>
            continue ;
        }
        if (ph->p_filesz > ph->p_memsz) {
c010af19:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af1c:	8b 50 10             	mov    0x10(%eax),%edx
c010af1f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af22:	8b 40 14             	mov    0x14(%eax),%eax
c010af25:	39 c2                	cmp    %eax,%edx
c010af27:	76 0c                	jbe    c010af35 <load_icode+0xce>
            ret = -E_INVAL_ELF;
c010af29:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010af30:	e9 d4 04 00 00       	jmp    c010b409 <load_icode+0x5a2>
        }
        if (ph->p_filesz == 0) {
c010af35:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af38:	8b 40 10             	mov    0x10(%eax),%eax
c010af3b:	85 c0                	test   %eax,%eax
c010af3d:	0f 84 9a 02 00 00    	je     c010b1dd <load_icode+0x376>
            continue ;
        }
    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
        vm_flags = 0, perm = PTE_U;
c010af43:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010af4a:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010af51:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af54:	8b 40 18             	mov    0x18(%eax),%eax
c010af57:	83 e0 01             	and    $0x1,%eax
c010af5a:	85 c0                	test   %eax,%eax
c010af5c:	74 04                	je     c010af62 <load_icode+0xfb>
c010af5e:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010af62:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af65:	8b 40 18             	mov    0x18(%eax),%eax
c010af68:	83 e0 02             	and    $0x2,%eax
c010af6b:	85 c0                	test   %eax,%eax
c010af6d:	74 04                	je     c010af73 <load_icode+0x10c>
c010af6f:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010af73:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af76:	8b 40 18             	mov    0x18(%eax),%eax
c010af79:	83 e0 04             	and    $0x4,%eax
c010af7c:	85 c0                	test   %eax,%eax
c010af7e:	74 04                	je     c010af84 <load_icode+0x11d>
c010af80:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010af84:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010af87:	83 e0 02             	and    $0x2,%eax
c010af8a:	85 c0                	test   %eax,%eax
c010af8c:	74 04                	je     c010af92 <load_icode+0x12b>
c010af8e:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010af92:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af95:	8b 50 14             	mov    0x14(%eax),%edx
c010af98:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af9b:	8b 40 08             	mov    0x8(%eax),%eax
c010af9e:	83 ec 0c             	sub    $0xc,%esp
c010afa1:	6a 00                	push   $0x0
c010afa3:	ff 75 e8             	pushl  -0x18(%ebp)
c010afa6:	52                   	push   %edx
c010afa7:	50                   	push   %eax
c010afa8:	ff 75 d0             	pushl  -0x30(%ebp)
c010afab:	e8 46 ba ff ff       	call   c01069f6 <mm_map>
c010afb0:	83 c4 20             	add    $0x20,%esp
c010afb3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010afb6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010afba:	0f 85 3f 04 00 00    	jne    c010b3ff <load_icode+0x598>
            goto bad_cleanup_mmap;
        }
        unsigned char *from = binary + ph->p_offset;
c010afc0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010afc3:	8b 50 04             	mov    0x4(%eax),%edx
c010afc6:	8b 45 08             	mov    0x8(%ebp),%eax
c010afc9:	01 d0                	add    %edx,%eax
c010afcb:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010afce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010afd1:	8b 40 08             	mov    0x8(%eax),%eax
c010afd4:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010afd7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010afda:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010afdd:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010afe0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010afe5:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010afe8:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
c010afef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aff2:	8b 50 08             	mov    0x8(%eax),%edx
c010aff5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aff8:	8b 40 10             	mov    0x10(%eax),%eax
c010affb:	01 d0                	add    %edx,%eax
c010affd:	89 45 b4             	mov    %eax,-0x4c(%ebp)
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010b000:	e9 82 00 00 00       	jmp    c010b087 <load_icode+0x220>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010b005:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b008:	8b 40 0c             	mov    0xc(%eax),%eax
c010b00b:	83 ec 04             	sub    $0x4,%esp
c010b00e:	ff 75 e4             	pushl  -0x1c(%ebp)
c010b011:	ff 75 d4             	pushl  -0x2c(%ebp)
c010b014:	50                   	push   %eax
c010b015:	e8 a1 a9 ff ff       	call   c01059bb <pgdir_alloc_page>
c010b01a:	83 c4 10             	add    $0x10,%esp
c010b01d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b020:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b024:	0f 84 d8 03 00 00    	je     c010b402 <load_icode+0x59b>
                goto bad_cleanup_mmap;
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010b02a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b02d:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010b030:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010b033:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b038:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010b03b:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010b03e:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010b045:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b048:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b04b:	73 09                	jae    c010b056 <load_icode+0x1ef>
                size -= la - end;
c010b04d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b050:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010b053:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memcpy(page2kva(page) + off, from, size);
c010b056:	83 ec 0c             	sub    $0xc,%esp
c010b059:	ff 75 f0             	pushl  -0x10(%ebp)
c010b05c:	e8 34 f1 ff ff       	call   c010a195 <page2kva>
c010b061:	83 c4 10             	add    $0x10,%esp
c010b064:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010b067:	01 d0                	add    %edx,%eax
c010b069:	83 ec 04             	sub    $0x4,%esp
c010b06c:	ff 75 dc             	pushl  -0x24(%ebp)
c010b06f:	ff 75 e0             	pushl  -0x20(%ebp)
c010b072:	50                   	push   %eax
c010b073:	e8 d4 12 00 00       	call   c010c34c <memcpy>
c010b078:	83 c4 10             	add    $0x10,%esp
            start += size, from += size;
c010b07b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b07e:	01 45 d8             	add    %eax,-0x28(%ebp)
c010b081:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b084:	01 45 e0             	add    %eax,-0x20(%ebp)
        while (start < end) {
c010b087:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b08a:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010b08d:	0f 82 72 ff ff ff    	jb     c010b005 <load_icode+0x19e>
        }

      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
c010b093:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b096:	8b 50 08             	mov    0x8(%eax),%edx
c010b099:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b09c:	8b 40 14             	mov    0x14(%eax),%eax
c010b09f:	01 d0                	add    %edx,%eax
c010b0a1:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        if (start < la) {
c010b0a4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b0a7:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b0aa:	0f 83 1c 01 00 00    	jae    c010b1cc <load_icode+0x365>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010b0b0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b0b3:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010b0b6:	0f 84 24 01 00 00    	je     c010b1e0 <load_icode+0x379>
                continue ;
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010b0bc:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b0bf:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010b0c2:	05 00 10 00 00       	add    $0x1000,%eax
c010b0c7:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010b0ca:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b0cf:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010b0d2:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010b0d5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b0d8:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b0db:	73 09                	jae    c010b0e6 <load_icode+0x27f>
                size -= la - end;
c010b0dd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b0e0:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010b0e3:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010b0e6:	83 ec 0c             	sub    $0xc,%esp
c010b0e9:	ff 75 f0             	pushl  -0x10(%ebp)
c010b0ec:	e8 a4 f0 ff ff       	call   c010a195 <page2kva>
c010b0f1:	83 c4 10             	add    $0x10,%esp
c010b0f4:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010b0f7:	01 d0                	add    %edx,%eax
c010b0f9:	83 ec 04             	sub    $0x4,%esp
c010b0fc:	ff 75 dc             	pushl  -0x24(%ebp)
c010b0ff:	6a 00                	push   $0x0
c010b101:	50                   	push   %eax
c010b102:	e8 5b 11 00 00       	call   c010c262 <memset>
c010b107:	83 c4 10             	add    $0x10,%esp
            start += size;
c010b10a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b10d:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010b110:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b113:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b116:	73 0c                	jae    c010b124 <load_icode+0x2bd>
c010b118:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b11b:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010b11e:	0f 84 a8 00 00 00    	je     c010b1cc <load_icode+0x365>
c010b124:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b127:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b12a:	72 0c                	jb     c010b138 <load_icode+0x2d1>
c010b12c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b12f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b132:	0f 84 94 00 00 00    	je     c010b1cc <load_icode+0x365>
c010b138:	68 0c f0 10 c0       	push   $0xc010f00c
c010b13d:	68 8d ef 10 c0       	push   $0xc010ef8d
c010b142:	68 4e 02 00 00       	push   $0x24e
c010b147:	68 60 ef 10 c0       	push   $0xc010ef60
c010b14c:	e8 9d 66 ff ff       	call   c01017ee <__panic>
        }
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010b151:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b154:	8b 40 0c             	mov    0xc(%eax),%eax
c010b157:	83 ec 04             	sub    $0x4,%esp
c010b15a:	ff 75 e4             	pushl  -0x1c(%ebp)
c010b15d:	ff 75 d4             	pushl  -0x2c(%ebp)
c010b160:	50                   	push   %eax
c010b161:	e8 55 a8 ff ff       	call   c01059bb <pgdir_alloc_page>
c010b166:	83 c4 10             	add    $0x10,%esp
c010b169:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b16c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b170:	0f 84 8f 02 00 00    	je     c010b405 <load_icode+0x59e>
                goto bad_cleanup_mmap;
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010b176:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b179:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010b17c:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010b17f:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b184:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010b187:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010b18a:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010b191:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b194:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b197:	73 09                	jae    c010b1a2 <load_icode+0x33b>
                size -= la - end;
c010b199:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b19c:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010b19f:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010b1a2:	83 ec 0c             	sub    $0xc,%esp
c010b1a5:	ff 75 f0             	pushl  -0x10(%ebp)
c010b1a8:	e8 e8 ef ff ff       	call   c010a195 <page2kva>
c010b1ad:	83 c4 10             	add    $0x10,%esp
c010b1b0:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010b1b3:	01 d0                	add    %edx,%eax
c010b1b5:	83 ec 04             	sub    $0x4,%esp
c010b1b8:	ff 75 dc             	pushl  -0x24(%ebp)
c010b1bb:	6a 00                	push   $0x0
c010b1bd:	50                   	push   %eax
c010b1be:	e8 9f 10 00 00       	call   c010c262 <memset>
c010b1c3:	83 c4 10             	add    $0x10,%esp
            start += size;
c010b1c6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b1c9:	01 45 d8             	add    %eax,-0x28(%ebp)
        while (start < end) {
c010b1cc:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b1cf:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010b1d2:	0f 82 79 ff ff ff    	jb     c010b151 <load_icode+0x2ea>
c010b1d8:	eb 07                	jmp    c010b1e1 <load_icode+0x37a>
            continue ;
c010b1da:	90                   	nop
c010b1db:	eb 04                	jmp    c010b1e1 <load_icode+0x37a>
            continue ;
c010b1dd:	90                   	nop
c010b1de:	eb 01                	jmp    c010b1e1 <load_icode+0x37a>
                continue ;
c010b1e0:	90                   	nop
    for (; ph < ph_end; ph ++) {
c010b1e1:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c010b1e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1e8:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010b1eb:	0f 82 1a fd ff ff    	jb     c010af0b <load_icode+0xa4>
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010b1f1:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010b1f8:	83 ec 0c             	sub    $0xc,%esp
c010b1fb:	6a 00                	push   $0x0
c010b1fd:	ff 75 e8             	pushl  -0x18(%ebp)
c010b200:	68 00 00 10 00       	push   $0x100000
c010b205:	68 00 00 f0 af       	push   $0xaff00000
c010b20a:	ff 75 d0             	pushl  -0x30(%ebp)
c010b20d:	e8 e4 b7 ff ff       	call   c01069f6 <mm_map>
c010b212:	83 c4 20             	add    $0x20,%esp
c010b215:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b218:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b21c:	0f 85 e6 01 00 00    	jne    c010b408 <load_icode+0x5a1>
        goto bad_cleanup_mmap;
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010b222:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b225:	8b 40 0c             	mov    0xc(%eax),%eax
c010b228:	83 ec 04             	sub    $0x4,%esp
c010b22b:	6a 07                	push   $0x7
c010b22d:	68 00 f0 ff af       	push   $0xaffff000
c010b232:	50                   	push   %eax
c010b233:	e8 83 a7 ff ff       	call   c01059bb <pgdir_alloc_page>
c010b238:	83 c4 10             	add    $0x10,%esp
c010b23b:	85 c0                	test   %eax,%eax
c010b23d:	75 19                	jne    c010b258 <load_icode+0x3f1>
c010b23f:	68 48 f0 10 c0       	push   $0xc010f048
c010b244:	68 8d ef 10 c0       	push   $0xc010ef8d
c010b249:	68 61 02 00 00       	push   $0x261
c010b24e:	68 60 ef 10 c0       	push   $0xc010ef60
c010b253:	e8 96 65 ff ff       	call   c01017ee <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010b258:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b25b:	8b 40 0c             	mov    0xc(%eax),%eax
c010b25e:	83 ec 04             	sub    $0x4,%esp
c010b261:	6a 07                	push   $0x7
c010b263:	68 00 e0 ff af       	push   $0xafffe000
c010b268:	50                   	push   %eax
c010b269:	e8 4d a7 ff ff       	call   c01059bb <pgdir_alloc_page>
c010b26e:	83 c4 10             	add    $0x10,%esp
c010b271:	85 c0                	test   %eax,%eax
c010b273:	75 19                	jne    c010b28e <load_icode+0x427>
c010b275:	68 8c f0 10 c0       	push   $0xc010f08c
c010b27a:	68 8d ef 10 c0       	push   $0xc010ef8d
c010b27f:	68 62 02 00 00       	push   $0x262
c010b284:	68 60 ef 10 c0       	push   $0xc010ef60
c010b289:	e8 60 65 ff ff       	call   c01017ee <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010b28e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b291:	8b 40 0c             	mov    0xc(%eax),%eax
c010b294:	83 ec 04             	sub    $0x4,%esp
c010b297:	6a 07                	push   $0x7
c010b299:	68 00 d0 ff af       	push   $0xafffd000
c010b29e:	50                   	push   %eax
c010b29f:	e8 17 a7 ff ff       	call   c01059bb <pgdir_alloc_page>
c010b2a4:	83 c4 10             	add    $0x10,%esp
c010b2a7:	85 c0                	test   %eax,%eax
c010b2a9:	75 19                	jne    c010b2c4 <load_icode+0x45d>
c010b2ab:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010b2b0:	68 8d ef 10 c0       	push   $0xc010ef8d
c010b2b5:	68 63 02 00 00       	push   $0x263
c010b2ba:	68 60 ef 10 c0       	push   $0xc010ef60
c010b2bf:	e8 2a 65 ff ff       	call   c01017ee <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010b2c4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b2c7:	8b 40 0c             	mov    0xc(%eax),%eax
c010b2ca:	83 ec 04             	sub    $0x4,%esp
c010b2cd:	6a 07                	push   $0x7
c010b2cf:	68 00 c0 ff af       	push   $0xafffc000
c010b2d4:	50                   	push   %eax
c010b2d5:	e8 e1 a6 ff ff       	call   c01059bb <pgdir_alloc_page>
c010b2da:	83 c4 10             	add    $0x10,%esp
c010b2dd:	85 c0                	test   %eax,%eax
c010b2df:	75 19                	jne    c010b2fa <load_icode+0x493>
c010b2e1:	68 14 f1 10 c0       	push   $0xc010f114
c010b2e6:	68 8d ef 10 c0       	push   $0xc010ef8d
c010b2eb:	68 64 02 00 00       	push   $0x264
c010b2f0:	68 60 ef 10 c0       	push   $0xc010ef60
c010b2f5:	e8 f4 64 ff ff       	call   c01017ee <__panic>
    
    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
    mm_count_inc(mm);
c010b2fa:	83 ec 0c             	sub    $0xc,%esp
c010b2fd:	ff 75 d0             	pushl  -0x30(%ebp)
c010b300:	e8 14 ef ff ff       	call   c010a219 <mm_count_inc>
c010b305:	83 c4 10             	add    $0x10,%esp
    current->mm = mm;
c010b308:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010b30d:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b310:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010b313:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b316:	8b 40 0c             	mov    0xc(%eax),%eax
c010b319:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010b31c:	81 7d c4 ff ff ff bf 	cmpl   $0xbfffffff,-0x3c(%ebp)
c010b323:	77 17                	ja     c010b33c <load_icode+0x4d5>
c010b325:	ff 75 c4             	pushl  -0x3c(%ebp)
c010b328:	68 3c ef 10 c0       	push   $0xc010ef3c
c010b32d:	68 69 02 00 00       	push   $0x269
c010b332:	68 60 ef 10 c0       	push   $0xc010ef60
c010b337:	e8 b2 64 ff ff       	call   c01017ee <__panic>
c010b33c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010b33f:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010b345:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010b34a:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010b34d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b350:	8b 40 0c             	mov    0xc(%eax),%eax
c010b353:	89 45 c0             	mov    %eax,-0x40(%ebp)
c010b356:	81 7d c0 ff ff ff bf 	cmpl   $0xbfffffff,-0x40(%ebp)
c010b35d:	77 17                	ja     c010b376 <load_icode+0x50f>
c010b35f:	ff 75 c0             	pushl  -0x40(%ebp)
c010b362:	68 3c ef 10 c0       	push   $0xc010ef3c
c010b367:	68 6a 02 00 00       	push   $0x26a
c010b36c:	68 60 ef 10 c0       	push   $0xc010ef60
c010b371:	e8 78 64 ff ff       	call   c01017ee <__panic>
c010b376:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b379:	05 00 00 00 40       	add    $0x40000000,%eax
c010b37e:	89 45 ac             	mov    %eax,-0x54(%ebp)
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010b381:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010b384:	0f 22 d8             	mov    %eax,%cr3
}
c010b387:	90                   	nop

    //(6) setup trapframe for user environment
    struct trapframe *tf = current->tf;
c010b388:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010b38d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b390:	89 45 bc             	mov    %eax,-0x44(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010b393:	83 ec 04             	sub    $0x4,%esp
c010b396:	6a 4c                	push   $0x4c
c010b398:	6a 00                	push   $0x0
c010b39a:	ff 75 bc             	pushl  -0x44(%ebp)
c010b39d:	e8 c0 0e 00 00       	call   c010c262 <memset>
c010b3a2:	83 c4 10             	add    $0x10,%esp
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
    tf->tf_cs = USER_CS;
c010b3a5:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010b3a8:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
c010b3ae:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010b3b1:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
c010b3b7:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010b3ba:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c010b3be:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010b3c1:	66 89 50 28          	mov    %dx,0x28(%eax)
c010b3c5:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010b3c8:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c010b3cc:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010b3cf:	66 89 50 2c          	mov    %dx,0x2c(%eax)
    tf->tf_esp = USTACKTOP;
c010b3d3:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010b3d6:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010b3dd:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b3e0:	8b 50 18             	mov    0x18(%eax),%edx
c010b3e3:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010b3e6:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags = FL_IF;
c010b3e9:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010b3ec:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
    ret = 0;
c010b3f3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c010b3fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b3fd:	eb 40                	jmp    c010b43f <load_icode+0x5d8>
            goto bad_cleanup_mmap;
c010b3ff:	90                   	nop
c010b400:	eb 07                	jmp    c010b409 <load_icode+0x5a2>
                goto bad_cleanup_mmap;
c010b402:	90                   	nop
c010b403:	eb 04                	jmp    c010b409 <load_icode+0x5a2>
                goto bad_cleanup_mmap;
c010b405:	90                   	nop
c010b406:	eb 01                	jmp    c010b409 <load_icode+0x5a2>
        goto bad_cleanup_mmap;
c010b408:	90                   	nop
bad_cleanup_mmap:
    exit_mmap(mm);
c010b409:	83 ec 0c             	sub    $0xc,%esp
c010b40c:	ff 75 d0             	pushl  -0x30(%ebp)
c010b40f:	e8 d9 b7 ff ff       	call   c0106bed <exit_mmap>
c010b414:	83 c4 10             	add    $0x10,%esp
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010b417:	83 ec 0c             	sub    $0xc,%esp
c010b41a:	ff 75 d0             	pushl  -0x30(%ebp)
c010b41d:	e8 43 f5 ff ff       	call   c010a965 <put_pgdir>
c010b422:	83 c4 10             	add    $0x10,%esp
c010b425:	eb 01                	jmp    c010b428 <load_icode+0x5c1>
        goto bad_pgdir_cleanup_mm;
c010b427:	90                   	nop
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010b428:	83 ec 0c             	sub    $0xc,%esp
c010b42b:	ff 75 d0             	pushl  -0x30(%ebp)
c010b42e:	e8 1e b5 ff ff       	call   c0106951 <mm_destroy>
c010b433:	83 c4 10             	add    $0x10,%esp
bad_mm:
    goto out;
c010b436:	eb c2                	jmp    c010b3fa <load_icode+0x593>
        goto bad_mm;
c010b438:	90                   	nop
c010b439:	f3 0f 1e fb          	endbr32 
    goto out;
c010b43d:	eb bb                	jmp    c010b3fa <load_icode+0x593>
}
c010b43f:	c9                   	leave  
c010b440:	c3                   	ret    

c010b441 <do_execve>:

// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
c010b441:	f3 0f 1e fb          	endbr32 
c010b445:	55                   	push   %ebp
c010b446:	89 e5                	mov    %esp,%ebp
c010b448:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010b44b:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010b450:	8b 40 18             	mov    0x18(%eax),%eax
c010b453:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
c010b456:	8b 45 08             	mov    0x8(%ebp),%eax
c010b459:	6a 00                	push   $0x0
c010b45b:	ff 75 0c             	pushl  0xc(%ebp)
c010b45e:	50                   	push   %eax
c010b45f:	ff 75 f4             	pushl  -0xc(%ebp)
c010b462:	e8 66 c1 ff ff       	call   c01075cd <user_mem_check>
c010b467:	83 c4 10             	add    $0x10,%esp
c010b46a:	85 c0                	test   %eax,%eax
c010b46c:	75 0a                	jne    c010b478 <do_execve+0x37>
        return -E_INVAL;
c010b46e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b473:	e9 f2 00 00 00       	jmp    c010b56a <do_execve+0x129>
    }
    if (len > PROC_NAME_LEN) {
c010b478:	83 7d 0c 0f          	cmpl   $0xf,0xc(%ebp)
c010b47c:	76 07                	jbe    c010b485 <do_execve+0x44>
        len = PROC_NAME_LEN;
c010b47e:	c7 45 0c 0f 00 00 00 	movl   $0xf,0xc(%ebp)
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010b485:	83 ec 04             	sub    $0x4,%esp
c010b488:	6a 10                	push   $0x10
c010b48a:	6a 00                	push   $0x0
c010b48c:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010b48f:	50                   	push   %eax
c010b490:	e8 cd 0d 00 00       	call   c010c262 <memset>
c010b495:	83 c4 10             	add    $0x10,%esp
    memcpy(local_name, name, len);
c010b498:	83 ec 04             	sub    $0x4,%esp
c010b49b:	ff 75 0c             	pushl  0xc(%ebp)
c010b49e:	ff 75 08             	pushl  0x8(%ebp)
c010b4a1:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010b4a4:	50                   	push   %eax
c010b4a5:	e8 a2 0e 00 00       	call   c010c34c <memcpy>
c010b4aa:	83 c4 10             	add    $0x10,%esp

    if (mm != NULL) {
c010b4ad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b4b1:	74 57                	je     c010b50a <do_execve+0xc9>
        lcr3(boot_cr3);
c010b4b3:	a1 5c 80 1b c0       	mov    0xc01b805c,%eax
c010b4b8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010b4bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b4be:	0f 22 d8             	mov    %eax,%cr3
}
c010b4c1:	90                   	nop
        if (mm_count_dec(mm) == 0) {
c010b4c2:	83 ec 0c             	sub    $0xc,%esp
c010b4c5:	ff 75 f4             	pushl  -0xc(%ebp)
c010b4c8:	e8 66 ed ff ff       	call   c010a233 <mm_count_dec>
c010b4cd:	83 c4 10             	add    $0x10,%esp
c010b4d0:	85 c0                	test   %eax,%eax
c010b4d2:	75 2a                	jne    c010b4fe <do_execve+0xbd>
            exit_mmap(mm);
c010b4d4:	83 ec 0c             	sub    $0xc,%esp
c010b4d7:	ff 75 f4             	pushl  -0xc(%ebp)
c010b4da:	e8 0e b7 ff ff       	call   c0106bed <exit_mmap>
c010b4df:	83 c4 10             	add    $0x10,%esp
            put_pgdir(mm);
c010b4e2:	83 ec 0c             	sub    $0xc,%esp
c010b4e5:	ff 75 f4             	pushl  -0xc(%ebp)
c010b4e8:	e8 78 f4 ff ff       	call   c010a965 <put_pgdir>
c010b4ed:	83 c4 10             	add    $0x10,%esp
            mm_destroy(mm);
c010b4f0:	83 ec 0c             	sub    $0xc,%esp
c010b4f3:	ff 75 f4             	pushl  -0xc(%ebp)
c010b4f6:	e8 56 b4 ff ff       	call   c0106951 <mm_destroy>
c010b4fb:	83 c4 10             	add    $0x10,%esp
        }
        current->mm = NULL;
c010b4fe:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010b503:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
c010b50a:	83 ec 08             	sub    $0x8,%esp
c010b50d:	ff 75 14             	pushl  0x14(%ebp)
c010b510:	ff 75 10             	pushl  0x10(%ebp)
c010b513:	e8 4f f9 ff ff       	call   c010ae67 <load_icode>
c010b518:	83 c4 10             	add    $0x10,%esp
c010b51b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b51e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b522:	75 1c                	jne    c010b540 <do_execve+0xff>
        goto execve_exit;
    }
    set_proc_name(current, local_name);
c010b524:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010b529:	83 ec 08             	sub    $0x8,%esp
c010b52c:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010b52f:	52                   	push   %edx
c010b530:	50                   	push   %eax
c010b531:	e8 3f ee ff ff       	call   c010a375 <set_proc_name>
c010b536:	83 c4 10             	add    $0x10,%esp
    return 0;
c010b539:	b8 00 00 00 00       	mov    $0x0,%eax
c010b53e:	eb 2a                	jmp    c010b56a <do_execve+0x129>
        goto execve_exit;
c010b540:	90                   	nop
c010b541:	f3 0f 1e fb          	endbr32 

execve_exit:
    do_exit(ret);
c010b545:	83 ec 0c             	sub    $0xc,%esp
c010b548:	ff 75 f0             	pushl  -0x10(%ebp)
c010b54b:	e8 42 f7 ff ff       	call   c010ac92 <do_exit>
c010b550:	83 c4 10             	add    $0x10,%esp
    panic("already exit: %e.\n", ret);
c010b553:	ff 75 f0             	pushl  -0x10(%ebp)
c010b556:	68 57 f1 10 c0       	push   $0xc010f157
c010b55b:	68 ac 02 00 00       	push   $0x2ac
c010b560:	68 60 ef 10 c0       	push   $0xc010ef60
c010b565:	e8 84 62 ff ff       	call   c01017ee <__panic>
}
c010b56a:	c9                   	leave  
c010b56b:	c3                   	ret    

c010b56c <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010b56c:	f3 0f 1e fb          	endbr32 
c010b570:	55                   	push   %ebp
c010b571:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010b573:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010b578:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010b57f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b584:	5d                   	pop    %ebp
c010b585:	c3                   	ret    

c010b586 <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010b586:	f3 0f 1e fb          	endbr32 
c010b58a:	55                   	push   %ebp
c010b58b:	89 e5                	mov    %esp,%ebp
c010b58d:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = current->mm;
c010b590:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010b595:	8b 40 18             	mov    0x18(%eax),%eax
c010b598:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010b59b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b59f:	74 21                	je     c010b5c2 <do_wait+0x3c>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010b5a1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b5a4:	6a 01                	push   $0x1
c010b5a6:	6a 04                	push   $0x4
c010b5a8:	50                   	push   %eax
c010b5a9:	ff 75 ec             	pushl  -0x14(%ebp)
c010b5ac:	e8 1c c0 ff ff       	call   c01075cd <user_mem_check>
c010b5b1:	83 c4 10             	add    $0x10,%esp
c010b5b4:	85 c0                	test   %eax,%eax
c010b5b6:	75 0a                	jne    c010b5c2 <do_wait+0x3c>
            return -E_INVAL;
c010b5b8:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b5bd:	e9 55 01 00 00       	jmp    c010b717 <do_wait+0x191>
        }
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
c010b5c2:	90                   	nop
    haskid = 0;
c010b5c3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010b5ca:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b5ce:	74 39                	je     c010b609 <do_wait+0x83>
        proc = find_proc(pid);
c010b5d0:	83 ec 0c             	sub    $0xc,%esp
c010b5d3:	ff 75 08             	pushl  0x8(%ebp)
c010b5d6:	e8 9f f1 ff ff       	call   c010a77a <find_proc>
c010b5db:	83 c4 10             	add    $0x10,%esp
c010b5de:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010b5e1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b5e5:	74 4f                	je     c010b636 <do_wait+0xb0>
c010b5e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b5ea:	8b 50 14             	mov    0x14(%eax),%edx
c010b5ed:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010b5f2:	39 c2                	cmp    %eax,%edx
c010b5f4:	75 40                	jne    c010b636 <do_wait+0xb0>
            haskid = 1;
c010b5f6:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010b5fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b600:	8b 00                	mov    (%eax),%eax
c010b602:	83 f8 03             	cmp    $0x3,%eax
c010b605:	75 2f                	jne    c010b636 <do_wait+0xb0>
                goto found;
c010b607:	eb 7f                	jmp    c010b688 <do_wait+0x102>
            }
        }
    }
    else {
        proc = current->cptr;
c010b609:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010b60e:	8b 40 70             	mov    0x70(%eax),%eax
c010b611:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010b614:	eb 1a                	jmp    c010b630 <do_wait+0xaa>
            haskid = 1;
c010b616:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010b61d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b620:	8b 00                	mov    (%eax),%eax
c010b622:	83 f8 03             	cmp    $0x3,%eax
c010b625:	74 60                	je     c010b687 <do_wait+0x101>
        for (; proc != NULL; proc = proc->optr) {
c010b627:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b62a:	8b 40 78             	mov    0x78(%eax),%eax
c010b62d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b630:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b634:	75 e0                	jne    c010b616 <do_wait+0x90>
                goto found;
            }
        }
    }
    if (haskid) {
c010b636:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b63a:	74 41                	je     c010b67d <do_wait+0xf7>
        current->state = PROC_SLEEPING;
c010b63c:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010b641:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010b647:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010b64c:	c7 40 6c 01 00 00 80 	movl   $0x80000001,0x6c(%eax)
        schedule();
c010b653:	e8 d7 05 00 00       	call   c010bc2f <schedule>
        if (current->flags & PF_EXITING) {
c010b658:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010b65d:	8b 40 44             	mov    0x44(%eax),%eax
c010b660:	83 e0 01             	and    $0x1,%eax
c010b663:	85 c0                	test   %eax,%eax
c010b665:	0f 84 58 ff ff ff    	je     c010b5c3 <do_wait+0x3d>
            do_exit(-E_KILLED);
c010b66b:	83 ec 0c             	sub    $0xc,%esp
c010b66e:	6a f7                	push   $0xfffffff7
c010b670:	e8 1d f6 ff ff       	call   c010ac92 <do_exit>
c010b675:	83 c4 10             	add    $0x10,%esp
        }
        goto repeat;
c010b678:	e9 46 ff ff ff       	jmp    c010b5c3 <do_wait+0x3d>
    }
    return -E_BAD_PROC;
c010b67d:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010b682:	e9 90 00 00 00       	jmp    c010b717 <do_wait+0x191>
                goto found;
c010b687:	90                   	nop

found:
    if (proc == idleproc || proc == initproc) {
c010b688:	a1 20 60 1b c0       	mov    0xc01b6020,%eax
c010b68d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010b690:	74 0a                	je     c010b69c <do_wait+0x116>
c010b692:	a1 24 60 1b c0       	mov    0xc01b6024,%eax
c010b697:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010b69a:	75 17                	jne    c010b6b3 <do_wait+0x12d>
        panic("wait idleproc or initproc.\n");
c010b69c:	83 ec 04             	sub    $0x4,%esp
c010b69f:	68 6a f1 10 c0       	push   $0xc010f16a
c010b6a4:	68 e5 02 00 00       	push   $0x2e5
c010b6a9:	68 60 ef 10 c0       	push   $0xc010ef60
c010b6ae:	e8 3b 61 ff ff       	call   c01017ee <__panic>
    }
    if (code_store != NULL) {
c010b6b3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b6b7:	74 0b                	je     c010b6c4 <do_wait+0x13e>
        *code_store = proc->exit_code;
c010b6b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b6bc:	8b 50 68             	mov    0x68(%eax),%edx
c010b6bf:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b6c2:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010b6c4:	e8 af e9 ff ff       	call   c010a078 <__intr_save>
c010b6c9:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010b6cc:	83 ec 0c             	sub    $0xc,%esp
c010b6cf:	ff 75 f4             	pushl  -0xc(%ebp)
c010b6d2:	e8 69 f0 ff ff       	call   c010a740 <unhash_proc>
c010b6d7:	83 c4 10             	add    $0x10,%esp
        remove_links(proc);
c010b6da:	83 ec 0c             	sub    $0xc,%esp
c010b6dd:	ff 75 f4             	pushl  -0xc(%ebp)
c010b6e0:	e8 af ed ff ff       	call   c010a494 <remove_links>
c010b6e5:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c010b6e8:	83 ec 0c             	sub    $0xc,%esp
c010b6eb:	ff 75 e8             	pushl  -0x18(%ebp)
c010b6ee:	e8 af e9 ff ff       	call   c010a0a2 <__intr_restore>
c010b6f3:	83 c4 10             	add    $0x10,%esp
    put_kstack(proc);
c010b6f6:	83 ec 0c             	sub    $0xc,%esp
c010b6f9:	ff 75 f4             	pushl  -0xc(%ebp)
c010b6fc:	e8 9a f1 ff ff       	call   c010a89b <put_kstack>
c010b701:	83 c4 10             	add    $0x10,%esp
    kfree(proc);
c010b704:	83 ec 0c             	sub    $0xc,%esp
c010b707:	ff 75 f4             	pushl  -0xc(%ebp)
c010b70a:	e8 4f d1 ff ff       	call   c010885e <kfree>
c010b70f:	83 c4 10             	add    $0x10,%esp
    return 0;
c010b712:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b717:	c9                   	leave  
c010b718:	c3                   	ret    

c010b719 <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010b719:	f3 0f 1e fb          	endbr32 
c010b71d:	55                   	push   %ebp
c010b71e:	89 e5                	mov    %esp,%ebp
c010b720:	83 ec 18             	sub    $0x18,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010b723:	83 ec 0c             	sub    $0xc,%esp
c010b726:	ff 75 08             	pushl  0x8(%ebp)
c010b729:	e8 4c f0 ff ff       	call   c010a77a <find_proc>
c010b72e:	83 c4 10             	add    $0x10,%esp
c010b731:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b734:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b738:	74 44                	je     c010b77e <do_kill+0x65>
        if (!(proc->flags & PF_EXITING)) {
c010b73a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b73d:	8b 40 44             	mov    0x44(%eax),%eax
c010b740:	83 e0 01             	and    $0x1,%eax
c010b743:	85 c0                	test   %eax,%eax
c010b745:	75 30                	jne    c010b777 <do_kill+0x5e>
            proc->flags |= PF_EXITING;
c010b747:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b74a:	8b 40 44             	mov    0x44(%eax),%eax
c010b74d:	83 c8 01             	or     $0x1,%eax
c010b750:	89 c2                	mov    %eax,%edx
c010b752:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b755:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010b758:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b75b:	8b 40 6c             	mov    0x6c(%eax),%eax
c010b75e:	85 c0                	test   %eax,%eax
c010b760:	79 0e                	jns    c010b770 <do_kill+0x57>
                wakeup_proc(proc);
c010b762:	83 ec 0c             	sub    $0xc,%esp
c010b765:	ff 75 f4             	pushl  -0xc(%ebp)
c010b768:	e8 49 04 00 00       	call   c010bbb6 <wakeup_proc>
c010b76d:	83 c4 10             	add    $0x10,%esp
            }
            return 0;
c010b770:	b8 00 00 00 00       	mov    $0x0,%eax
c010b775:	eb 0c                	jmp    c010b783 <do_kill+0x6a>
        }
        return -E_KILLED;
c010b777:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010b77c:	eb 05                	jmp    c010b783 <do_kill+0x6a>
    }
    return -E_INVAL;
c010b77e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010b783:	c9                   	leave  
c010b784:	c3                   	ret    

c010b785 <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, unsigned char *binary, size_t size) {
c010b785:	f3 0f 1e fb          	endbr32 
c010b789:	55                   	push   %ebp
c010b78a:	89 e5                	mov    %esp,%ebp
c010b78c:	57                   	push   %edi
c010b78d:	56                   	push   %esi
c010b78e:	53                   	push   %ebx
c010b78f:	83 ec 1c             	sub    $0x1c,%esp
    int ret, len = strlen(name);
c010b792:	83 ec 0c             	sub    $0xc,%esp
c010b795:	ff 75 08             	pushl  0x8(%ebp)
c010b798:	e8 72 07 00 00       	call   c010bf0f <strlen>
c010b79d:	83 c4 10             	add    $0x10,%esp
c010b7a0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    asm volatile (
c010b7a3:	b8 04 00 00 00       	mov    $0x4,%eax
c010b7a8:	8b 55 08             	mov    0x8(%ebp),%edx
c010b7ab:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010b7ae:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010b7b1:	8b 75 10             	mov    0x10(%ebp),%esi
c010b7b4:	89 f7                	mov    %esi,%edi
c010b7b6:	cd 80                	int    $0x80
c010b7b8:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
        : "memory");
    return ret;
c010b7bb:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
c010b7be:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010b7c1:	5b                   	pop    %ebx
c010b7c2:	5e                   	pop    %esi
c010b7c3:	5f                   	pop    %edi
c010b7c4:	5d                   	pop    %ebp
c010b7c5:	c3                   	ret    

c010b7c6 <user_main>:

#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010b7c6:	f3 0f 1e fb          	endbr32 
c010b7ca:	55                   	push   %ebp
c010b7cb:	89 e5                	mov    %esp,%ebp
c010b7cd:	83 ec 08             	sub    $0x8,%esp
#ifdef TEST
    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
c010b7d0:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010b7d5:	8b 40 04             	mov    0x4(%eax),%eax
c010b7d8:	83 ec 04             	sub    $0x4,%esp
c010b7db:	68 86 f1 10 c0       	push   $0xc010f186
c010b7e0:	50                   	push   %eax
c010b7e1:	68 90 f1 10 c0       	push   $0xc010f190
c010b7e6:	e8 c7 4a ff ff       	call   c01002b2 <cprintf>
c010b7eb:	83 c4 10             	add    $0x10,%esp
c010b7ee:	b8 8c 88 00 00       	mov    $0x888c,%eax
c010b7f3:	83 ec 04             	sub    $0x4,%esp
c010b7f6:	50                   	push   %eax
c010b7f7:	68 d4 3b 14 c0       	push   $0xc0143bd4
c010b7fc:	68 86 f1 10 c0       	push   $0xc010f186
c010b801:	e8 7f ff ff ff       	call   c010b785 <kernel_execve>
c010b806:	83 c4 10             	add    $0x10,%esp
#else
    KERNEL_EXECVE(exit);
#endif
    panic("user_main execve failed.\n");
c010b809:	83 ec 04             	sub    $0x4,%esp
c010b80c:	68 b7 f1 10 c0       	push   $0xc010f1b7
c010b811:	68 2e 03 00 00       	push   $0x32e
c010b816:	68 60 ef 10 c0       	push   $0xc010ef60
c010b81b:	e8 ce 5f ff ff       	call   c01017ee <__panic>

c010b820 <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010b820:	f3 0f 1e fb          	endbr32 
c010b824:	55                   	push   %ebp
c010b825:	89 e5                	mov    %esp,%ebp
c010b827:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010b82a:	e8 e0 94 ff ff       	call   c0104d0f <nr_free_pages>
c010b82f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t kernel_allocated_store = kallocated();
c010b832:	e8 e6 ce ff ff       	call   c010871d <kallocated>
c010b837:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010b83a:	83 ec 04             	sub    $0x4,%esp
c010b83d:	6a 00                	push   $0x0
c010b83f:	6a 00                	push   $0x0
c010b841:	68 c6 b7 10 c0       	push   $0xc010b7c6
c010b846:	e8 a3 ef ff ff       	call   c010a7ee <kernel_thread>
c010b84b:	83 c4 10             	add    $0x10,%esp
c010b84e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010b851:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010b855:	7f 1c                	jg     c010b873 <init_main+0x53>
        panic("create user_main failed.\n");
c010b857:	83 ec 04             	sub    $0x4,%esp
c010b85a:	68 d1 f1 10 c0       	push   $0xc010f1d1
c010b85f:	68 39 03 00 00       	push   $0x339
c010b864:	68 60 ef 10 c0       	push   $0xc010ef60
c010b869:	e8 80 5f ff ff       	call   c01017ee <__panic>
    }

    while (do_wait(0, NULL) == 0) {
        schedule();
c010b86e:	e8 bc 03 00 00       	call   c010bc2f <schedule>
    while (do_wait(0, NULL) == 0) {
c010b873:	83 ec 08             	sub    $0x8,%esp
c010b876:	6a 00                	push   $0x0
c010b878:	6a 00                	push   $0x0
c010b87a:	e8 07 fd ff ff       	call   c010b586 <do_wait>
c010b87f:	83 c4 10             	add    $0x10,%esp
c010b882:	85 c0                	test   %eax,%eax
c010b884:	74 e8                	je     c010b86e <init_main+0x4e>
    }

    cprintf("all user-mode processes have quit.\n");
c010b886:	83 ec 0c             	sub    $0xc,%esp
c010b889:	68 ec f1 10 c0       	push   $0xc010f1ec
c010b88e:	e8 1f 4a ff ff       	call   c01002b2 <cprintf>
c010b893:	83 c4 10             	add    $0x10,%esp
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010b896:	a1 24 60 1b c0       	mov    0xc01b6024,%eax
c010b89b:	8b 40 70             	mov    0x70(%eax),%eax
c010b89e:	85 c0                	test   %eax,%eax
c010b8a0:	75 18                	jne    c010b8ba <init_main+0x9a>
c010b8a2:	a1 24 60 1b c0       	mov    0xc01b6024,%eax
c010b8a7:	8b 40 74             	mov    0x74(%eax),%eax
c010b8aa:	85 c0                	test   %eax,%eax
c010b8ac:	75 0c                	jne    c010b8ba <init_main+0x9a>
c010b8ae:	a1 24 60 1b c0       	mov    0xc01b6024,%eax
c010b8b3:	8b 40 78             	mov    0x78(%eax),%eax
c010b8b6:	85 c0                	test   %eax,%eax
c010b8b8:	74 19                	je     c010b8d3 <init_main+0xb3>
c010b8ba:	68 10 f2 10 c0       	push   $0xc010f210
c010b8bf:	68 8d ef 10 c0       	push   $0xc010ef8d
c010b8c4:	68 41 03 00 00       	push   $0x341
c010b8c9:	68 60 ef 10 c0       	push   $0xc010ef60
c010b8ce:	e8 1b 5f ff ff       	call   c01017ee <__panic>
    assert(nr_process == 2);
c010b8d3:	a1 40 80 1b c0       	mov    0xc01b8040,%eax
c010b8d8:	83 f8 02             	cmp    $0x2,%eax
c010b8db:	74 19                	je     c010b8f6 <init_main+0xd6>
c010b8dd:	68 5b f2 10 c0       	push   $0xc010f25b
c010b8e2:	68 8d ef 10 c0       	push   $0xc010ef8d
c010b8e7:	68 42 03 00 00       	push   $0x342
c010b8ec:	68 60 ef 10 c0       	push   $0xc010ef60
c010b8f1:	e8 f8 5e ff ff       	call   c01017ee <__panic>
c010b8f6:	c7 45 e8 58 81 1b c0 	movl   $0xc01b8158,-0x18(%ebp)
c010b8fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b900:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010b903:	8b 15 24 60 1b c0    	mov    0xc01b6024,%edx
c010b909:	83 c2 58             	add    $0x58,%edx
c010b90c:	39 d0                	cmp    %edx,%eax
c010b90e:	74 19                	je     c010b929 <init_main+0x109>
c010b910:	68 6c f2 10 c0       	push   $0xc010f26c
c010b915:	68 8d ef 10 c0       	push   $0xc010ef8d
c010b91a:	68 43 03 00 00       	push   $0x343
c010b91f:	68 60 ef 10 c0       	push   $0xc010ef60
c010b924:	e8 c5 5e ff ff       	call   c01017ee <__panic>
c010b929:	c7 45 e4 58 81 1b c0 	movl   $0xc01b8158,-0x1c(%ebp)
    return listelm->prev;
c010b930:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b933:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010b935:	8b 15 24 60 1b c0    	mov    0xc01b6024,%edx
c010b93b:	83 c2 58             	add    $0x58,%edx
c010b93e:	39 d0                	cmp    %edx,%eax
c010b940:	74 19                	je     c010b95b <init_main+0x13b>
c010b942:	68 9c f2 10 c0       	push   $0xc010f29c
c010b947:	68 8d ef 10 c0       	push   $0xc010ef8d
c010b94c:	68 44 03 00 00       	push   $0x344
c010b951:	68 60 ef 10 c0       	push   $0xc010ef60
c010b956:	e8 93 5e ff ff       	call   c01017ee <__panic>
    assert(nr_free_pages_store == nr_free_pages());
c010b95b:	e8 af 93 ff ff       	call   c0104d0f <nr_free_pages>
c010b960:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010b963:	74 19                	je     c010b97e <init_main+0x15e>
c010b965:	68 cc f2 10 c0       	push   $0xc010f2cc
c010b96a:	68 8d ef 10 c0       	push   $0xc010ef8d
c010b96f:	68 45 03 00 00       	push   $0x345
c010b974:	68 60 ef 10 c0       	push   $0xc010ef60
c010b979:	e8 70 5e ff ff       	call   c01017ee <__panic>
    assert(kernel_allocated_store == kallocated());
c010b97e:	e8 9a cd ff ff       	call   c010871d <kallocated>
c010b983:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010b986:	74 19                	je     c010b9a1 <init_main+0x181>
c010b988:	68 f4 f2 10 c0       	push   $0xc010f2f4
c010b98d:	68 8d ef 10 c0       	push   $0xc010ef8d
c010b992:	68 46 03 00 00       	push   $0x346
c010b997:	68 60 ef 10 c0       	push   $0xc010ef60
c010b99c:	e8 4d 5e ff ff       	call   c01017ee <__panic>
    cprintf("init check memory pass.\n");
c010b9a1:	83 ec 0c             	sub    $0xc,%esp
c010b9a4:	68 1b f3 10 c0       	push   $0xc010f31b
c010b9a9:	e8 04 49 ff ff       	call   c01002b2 <cprintf>
c010b9ae:	83 c4 10             	add    $0x10,%esp
    return 0;
c010b9b1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b9b6:	c9                   	leave  
c010b9b7:	c3                   	ret    

c010b9b8 <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010b9b8:	f3 0f 1e fb          	endbr32 
c010b9bc:	55                   	push   %ebp
c010b9bd:	89 e5                	mov    %esp,%ebp
c010b9bf:	83 ec 18             	sub    $0x18,%esp
c010b9c2:	c7 45 ec 58 81 1b c0 	movl   $0xc01b8158,-0x14(%ebp)
    elm->prev = elm->next = elm;
c010b9c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b9cc:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b9cf:	89 50 04             	mov    %edx,0x4(%eax)
c010b9d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b9d5:	8b 50 04             	mov    0x4(%eax),%edx
c010b9d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b9db:	89 10                	mov    %edx,(%eax)
}
c010b9dd:	90                   	nop
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010b9de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b9e5:	eb 27                	jmp    c010ba0e <proc_init+0x56>
        list_init(hash_list + i);
c010b9e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9ea:	c1 e0 03             	shl    $0x3,%eax
c010b9ed:	05 40 60 1b c0       	add    $0xc01b6040,%eax
c010b9f2:	89 45 e8             	mov    %eax,-0x18(%ebp)
    elm->prev = elm->next = elm;
c010b9f5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b9f8:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010b9fb:	89 50 04             	mov    %edx,0x4(%eax)
c010b9fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ba01:	8b 50 04             	mov    0x4(%eax),%edx
c010ba04:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ba07:	89 10                	mov    %edx,(%eax)
}
c010ba09:	90                   	nop
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010ba0a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010ba0e:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010ba15:	7e d0                	jle    c010b9e7 <proc_init+0x2f>
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010ba17:	e8 73 e8 ff ff       	call   c010a28f <alloc_proc>
c010ba1c:	a3 20 60 1b c0       	mov    %eax,0xc01b6020
c010ba21:	a1 20 60 1b c0       	mov    0xc01b6020,%eax
c010ba26:	85 c0                	test   %eax,%eax
c010ba28:	75 17                	jne    c010ba41 <proc_init+0x89>
        panic("cannot alloc idleproc.\n");
c010ba2a:	83 ec 04             	sub    $0x4,%esp
c010ba2d:	68 34 f3 10 c0       	push   $0xc010f334
c010ba32:	68 57 03 00 00       	push   $0x357
c010ba37:	68 60 ef 10 c0       	push   $0xc010ef60
c010ba3c:	e8 ad 5d ff ff       	call   c01017ee <__panic>
    }

    idleproc->pid = 0;
c010ba41:	a1 20 60 1b c0       	mov    0xc01b6020,%eax
c010ba46:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010ba4d:	a1 20 60 1b c0       	mov    0xc01b6020,%eax
c010ba52:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010ba58:	a1 20 60 1b c0       	mov    0xc01b6020,%eax
c010ba5d:	ba 00 00 13 c0       	mov    $0xc0130000,%edx
c010ba62:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010ba65:	a1 20 60 1b c0       	mov    0xc01b6020,%eax
c010ba6a:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    set_proc_name(idleproc, "idle");
c010ba71:	a1 20 60 1b c0       	mov    0xc01b6020,%eax
c010ba76:	83 ec 08             	sub    $0x8,%esp
c010ba79:	68 4c f3 10 c0       	push   $0xc010f34c
c010ba7e:	50                   	push   %eax
c010ba7f:	e8 f1 e8 ff ff       	call   c010a375 <set_proc_name>
c010ba84:	83 c4 10             	add    $0x10,%esp
    nr_process ++;
c010ba87:	a1 40 80 1b c0       	mov    0xc01b8040,%eax
c010ba8c:	83 c0 01             	add    $0x1,%eax
c010ba8f:	a3 40 80 1b c0       	mov    %eax,0xc01b8040

    current = idleproc;
c010ba94:	a1 20 60 1b c0       	mov    0xc01b6020,%eax
c010ba99:	a3 28 60 1b c0       	mov    %eax,0xc01b6028

    int pid = kernel_thread(init_main, NULL, 0);
c010ba9e:	83 ec 04             	sub    $0x4,%esp
c010baa1:	6a 00                	push   $0x0
c010baa3:	6a 00                	push   $0x0
c010baa5:	68 20 b8 10 c0       	push   $0xc010b820
c010baaa:	e8 3f ed ff ff       	call   c010a7ee <kernel_thread>
c010baaf:	83 c4 10             	add    $0x10,%esp
c010bab2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0) {
c010bab5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bab9:	7f 17                	jg     c010bad2 <proc_init+0x11a>
        panic("create init_main failed.\n");
c010babb:	83 ec 04             	sub    $0x4,%esp
c010babe:	68 51 f3 10 c0       	push   $0xc010f351
c010bac3:	68 65 03 00 00       	push   $0x365
c010bac8:	68 60 ef 10 c0       	push   $0xc010ef60
c010bacd:	e8 1c 5d ff ff       	call   c01017ee <__panic>
    }

    initproc = find_proc(pid);
c010bad2:	83 ec 0c             	sub    $0xc,%esp
c010bad5:	ff 75 f0             	pushl  -0x10(%ebp)
c010bad8:	e8 9d ec ff ff       	call   c010a77a <find_proc>
c010badd:	83 c4 10             	add    $0x10,%esp
c010bae0:	a3 24 60 1b c0       	mov    %eax,0xc01b6024
    set_proc_name(initproc, "init");
c010bae5:	a1 24 60 1b c0       	mov    0xc01b6024,%eax
c010baea:	83 ec 08             	sub    $0x8,%esp
c010baed:	68 6b f3 10 c0       	push   $0xc010f36b
c010baf2:	50                   	push   %eax
c010baf3:	e8 7d e8 ff ff       	call   c010a375 <set_proc_name>
c010baf8:	83 c4 10             	add    $0x10,%esp

    assert(idleproc != NULL && idleproc->pid == 0);
c010bafb:	a1 20 60 1b c0       	mov    0xc01b6020,%eax
c010bb00:	85 c0                	test   %eax,%eax
c010bb02:	74 0c                	je     c010bb10 <proc_init+0x158>
c010bb04:	a1 20 60 1b c0       	mov    0xc01b6020,%eax
c010bb09:	8b 40 04             	mov    0x4(%eax),%eax
c010bb0c:	85 c0                	test   %eax,%eax
c010bb0e:	74 19                	je     c010bb29 <proc_init+0x171>
c010bb10:	68 70 f3 10 c0       	push   $0xc010f370
c010bb15:	68 8d ef 10 c0       	push   $0xc010ef8d
c010bb1a:	68 6b 03 00 00       	push   $0x36b
c010bb1f:	68 60 ef 10 c0       	push   $0xc010ef60
c010bb24:	e8 c5 5c ff ff       	call   c01017ee <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010bb29:	a1 24 60 1b c0       	mov    0xc01b6024,%eax
c010bb2e:	85 c0                	test   %eax,%eax
c010bb30:	74 0d                	je     c010bb3f <proc_init+0x187>
c010bb32:	a1 24 60 1b c0       	mov    0xc01b6024,%eax
c010bb37:	8b 40 04             	mov    0x4(%eax),%eax
c010bb3a:	83 f8 01             	cmp    $0x1,%eax
c010bb3d:	74 19                	je     c010bb58 <proc_init+0x1a0>
c010bb3f:	68 98 f3 10 c0       	push   $0xc010f398
c010bb44:	68 8d ef 10 c0       	push   $0xc010ef8d
c010bb49:	68 6c 03 00 00       	push   $0x36c
c010bb4e:	68 60 ef 10 c0       	push   $0xc010ef60
c010bb53:	e8 96 5c ff ff       	call   c01017ee <__panic>
}
c010bb58:	90                   	nop
c010bb59:	c9                   	leave  
c010bb5a:	c3                   	ret    

c010bb5b <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010bb5b:	f3 0f 1e fb          	endbr32 
c010bb5f:	55                   	push   %ebp
c010bb60:	89 e5                	mov    %esp,%ebp
c010bb62:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010bb65:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010bb6a:	8b 40 10             	mov    0x10(%eax),%eax
c010bb6d:	85 c0                	test   %eax,%eax
c010bb6f:	74 f4                	je     c010bb65 <cpu_idle+0xa>
            schedule();
c010bb71:	e8 b9 00 00 00       	call   c010bc2f <schedule>
        if (current->need_resched) {
c010bb76:	eb ed                	jmp    c010bb65 <cpu_idle+0xa>

c010bb78 <__intr_save>:
__intr_save(void) {
c010bb78:	55                   	push   %ebp
c010bb79:	89 e5                	mov    %esp,%ebp
c010bb7b:	83 ec 18             	sub    $0x18,%esp
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010bb7e:	9c                   	pushf  
c010bb7f:	58                   	pop    %eax
c010bb80:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010bb83:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010bb86:	25 00 02 00 00       	and    $0x200,%eax
c010bb8b:	85 c0                	test   %eax,%eax
c010bb8d:	74 0c                	je     c010bb9b <__intr_save+0x23>
        intr_disable();
c010bb8f:	e8 6b 7a ff ff       	call   c01035ff <intr_disable>
        return 1;
c010bb94:	b8 01 00 00 00       	mov    $0x1,%eax
c010bb99:	eb 05                	jmp    c010bba0 <__intr_save+0x28>
    return 0;
c010bb9b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bba0:	c9                   	leave  
c010bba1:	c3                   	ret    

c010bba2 <__intr_restore>:
__intr_restore(bool flag) {
c010bba2:	55                   	push   %ebp
c010bba3:	89 e5                	mov    %esp,%ebp
c010bba5:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010bba8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bbac:	74 05                	je     c010bbb3 <__intr_restore+0x11>
        intr_enable();
c010bbae:	e8 40 7a ff ff       	call   c01035f3 <intr_enable>
}
c010bbb3:	90                   	nop
c010bbb4:	c9                   	leave  
c010bbb5:	c3                   	ret    

c010bbb6 <wakeup_proc>:
#include <proc.h>
#include <sched.h>
#include <assert.h>

void
wakeup_proc(struct proc_struct *proc) {
c010bbb6:	f3 0f 1e fb          	endbr32 
c010bbba:	55                   	push   %ebp
c010bbbb:	89 e5                	mov    %esp,%ebp
c010bbbd:	83 ec 18             	sub    $0x18,%esp
    assert(proc->state != PROC_ZOMBIE);
c010bbc0:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbc3:	8b 00                	mov    (%eax),%eax
c010bbc5:	83 f8 03             	cmp    $0x3,%eax
c010bbc8:	75 16                	jne    c010bbe0 <wakeup_proc+0x2a>
c010bbca:	68 bf f3 10 c0       	push   $0xc010f3bf
c010bbcf:	68 da f3 10 c0       	push   $0xc010f3da
c010bbd4:	6a 09                	push   $0x9
c010bbd6:	68 ef f3 10 c0       	push   $0xc010f3ef
c010bbdb:	e8 0e 5c ff ff       	call   c01017ee <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010bbe0:	e8 93 ff ff ff       	call   c010bb78 <__intr_save>
c010bbe5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010bbe8:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbeb:	8b 00                	mov    (%eax),%eax
c010bbed:	83 f8 02             	cmp    $0x2,%eax
c010bbf0:	74 15                	je     c010bc07 <wakeup_proc+0x51>
            proc->state = PROC_RUNNABLE;
c010bbf2:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbf5:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010bbfb:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbfe:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
c010bc05:	eb 17                	jmp    c010bc1e <wakeup_proc+0x68>
        }
        else {
            warn("wakeup runnable process.\n");
c010bc07:	83 ec 04             	sub    $0x4,%esp
c010bc0a:	68 05 f4 10 c0       	push   $0xc010f405
c010bc0f:	6a 12                	push   $0x12
c010bc11:	68 ef f3 10 c0       	push   $0xc010f3ef
c010bc16:	e8 5a 5c ff ff       	call   c0101875 <__warn>
c010bc1b:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c010bc1e:	83 ec 0c             	sub    $0xc,%esp
c010bc21:	ff 75 f4             	pushl  -0xc(%ebp)
c010bc24:	e8 79 ff ff ff       	call   c010bba2 <__intr_restore>
c010bc29:	83 c4 10             	add    $0x10,%esp
}
c010bc2c:	90                   	nop
c010bc2d:	c9                   	leave  
c010bc2e:	c3                   	ret    

c010bc2f <schedule>:

void
schedule(void) {
c010bc2f:	f3 0f 1e fb          	endbr32 
c010bc33:	55                   	push   %ebp
c010bc34:	89 e5                	mov    %esp,%ebp
c010bc36:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    list_entry_t *le, *last;
    struct proc_struct *next = NULL;
c010bc39:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    local_intr_save(intr_flag);
c010bc40:	e8 33 ff ff ff       	call   c010bb78 <__intr_save>
c010bc45:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
        current->need_resched = 0;
c010bc48:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010bc4d:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        last = (current == idleproc) ? &proc_list : &(current->list_link);
c010bc54:	8b 15 28 60 1b c0    	mov    0xc01b6028,%edx
c010bc5a:	a1 20 60 1b c0       	mov    0xc01b6020,%eax
c010bc5f:	39 c2                	cmp    %eax,%edx
c010bc61:	74 0a                	je     c010bc6d <schedule+0x3e>
c010bc63:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010bc68:	83 c0 58             	add    $0x58,%eax
c010bc6b:	eb 05                	jmp    c010bc72 <schedule+0x43>
c010bc6d:	b8 58 81 1b c0       	mov    $0xc01b8158,%eax
c010bc72:	89 45 e8             	mov    %eax,-0x18(%ebp)
        le = last;
c010bc75:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bc78:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bc7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc7e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return listelm->next;
c010bc81:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bc84:	8b 40 04             	mov    0x4(%eax),%eax
        do {
            if ((le = list_next(le)) != &proc_list) {
c010bc87:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bc8a:	81 7d f4 58 81 1b c0 	cmpl   $0xc01b8158,-0xc(%ebp)
c010bc91:	74 13                	je     c010bca6 <schedule+0x77>
                next = le2proc(le, list_link);
c010bc93:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc96:	83 e8 58             	sub    $0x58,%eax
c010bc99:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (next->state == PROC_RUNNABLE) {
c010bc9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc9f:	8b 00                	mov    (%eax),%eax
c010bca1:	83 f8 02             	cmp    $0x2,%eax
c010bca4:	74 0a                	je     c010bcb0 <schedule+0x81>
                    break;
                }
            }
        } while (le != last);
c010bca6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bca9:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010bcac:	75 cd                	jne    c010bc7b <schedule+0x4c>
c010bcae:	eb 01                	jmp    c010bcb1 <schedule+0x82>
                    break;
c010bcb0:	90                   	nop
        if (next == NULL || next->state != PROC_RUNNABLE) {
c010bcb1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bcb5:	74 0a                	je     c010bcc1 <schedule+0x92>
c010bcb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bcba:	8b 00                	mov    (%eax),%eax
c010bcbc:	83 f8 02             	cmp    $0x2,%eax
c010bcbf:	74 08                	je     c010bcc9 <schedule+0x9a>
            next = idleproc;
c010bcc1:	a1 20 60 1b c0       	mov    0xc01b6020,%eax
c010bcc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        next->runs ++;
c010bcc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bccc:	8b 40 08             	mov    0x8(%eax),%eax
c010bccf:	8d 50 01             	lea    0x1(%eax),%edx
c010bcd2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bcd5:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010bcd8:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010bcdd:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010bce0:	74 0e                	je     c010bcf0 <schedule+0xc1>
            proc_run(next);
c010bce2:	83 ec 0c             	sub    $0xc,%esp
c010bce5:	ff 75 f0             	pushl  -0x10(%ebp)
c010bce8:	e8 2e e9 ff ff       	call   c010a61b <proc_run>
c010bced:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c010bcf0:	83 ec 0c             	sub    $0xc,%esp
c010bcf3:	ff 75 ec             	pushl  -0x14(%ebp)
c010bcf6:	e8 a7 fe ff ff       	call   c010bba2 <__intr_restore>
c010bcfb:	83 c4 10             	add    $0x10,%esp
}
c010bcfe:	90                   	nop
c010bcff:	c9                   	leave  
c010bd00:	c3                   	ret    

c010bd01 <sys_exit>:
#include <stdio.h>
#include <pmm.h>
#include <assert.h>

static int
sys_exit(uint32_t arg[]) {
c010bd01:	f3 0f 1e fb          	endbr32 
c010bd05:	55                   	push   %ebp
c010bd06:	89 e5                	mov    %esp,%ebp
c010bd08:	83 ec 18             	sub    $0x18,%esp
    int error_code = (int)arg[0];
c010bd0b:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd0e:	8b 00                	mov    (%eax),%eax
c010bd10:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010bd13:	83 ec 0c             	sub    $0xc,%esp
c010bd16:	ff 75 f4             	pushl  -0xc(%ebp)
c010bd19:	e8 74 ef ff ff       	call   c010ac92 <do_exit>
c010bd1e:	83 c4 10             	add    $0x10,%esp
}
c010bd21:	c9                   	leave  
c010bd22:	c3                   	ret    

c010bd23 <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010bd23:	f3 0f 1e fb          	endbr32 
c010bd27:	55                   	push   %ebp
c010bd28:	89 e5                	mov    %esp,%ebp
c010bd2a:	83 ec 18             	sub    $0x18,%esp
    struct trapframe *tf = current->tf;
c010bd2d:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010bd32:	8b 40 3c             	mov    0x3c(%eax),%eax
c010bd35:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010bd38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd3b:	8b 40 44             	mov    0x44(%eax),%eax
c010bd3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010bd41:	83 ec 04             	sub    $0x4,%esp
c010bd44:	ff 75 f4             	pushl  -0xc(%ebp)
c010bd47:	ff 75 f0             	pushl  -0x10(%ebp)
c010bd4a:	6a 00                	push   $0x0
c010bd4c:	e8 10 ee ff ff       	call   c010ab61 <do_fork>
c010bd51:	83 c4 10             	add    $0x10,%esp
}
c010bd54:	c9                   	leave  
c010bd55:	c3                   	ret    

c010bd56 <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010bd56:	f3 0f 1e fb          	endbr32 
c010bd5a:	55                   	push   %ebp
c010bd5b:	89 e5                	mov    %esp,%ebp
c010bd5d:	83 ec 18             	sub    $0x18,%esp
    int pid = (int)arg[0];
c010bd60:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd63:	8b 00                	mov    (%eax),%eax
c010bd65:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010bd68:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd6b:	83 c0 04             	add    $0x4,%eax
c010bd6e:	8b 00                	mov    (%eax),%eax
c010bd70:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010bd73:	83 ec 08             	sub    $0x8,%esp
c010bd76:	ff 75 f0             	pushl  -0x10(%ebp)
c010bd79:	ff 75 f4             	pushl  -0xc(%ebp)
c010bd7c:	e8 05 f8 ff ff       	call   c010b586 <do_wait>
c010bd81:	83 c4 10             	add    $0x10,%esp
}
c010bd84:	c9                   	leave  
c010bd85:	c3                   	ret    

c010bd86 <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010bd86:	f3 0f 1e fb          	endbr32 
c010bd8a:	55                   	push   %ebp
c010bd8b:	89 e5                	mov    %esp,%ebp
c010bd8d:	83 ec 18             	sub    $0x18,%esp
    const char *name = (const char *)arg[0];
c010bd90:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd93:	8b 00                	mov    (%eax),%eax
c010bd95:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010bd98:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd9b:	83 c0 04             	add    $0x4,%eax
c010bd9e:	8b 00                	mov    (%eax),%eax
c010bda0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned char *binary = (unsigned char *)arg[2];
c010bda3:	8b 45 08             	mov    0x8(%ebp),%eax
c010bda6:	83 c0 08             	add    $0x8,%eax
c010bda9:	8b 00                	mov    (%eax),%eax
c010bdab:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t size = (size_t)arg[3];
c010bdae:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdb1:	83 c0 0c             	add    $0xc,%eax
c010bdb4:	8b 00                	mov    (%eax),%eax
c010bdb6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return do_execve(name, len, binary, size);
c010bdb9:	ff 75 e8             	pushl  -0x18(%ebp)
c010bdbc:	ff 75 ec             	pushl  -0x14(%ebp)
c010bdbf:	ff 75 f0             	pushl  -0x10(%ebp)
c010bdc2:	ff 75 f4             	pushl  -0xc(%ebp)
c010bdc5:	e8 77 f6 ff ff       	call   c010b441 <do_execve>
c010bdca:	83 c4 10             	add    $0x10,%esp
}
c010bdcd:	c9                   	leave  
c010bdce:	c3                   	ret    

c010bdcf <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010bdcf:	f3 0f 1e fb          	endbr32 
c010bdd3:	55                   	push   %ebp
c010bdd4:	89 e5                	mov    %esp,%ebp
c010bdd6:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010bdd9:	e8 8e f7 ff ff       	call   c010b56c <do_yield>
}
c010bdde:	c9                   	leave  
c010bddf:	c3                   	ret    

c010bde0 <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010bde0:	f3 0f 1e fb          	endbr32 
c010bde4:	55                   	push   %ebp
c010bde5:	89 e5                	mov    %esp,%ebp
c010bde7:	83 ec 18             	sub    $0x18,%esp
    int pid = (int)arg[0];
c010bdea:	8b 45 08             	mov    0x8(%ebp),%eax
c010bded:	8b 00                	mov    (%eax),%eax
c010bdef:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010bdf2:	83 ec 0c             	sub    $0xc,%esp
c010bdf5:	ff 75 f4             	pushl  -0xc(%ebp)
c010bdf8:	e8 1c f9 ff ff       	call   c010b719 <do_kill>
c010bdfd:	83 c4 10             	add    $0x10,%esp
}
c010be00:	c9                   	leave  
c010be01:	c3                   	ret    

c010be02 <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010be02:	f3 0f 1e fb          	endbr32 
c010be06:	55                   	push   %ebp
c010be07:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010be09:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010be0e:	8b 40 04             	mov    0x4(%eax),%eax
}
c010be11:	5d                   	pop    %ebp
c010be12:	c3                   	ret    

c010be13 <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010be13:	f3 0f 1e fb          	endbr32 
c010be17:	55                   	push   %ebp
c010be18:	89 e5                	mov    %esp,%ebp
c010be1a:	83 ec 18             	sub    $0x18,%esp
    int c = (int)arg[0];
c010be1d:	8b 45 08             	mov    0x8(%ebp),%eax
c010be20:	8b 00                	mov    (%eax),%eax
c010be22:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010be25:	83 ec 0c             	sub    $0xc,%esp
c010be28:	ff 75 f4             	pushl  -0xc(%ebp)
c010be2b:	e8 ac 44 ff ff       	call   c01002dc <cputchar>
c010be30:	83 c4 10             	add    $0x10,%esp
    return 0;
c010be33:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010be38:	c9                   	leave  
c010be39:	c3                   	ret    

c010be3a <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010be3a:	f3 0f 1e fb          	endbr32 
c010be3e:	55                   	push   %ebp
c010be3f:	89 e5                	mov    %esp,%ebp
c010be41:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010be44:	e8 eb a5 ff ff       	call   c0106434 <print_pgdir>
    return 0;
c010be49:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010be4e:	c9                   	leave  
c010be4f:	c3                   	ret    

c010be50 <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010be50:	f3 0f 1e fb          	endbr32 
c010be54:	55                   	push   %ebp
c010be55:	89 e5                	mov    %esp,%ebp
c010be57:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010be5a:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010be5f:	8b 40 3c             	mov    0x3c(%eax),%eax
c010be62:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010be65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be68:	8b 40 1c             	mov    0x1c(%eax),%eax
c010be6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010be6e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010be72:	78 62                	js     c010bed6 <syscall+0x86>
c010be74:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010be77:	83 f8 1f             	cmp    $0x1f,%eax
c010be7a:	77 5a                	ja     c010bed6 <syscall+0x86>
        if (syscalls[num] != NULL) {
c010be7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010be7f:	8b 04 85 a0 2a 13 c0 	mov    -0x3fecd560(,%eax,4),%eax
c010be86:	85 c0                	test   %eax,%eax
c010be88:	74 4c                	je     c010bed6 <syscall+0x86>
            arg[0] = tf->tf_regs.reg_edx;
c010be8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be8d:	8b 40 14             	mov    0x14(%eax),%eax
c010be90:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010be93:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be96:	8b 40 18             	mov    0x18(%eax),%eax
c010be99:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010be9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be9f:	8b 40 10             	mov    0x10(%eax),%eax
c010bea2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010bea5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bea8:	8b 00                	mov    (%eax),%eax
c010beaa:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010bead:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010beb0:	8b 40 04             	mov    0x4(%eax),%eax
c010beb3:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010beb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010beb9:	8b 04 85 a0 2a 13 c0 	mov    -0x3fecd560(,%eax,4),%eax
c010bec0:	83 ec 0c             	sub    $0xc,%esp
c010bec3:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010bec6:	52                   	push   %edx
c010bec7:	ff d0                	call   *%eax
c010bec9:	83 c4 10             	add    $0x10,%esp
c010becc:	89 c2                	mov    %eax,%edx
c010bece:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bed1:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010bed4:	eb 37                	jmp    c010bf0d <syscall+0xbd>
        }
    }
    print_trapframe(tf);
c010bed6:	83 ec 0c             	sub    $0xc,%esp
c010bed9:	ff 75 f4             	pushl  -0xc(%ebp)
c010bedc:	e8 2d 79 ff ff       	call   c010380e <print_trapframe>
c010bee1:	83 c4 10             	add    $0x10,%esp
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010bee4:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010bee9:	8d 50 48             	lea    0x48(%eax),%edx
c010beec:	a1 28 60 1b c0       	mov    0xc01b6028,%eax
c010bef1:	8b 40 04             	mov    0x4(%eax),%eax
c010bef4:	83 ec 08             	sub    $0x8,%esp
c010bef7:	52                   	push   %edx
c010bef8:	50                   	push   %eax
c010bef9:	ff 75 f0             	pushl  -0x10(%ebp)
c010befc:	68 20 f4 10 c0       	push   $0xc010f420
c010bf01:	6a 62                	push   $0x62
c010bf03:	68 4c f4 10 c0       	push   $0xc010f44c
c010bf08:	e8 e1 58 ff ff       	call   c01017ee <__panic>
            num, current->pid, current->name);
}
c010bf0d:	c9                   	leave  
c010bf0e:	c3                   	ret    

c010bf0f <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c010bf0f:	f3 0f 1e fb          	endbr32 
c010bf13:	55                   	push   %ebp
c010bf14:	89 e5                	mov    %esp,%ebp
c010bf16:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010bf19:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c010bf20:	eb 04                	jmp    c010bf26 <strlen+0x17>
        cnt ++;
c010bf22:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (*s ++ != '\0') {
c010bf26:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf29:	8d 50 01             	lea    0x1(%eax),%edx
c010bf2c:	89 55 08             	mov    %edx,0x8(%ebp)
c010bf2f:	0f b6 00             	movzbl (%eax),%eax
c010bf32:	84 c0                	test   %al,%al
c010bf34:	75 ec                	jne    c010bf22 <strlen+0x13>
    }
    return cnt;
c010bf36:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010bf39:	c9                   	leave  
c010bf3a:	c3                   	ret    

c010bf3b <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c010bf3b:	f3 0f 1e fb          	endbr32 
c010bf3f:	55                   	push   %ebp
c010bf40:	89 e5                	mov    %esp,%ebp
c010bf42:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010bf45:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010bf4c:	eb 04                	jmp    c010bf52 <strnlen+0x17>
        cnt ++;
c010bf4e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010bf52:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bf55:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010bf58:	73 10                	jae    c010bf6a <strnlen+0x2f>
c010bf5a:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf5d:	8d 50 01             	lea    0x1(%eax),%edx
c010bf60:	89 55 08             	mov    %edx,0x8(%ebp)
c010bf63:	0f b6 00             	movzbl (%eax),%eax
c010bf66:	84 c0                	test   %al,%al
c010bf68:	75 e4                	jne    c010bf4e <strnlen+0x13>
    }
    return cnt;
c010bf6a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010bf6d:	c9                   	leave  
c010bf6e:	c3                   	ret    

c010bf6f <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c010bf6f:	f3 0f 1e fb          	endbr32 
c010bf73:	55                   	push   %ebp
c010bf74:	89 e5                	mov    %esp,%ebp
c010bf76:	57                   	push   %edi
c010bf77:	56                   	push   %esi
c010bf78:	83 ec 20             	sub    $0x20,%esp
c010bf7b:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bf81:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf84:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c010bf87:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010bf8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf8d:	89 d1                	mov    %edx,%ecx
c010bf8f:	89 c2                	mov    %eax,%edx
c010bf91:	89 ce                	mov    %ecx,%esi
c010bf93:	89 d7                	mov    %edx,%edi
c010bf95:	ac                   	lods   %ds:(%esi),%al
c010bf96:	aa                   	stos   %al,%es:(%edi)
c010bf97:	84 c0                	test   %al,%al
c010bf99:	75 fa                	jne    c010bf95 <strcpy+0x26>
c010bf9b:	89 fa                	mov    %edi,%edx
c010bf9d:	89 f1                	mov    %esi,%ecx
c010bf9f:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010bfa2:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010bfa5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c010bfa8:	8b 45 f4             	mov    -0xc(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c010bfab:	83 c4 20             	add    $0x20,%esp
c010bfae:	5e                   	pop    %esi
c010bfaf:	5f                   	pop    %edi
c010bfb0:	5d                   	pop    %ebp
c010bfb1:	c3                   	ret    

c010bfb2 <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c010bfb2:	f3 0f 1e fb          	endbr32 
c010bfb6:	55                   	push   %ebp
c010bfb7:	89 e5                	mov    %esp,%ebp
c010bfb9:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c010bfbc:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfbf:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c010bfc2:	eb 21                	jmp    c010bfe5 <strncpy+0x33>
        if ((*p = *src) != '\0') {
c010bfc4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bfc7:	0f b6 10             	movzbl (%eax),%edx
c010bfca:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bfcd:	88 10                	mov    %dl,(%eax)
c010bfcf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bfd2:	0f b6 00             	movzbl (%eax),%eax
c010bfd5:	84 c0                	test   %al,%al
c010bfd7:	74 04                	je     c010bfdd <strncpy+0x2b>
            src ++;
c010bfd9:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c010bfdd:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010bfe1:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
    while (len > 0) {
c010bfe5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010bfe9:	75 d9                	jne    c010bfc4 <strncpy+0x12>
    }
    return dst;
c010bfeb:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010bfee:	c9                   	leave  
c010bfef:	c3                   	ret    

c010bff0 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c010bff0:	f3 0f 1e fb          	endbr32 
c010bff4:	55                   	push   %ebp
c010bff5:	89 e5                	mov    %esp,%ebp
c010bff7:	57                   	push   %edi
c010bff8:	56                   	push   %esi
c010bff9:	83 ec 20             	sub    $0x20,%esp
c010bffc:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfff:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c002:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c005:	89 45 f0             	mov    %eax,-0x10(%ebp)
    asm volatile (
c010c008:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c00b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c00e:	89 d1                	mov    %edx,%ecx
c010c010:	89 c2                	mov    %eax,%edx
c010c012:	89 ce                	mov    %ecx,%esi
c010c014:	89 d7                	mov    %edx,%edi
c010c016:	ac                   	lods   %ds:(%esi),%al
c010c017:	ae                   	scas   %es:(%edi),%al
c010c018:	75 08                	jne    c010c022 <strcmp+0x32>
c010c01a:	84 c0                	test   %al,%al
c010c01c:	75 f8                	jne    c010c016 <strcmp+0x26>
c010c01e:	31 c0                	xor    %eax,%eax
c010c020:	eb 04                	jmp    c010c026 <strcmp+0x36>
c010c022:	19 c0                	sbb    %eax,%eax
c010c024:	0c 01                	or     $0x1,%al
c010c026:	89 fa                	mov    %edi,%edx
c010c028:	89 f1                	mov    %esi,%ecx
c010c02a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c02d:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010c030:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return ret;
c010c033:	8b 45 ec             	mov    -0x14(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c010c036:	83 c4 20             	add    $0x20,%esp
c010c039:	5e                   	pop    %esi
c010c03a:	5f                   	pop    %edi
c010c03b:	5d                   	pop    %ebp
c010c03c:	c3                   	ret    

c010c03d <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c010c03d:	f3 0f 1e fb          	endbr32 
c010c041:	55                   	push   %ebp
c010c042:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010c044:	eb 0c                	jmp    c010c052 <strncmp+0x15>
        n --, s1 ++, s2 ++;
c010c046:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010c04a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c04e:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010c052:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c056:	74 1a                	je     c010c072 <strncmp+0x35>
c010c058:	8b 45 08             	mov    0x8(%ebp),%eax
c010c05b:	0f b6 00             	movzbl (%eax),%eax
c010c05e:	84 c0                	test   %al,%al
c010c060:	74 10                	je     c010c072 <strncmp+0x35>
c010c062:	8b 45 08             	mov    0x8(%ebp),%eax
c010c065:	0f b6 10             	movzbl (%eax),%edx
c010c068:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c06b:	0f b6 00             	movzbl (%eax),%eax
c010c06e:	38 c2                	cmp    %al,%dl
c010c070:	74 d4                	je     c010c046 <strncmp+0x9>
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c010c072:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c076:	74 18                	je     c010c090 <strncmp+0x53>
c010c078:	8b 45 08             	mov    0x8(%ebp),%eax
c010c07b:	0f b6 00             	movzbl (%eax),%eax
c010c07e:	0f b6 d0             	movzbl %al,%edx
c010c081:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c084:	0f b6 00             	movzbl (%eax),%eax
c010c087:	0f b6 c0             	movzbl %al,%eax
c010c08a:	29 c2                	sub    %eax,%edx
c010c08c:	89 d0                	mov    %edx,%eax
c010c08e:	eb 05                	jmp    c010c095 <strncmp+0x58>
c010c090:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c095:	5d                   	pop    %ebp
c010c096:	c3                   	ret    

c010c097 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c010c097:	f3 0f 1e fb          	endbr32 
c010c09b:	55                   	push   %ebp
c010c09c:	89 e5                	mov    %esp,%ebp
c010c09e:	83 ec 04             	sub    $0x4,%esp
c010c0a1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c0a4:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010c0a7:	eb 14                	jmp    c010c0bd <strchr+0x26>
        if (*s == c) {
c010c0a9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0ac:	0f b6 00             	movzbl (%eax),%eax
c010c0af:	38 45 fc             	cmp    %al,-0x4(%ebp)
c010c0b2:	75 05                	jne    c010c0b9 <strchr+0x22>
            return (char *)s;
c010c0b4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0b7:	eb 13                	jmp    c010c0cc <strchr+0x35>
        }
        s ++;
c010c0b9:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    while (*s != '\0') {
c010c0bd:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0c0:	0f b6 00             	movzbl (%eax),%eax
c010c0c3:	84 c0                	test   %al,%al
c010c0c5:	75 e2                	jne    c010c0a9 <strchr+0x12>
    }
    return NULL;
c010c0c7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c0cc:	c9                   	leave  
c010c0cd:	c3                   	ret    

c010c0ce <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c010c0ce:	f3 0f 1e fb          	endbr32 
c010c0d2:	55                   	push   %ebp
c010c0d3:	89 e5                	mov    %esp,%ebp
c010c0d5:	83 ec 04             	sub    $0x4,%esp
c010c0d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c0db:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010c0de:	eb 0f                	jmp    c010c0ef <strfind+0x21>
        if (*s == c) {
c010c0e0:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0e3:	0f b6 00             	movzbl (%eax),%eax
c010c0e6:	38 45 fc             	cmp    %al,-0x4(%ebp)
c010c0e9:	74 10                	je     c010c0fb <strfind+0x2d>
            break;
        }
        s ++;
c010c0eb:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    while (*s != '\0') {
c010c0ef:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0f2:	0f b6 00             	movzbl (%eax),%eax
c010c0f5:	84 c0                	test   %al,%al
c010c0f7:	75 e7                	jne    c010c0e0 <strfind+0x12>
c010c0f9:	eb 01                	jmp    c010c0fc <strfind+0x2e>
            break;
c010c0fb:	90                   	nop
    }
    return (char *)s;
c010c0fc:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010c0ff:	c9                   	leave  
c010c100:	c3                   	ret    

c010c101 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c010c101:	f3 0f 1e fb          	endbr32 
c010c105:	55                   	push   %ebp
c010c106:	89 e5                	mov    %esp,%ebp
c010c108:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c010c10b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c010c112:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010c119:	eb 04                	jmp    c010c11f <strtol+0x1e>
        s ++;
c010c11b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    while (*s == ' ' || *s == '\t') {
c010c11f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c122:	0f b6 00             	movzbl (%eax),%eax
c010c125:	3c 20                	cmp    $0x20,%al
c010c127:	74 f2                	je     c010c11b <strtol+0x1a>
c010c129:	8b 45 08             	mov    0x8(%ebp),%eax
c010c12c:	0f b6 00             	movzbl (%eax),%eax
c010c12f:	3c 09                	cmp    $0x9,%al
c010c131:	74 e8                	je     c010c11b <strtol+0x1a>
    }

    // plus/minus sign
    if (*s == '+') {
c010c133:	8b 45 08             	mov    0x8(%ebp),%eax
c010c136:	0f b6 00             	movzbl (%eax),%eax
c010c139:	3c 2b                	cmp    $0x2b,%al
c010c13b:	75 06                	jne    c010c143 <strtol+0x42>
        s ++;
c010c13d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c141:	eb 15                	jmp    c010c158 <strtol+0x57>
    }
    else if (*s == '-') {
c010c143:	8b 45 08             	mov    0x8(%ebp),%eax
c010c146:	0f b6 00             	movzbl (%eax),%eax
c010c149:	3c 2d                	cmp    $0x2d,%al
c010c14b:	75 0b                	jne    c010c158 <strtol+0x57>
        s ++, neg = 1;
c010c14d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c151:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c010c158:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c15c:	74 06                	je     c010c164 <strtol+0x63>
c010c15e:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c010c162:	75 24                	jne    c010c188 <strtol+0x87>
c010c164:	8b 45 08             	mov    0x8(%ebp),%eax
c010c167:	0f b6 00             	movzbl (%eax),%eax
c010c16a:	3c 30                	cmp    $0x30,%al
c010c16c:	75 1a                	jne    c010c188 <strtol+0x87>
c010c16e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c171:	83 c0 01             	add    $0x1,%eax
c010c174:	0f b6 00             	movzbl (%eax),%eax
c010c177:	3c 78                	cmp    $0x78,%al
c010c179:	75 0d                	jne    c010c188 <strtol+0x87>
        s += 2, base = 16;
c010c17b:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c010c17f:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c010c186:	eb 2a                	jmp    c010c1b2 <strtol+0xb1>
    }
    else if (base == 0 && s[0] == '0') {
c010c188:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c18c:	75 17                	jne    c010c1a5 <strtol+0xa4>
c010c18e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c191:	0f b6 00             	movzbl (%eax),%eax
c010c194:	3c 30                	cmp    $0x30,%al
c010c196:	75 0d                	jne    c010c1a5 <strtol+0xa4>
        s ++, base = 8;
c010c198:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c19c:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c010c1a3:	eb 0d                	jmp    c010c1b2 <strtol+0xb1>
    }
    else if (base == 0) {
c010c1a5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c1a9:	75 07                	jne    c010c1b2 <strtol+0xb1>
        base = 10;
c010c1ab:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c010c1b2:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1b5:	0f b6 00             	movzbl (%eax),%eax
c010c1b8:	3c 2f                	cmp    $0x2f,%al
c010c1ba:	7e 1b                	jle    c010c1d7 <strtol+0xd6>
c010c1bc:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1bf:	0f b6 00             	movzbl (%eax),%eax
c010c1c2:	3c 39                	cmp    $0x39,%al
c010c1c4:	7f 11                	jg     c010c1d7 <strtol+0xd6>
            dig = *s - '0';
c010c1c6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1c9:	0f b6 00             	movzbl (%eax),%eax
c010c1cc:	0f be c0             	movsbl %al,%eax
c010c1cf:	83 e8 30             	sub    $0x30,%eax
c010c1d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c1d5:	eb 48                	jmp    c010c21f <strtol+0x11e>
        }
        else if (*s >= 'a' && *s <= 'z') {
c010c1d7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1da:	0f b6 00             	movzbl (%eax),%eax
c010c1dd:	3c 60                	cmp    $0x60,%al
c010c1df:	7e 1b                	jle    c010c1fc <strtol+0xfb>
c010c1e1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1e4:	0f b6 00             	movzbl (%eax),%eax
c010c1e7:	3c 7a                	cmp    $0x7a,%al
c010c1e9:	7f 11                	jg     c010c1fc <strtol+0xfb>
            dig = *s - 'a' + 10;
c010c1eb:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1ee:	0f b6 00             	movzbl (%eax),%eax
c010c1f1:	0f be c0             	movsbl %al,%eax
c010c1f4:	83 e8 57             	sub    $0x57,%eax
c010c1f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c1fa:	eb 23                	jmp    c010c21f <strtol+0x11e>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c010c1fc:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1ff:	0f b6 00             	movzbl (%eax),%eax
c010c202:	3c 40                	cmp    $0x40,%al
c010c204:	7e 3c                	jle    c010c242 <strtol+0x141>
c010c206:	8b 45 08             	mov    0x8(%ebp),%eax
c010c209:	0f b6 00             	movzbl (%eax),%eax
c010c20c:	3c 5a                	cmp    $0x5a,%al
c010c20e:	7f 32                	jg     c010c242 <strtol+0x141>
            dig = *s - 'A' + 10;
c010c210:	8b 45 08             	mov    0x8(%ebp),%eax
c010c213:	0f b6 00             	movzbl (%eax),%eax
c010c216:	0f be c0             	movsbl %al,%eax
c010c219:	83 e8 37             	sub    $0x37,%eax
c010c21c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c010c21f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c222:	3b 45 10             	cmp    0x10(%ebp),%eax
c010c225:	7d 1a                	jge    c010c241 <strtol+0x140>
            break;
        }
        s ++, val = (val * base) + dig;
c010c227:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c22b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c22e:	0f af 45 10          	imul   0x10(%ebp),%eax
c010c232:	89 c2                	mov    %eax,%edx
c010c234:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c237:	01 d0                	add    %edx,%eax
c010c239:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (1) {
c010c23c:	e9 71 ff ff ff       	jmp    c010c1b2 <strtol+0xb1>
            break;
c010c241:	90                   	nop
        // we don't properly detect overflow!
    }

    if (endptr) {
c010c242:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c246:	74 08                	je     c010c250 <strtol+0x14f>
        *endptr = (char *) s;
c010c248:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c24b:	8b 55 08             	mov    0x8(%ebp),%edx
c010c24e:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c010c250:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010c254:	74 07                	je     c010c25d <strtol+0x15c>
c010c256:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c259:	f7 d8                	neg    %eax
c010c25b:	eb 03                	jmp    c010c260 <strtol+0x15f>
c010c25d:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010c260:	c9                   	leave  
c010c261:	c3                   	ret    

c010c262 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c010c262:	f3 0f 1e fb          	endbr32 
c010c266:	55                   	push   %ebp
c010c267:	89 e5                	mov    %esp,%ebp
c010c269:	57                   	push   %edi
c010c26a:	83 ec 24             	sub    $0x24,%esp
c010c26d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c270:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c010c273:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c010c277:	8b 55 08             	mov    0x8(%ebp),%edx
c010c27a:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010c27d:	88 45 f7             	mov    %al,-0x9(%ebp)
c010c280:	8b 45 10             	mov    0x10(%ebp),%eax
c010c283:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c010c286:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010c289:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c010c28d:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010c290:	89 d7                	mov    %edx,%edi
c010c292:	f3 aa                	rep stos %al,%es:(%edi)
c010c294:	89 fa                	mov    %edi,%edx
c010c296:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010c299:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c010c29c:	8b 45 f8             	mov    -0x8(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c010c29f:	83 c4 24             	add    $0x24,%esp
c010c2a2:	5f                   	pop    %edi
c010c2a3:	5d                   	pop    %ebp
c010c2a4:	c3                   	ret    

c010c2a5 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c010c2a5:	f3 0f 1e fb          	endbr32 
c010c2a9:	55                   	push   %ebp
c010c2aa:	89 e5                	mov    %esp,%ebp
c010c2ac:	57                   	push   %edi
c010c2ad:	56                   	push   %esi
c010c2ae:	53                   	push   %ebx
c010c2af:	83 ec 30             	sub    $0x30,%esp
c010c2b2:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c2b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c2bb:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c2be:	8b 45 10             	mov    0x10(%ebp),%eax
c010c2c1:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c010c2c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c2c7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010c2ca:	73 42                	jae    c010c30e <memmove+0x69>
c010c2cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c2cf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010c2d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c2d5:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c2d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c2db:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010c2de:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c2e1:	c1 e8 02             	shr    $0x2,%eax
c010c2e4:	89 c1                	mov    %eax,%ecx
    asm volatile (
c010c2e6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c2e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c2ec:	89 d7                	mov    %edx,%edi
c010c2ee:	89 c6                	mov    %eax,%esi
c010c2f0:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c2f2:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010c2f5:	83 e1 03             	and    $0x3,%ecx
c010c2f8:	74 02                	je     c010c2fc <memmove+0x57>
c010c2fa:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010c2fc:	89 f0                	mov    %esi,%eax
c010c2fe:	89 fa                	mov    %edi,%edx
c010c300:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c010c303:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010c306:	89 45 d0             	mov    %eax,-0x30(%ebp)
        : "memory");
    return dst;
c010c309:	8b 45 e4             	mov    -0x1c(%ebp),%eax
        return __memcpy(dst, src, n);
c010c30c:	eb 36                	jmp    c010c344 <memmove+0x9f>
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c010c30e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c311:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c314:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c317:	01 c2                	add    %eax,%edx
c010c319:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c31c:	8d 48 ff             	lea    -0x1(%eax),%ecx
c010c31f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c322:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
    asm volatile (
c010c325:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c328:	89 c1                	mov    %eax,%ecx
c010c32a:	89 d8                	mov    %ebx,%eax
c010c32c:	89 d6                	mov    %edx,%esi
c010c32e:	89 c7                	mov    %eax,%edi
c010c330:	fd                   	std    
c010c331:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010c333:	fc                   	cld    
c010c334:	89 f8                	mov    %edi,%eax
c010c336:	89 f2                	mov    %esi,%edx
c010c338:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c010c33b:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010c33e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    return dst;
c010c341:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c010c344:	83 c4 30             	add    $0x30,%esp
c010c347:	5b                   	pop    %ebx
c010c348:	5e                   	pop    %esi
c010c349:	5f                   	pop    %edi
c010c34a:	5d                   	pop    %ebp
c010c34b:	c3                   	ret    

c010c34c <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c010c34c:	f3 0f 1e fb          	endbr32 
c010c350:	55                   	push   %ebp
c010c351:	89 e5                	mov    %esp,%ebp
c010c353:	57                   	push   %edi
c010c354:	56                   	push   %esi
c010c355:	83 ec 20             	sub    $0x20,%esp
c010c358:	8b 45 08             	mov    0x8(%ebp),%eax
c010c35b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c35e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c361:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c364:	8b 45 10             	mov    0x10(%ebp),%eax
c010c367:	89 45 ec             	mov    %eax,-0x14(%ebp)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010c36a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c36d:	c1 e8 02             	shr    $0x2,%eax
c010c370:	89 c1                	mov    %eax,%ecx
    asm volatile (
c010c372:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c375:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c378:	89 d7                	mov    %edx,%edi
c010c37a:	89 c6                	mov    %eax,%esi
c010c37c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c37e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010c381:	83 e1 03             	and    $0x3,%ecx
c010c384:	74 02                	je     c010c388 <memcpy+0x3c>
c010c386:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010c388:	89 f0                	mov    %esi,%eax
c010c38a:	89 fa                	mov    %edi,%edx
c010c38c:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010c38f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010c392:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return dst;
c010c395:	8b 45 f4             	mov    -0xc(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c010c398:	83 c4 20             	add    $0x20,%esp
c010c39b:	5e                   	pop    %esi
c010c39c:	5f                   	pop    %edi
c010c39d:	5d                   	pop    %ebp
c010c39e:	c3                   	ret    

c010c39f <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c010c39f:	f3 0f 1e fb          	endbr32 
c010c3a3:	55                   	push   %ebp
c010c3a4:	89 e5                	mov    %esp,%ebp
c010c3a6:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c010c3a9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3ac:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c010c3af:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c3b2:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c010c3b5:	eb 30                	jmp    c010c3e7 <memcmp+0x48>
        if (*s1 != *s2) {
c010c3b7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c3ba:	0f b6 10             	movzbl (%eax),%edx
c010c3bd:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c3c0:	0f b6 00             	movzbl (%eax),%eax
c010c3c3:	38 c2                	cmp    %al,%dl
c010c3c5:	74 18                	je     c010c3df <memcmp+0x40>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c010c3c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c3ca:	0f b6 00             	movzbl (%eax),%eax
c010c3cd:	0f b6 d0             	movzbl %al,%edx
c010c3d0:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c3d3:	0f b6 00             	movzbl (%eax),%eax
c010c3d6:	0f b6 c0             	movzbl %al,%eax
c010c3d9:	29 c2                	sub    %eax,%edx
c010c3db:	89 d0                	mov    %edx,%eax
c010c3dd:	eb 1a                	jmp    c010c3f9 <memcmp+0x5a>
        }
        s1 ++, s2 ++;
c010c3df:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010c3e3:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (n -- > 0) {
c010c3e7:	8b 45 10             	mov    0x10(%ebp),%eax
c010c3ea:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c3ed:	89 55 10             	mov    %edx,0x10(%ebp)
c010c3f0:	85 c0                	test   %eax,%eax
c010c3f2:	75 c3                	jne    c010c3b7 <memcmp+0x18>
    }
    return 0;
c010c3f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c3f9:	c9                   	leave  
c010c3fa:	c3                   	ret    

c010c3fb <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*), void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c010c3fb:	f3 0f 1e fb          	endbr32 
c010c3ff:	55                   	push   %ebp
c010c400:	89 e5                	mov    %esp,%ebp
c010c402:	83 ec 38             	sub    $0x38,%esp
c010c405:	8b 45 10             	mov    0x10(%ebp),%eax
c010c408:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010c40b:	8b 45 14             	mov    0x14(%ebp),%eax
c010c40e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c010c411:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c414:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010c417:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c41a:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c010c41d:	8b 45 18             	mov    0x18(%ebp),%eax
c010c420:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010c423:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c426:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c429:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c42c:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010c42f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c432:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c435:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c439:	74 1c                	je     c010c457 <printnum+0x5c>
c010c43b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c43e:	ba 00 00 00 00       	mov    $0x0,%edx
c010c443:	f7 75 e4             	divl   -0x1c(%ebp)
c010c446:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010c449:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c44c:	ba 00 00 00 00       	mov    $0x0,%edx
c010c451:	f7 75 e4             	divl   -0x1c(%ebp)
c010c454:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c457:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c45a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c45d:	f7 75 e4             	divl   -0x1c(%ebp)
c010c460:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c463:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010c466:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c469:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c46c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c46f:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010c472:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c475:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c010c478:	8b 45 18             	mov    0x18(%ebp),%eax
c010c47b:	ba 00 00 00 00       	mov    $0x0,%edx
c010c480:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010c483:	39 45 d0             	cmp    %eax,-0x30(%ebp)
c010c486:	19 d1                	sbb    %edx,%ecx
c010c488:	72 37                	jb     c010c4c1 <printnum+0xc6>
        printnum(putch, putdat, result, base, width - 1, padc);
c010c48a:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010c48d:	83 e8 01             	sub    $0x1,%eax
c010c490:	83 ec 04             	sub    $0x4,%esp
c010c493:	ff 75 20             	pushl  0x20(%ebp)
c010c496:	50                   	push   %eax
c010c497:	ff 75 18             	pushl  0x18(%ebp)
c010c49a:	ff 75 ec             	pushl  -0x14(%ebp)
c010c49d:	ff 75 e8             	pushl  -0x18(%ebp)
c010c4a0:	ff 75 0c             	pushl  0xc(%ebp)
c010c4a3:	ff 75 08             	pushl  0x8(%ebp)
c010c4a6:	e8 50 ff ff ff       	call   c010c3fb <printnum>
c010c4ab:	83 c4 20             	add    $0x20,%esp
c010c4ae:	eb 1b                	jmp    c010c4cb <printnum+0xd0>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat);
c010c4b0:	83 ec 08             	sub    $0x8,%esp
c010c4b3:	ff 75 0c             	pushl  0xc(%ebp)
c010c4b6:	ff 75 20             	pushl  0x20(%ebp)
c010c4b9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4bc:	ff d0                	call   *%eax
c010c4be:	83 c4 10             	add    $0x10,%esp
        while (-- width > 0)
c010c4c1:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
c010c4c5:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010c4c9:	7f e5                	jg     c010c4b0 <printnum+0xb5>
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat);
c010c4cb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c4ce:	05 84 f5 10 c0       	add    $0xc010f584,%eax
c010c4d3:	0f b6 00             	movzbl (%eax),%eax
c010c4d6:	0f be c0             	movsbl %al,%eax
c010c4d9:	83 ec 08             	sub    $0x8,%esp
c010c4dc:	ff 75 0c             	pushl  0xc(%ebp)
c010c4df:	50                   	push   %eax
c010c4e0:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4e3:	ff d0                	call   *%eax
c010c4e5:	83 c4 10             	add    $0x10,%esp
}
c010c4e8:	90                   	nop
c010c4e9:	c9                   	leave  
c010c4ea:	c3                   	ret    

c010c4eb <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c010c4eb:	f3 0f 1e fb          	endbr32 
c010c4ef:	55                   	push   %ebp
c010c4f0:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010c4f2:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010c4f6:	7e 14                	jle    c010c50c <getuint+0x21>
        return va_arg(*ap, unsigned long long);
c010c4f8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4fb:	8b 00                	mov    (%eax),%eax
c010c4fd:	8d 48 08             	lea    0x8(%eax),%ecx
c010c500:	8b 55 08             	mov    0x8(%ebp),%edx
c010c503:	89 0a                	mov    %ecx,(%edx)
c010c505:	8b 50 04             	mov    0x4(%eax),%edx
c010c508:	8b 00                	mov    (%eax),%eax
c010c50a:	eb 30                	jmp    c010c53c <getuint+0x51>
    }
    else if (lflag) {
c010c50c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c510:	74 16                	je     c010c528 <getuint+0x3d>
        return va_arg(*ap, unsigned long);
c010c512:	8b 45 08             	mov    0x8(%ebp),%eax
c010c515:	8b 00                	mov    (%eax),%eax
c010c517:	8d 48 04             	lea    0x4(%eax),%ecx
c010c51a:	8b 55 08             	mov    0x8(%ebp),%edx
c010c51d:	89 0a                	mov    %ecx,(%edx)
c010c51f:	8b 00                	mov    (%eax),%eax
c010c521:	ba 00 00 00 00       	mov    $0x0,%edx
c010c526:	eb 14                	jmp    c010c53c <getuint+0x51>
    }
    else {
        return va_arg(*ap, unsigned int);
c010c528:	8b 45 08             	mov    0x8(%ebp),%eax
c010c52b:	8b 00                	mov    (%eax),%eax
c010c52d:	8d 48 04             	lea    0x4(%eax),%ecx
c010c530:	8b 55 08             	mov    0x8(%ebp),%edx
c010c533:	89 0a                	mov    %ecx,(%edx)
c010c535:	8b 00                	mov    (%eax),%eax
c010c537:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c010c53c:	5d                   	pop    %ebp
c010c53d:	c3                   	ret    

c010c53e <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c010c53e:	f3 0f 1e fb          	endbr32 
c010c542:	55                   	push   %ebp
c010c543:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010c545:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010c549:	7e 14                	jle    c010c55f <getint+0x21>
        return va_arg(*ap, long long);
c010c54b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c54e:	8b 00                	mov    (%eax),%eax
c010c550:	8d 48 08             	lea    0x8(%eax),%ecx
c010c553:	8b 55 08             	mov    0x8(%ebp),%edx
c010c556:	89 0a                	mov    %ecx,(%edx)
c010c558:	8b 50 04             	mov    0x4(%eax),%edx
c010c55b:	8b 00                	mov    (%eax),%eax
c010c55d:	eb 28                	jmp    c010c587 <getint+0x49>
    }
    else if (lflag) {
c010c55f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c563:	74 12                	je     c010c577 <getint+0x39>
        return va_arg(*ap, long);
c010c565:	8b 45 08             	mov    0x8(%ebp),%eax
c010c568:	8b 00                	mov    (%eax),%eax
c010c56a:	8d 48 04             	lea    0x4(%eax),%ecx
c010c56d:	8b 55 08             	mov    0x8(%ebp),%edx
c010c570:	89 0a                	mov    %ecx,(%edx)
c010c572:	8b 00                	mov    (%eax),%eax
c010c574:	99                   	cltd   
c010c575:	eb 10                	jmp    c010c587 <getint+0x49>
    }
    else {
        return va_arg(*ap, int);
c010c577:	8b 45 08             	mov    0x8(%ebp),%eax
c010c57a:	8b 00                	mov    (%eax),%eax
c010c57c:	8d 48 04             	lea    0x4(%eax),%ecx
c010c57f:	8b 55 08             	mov    0x8(%ebp),%edx
c010c582:	89 0a                	mov    %ecx,(%edx)
c010c584:	8b 00                	mov    (%eax),%eax
c010c586:	99                   	cltd   
    }
}
c010c587:	5d                   	pop    %ebp
c010c588:	c3                   	ret    

c010c589 <printfmt>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
c010c589:	f3 0f 1e fb          	endbr32 
c010c58d:	55                   	push   %ebp
c010c58e:	89 e5                	mov    %esp,%ebp
c010c590:	83 ec 18             	sub    $0x18,%esp
    va_list ap;

    va_start(ap, fmt);
c010c593:	8d 45 14             	lea    0x14(%ebp),%eax
c010c596:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, putdat, fmt, ap);
c010c599:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c59c:	50                   	push   %eax
c010c59d:	ff 75 10             	pushl  0x10(%ebp)
c010c5a0:	ff 75 0c             	pushl  0xc(%ebp)
c010c5a3:	ff 75 08             	pushl  0x8(%ebp)
c010c5a6:	e8 06 00 00 00       	call   c010c5b1 <vprintfmt>
c010c5ab:	83 c4 10             	add    $0x10,%esp
    va_end(ap);
}
c010c5ae:	90                   	nop
c010c5af:	c9                   	leave  
c010c5b0:	c3                   	ret    

c010c5b1 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
c010c5b1:	f3 0f 1e fb          	endbr32 
c010c5b5:	55                   	push   %ebp
c010c5b6:	89 e5                	mov    %esp,%ebp
c010c5b8:	56                   	push   %esi
c010c5b9:	53                   	push   %ebx
c010c5ba:	83 ec 20             	sub    $0x20,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010c5bd:	eb 17                	jmp    c010c5d6 <vprintfmt+0x25>
            if (ch == '\0') {
c010c5bf:	85 db                	test   %ebx,%ebx
c010c5c1:	0f 84 8f 03 00 00    	je     c010c956 <vprintfmt+0x3a5>
                return;
            }
            putch(ch, putdat);
c010c5c7:	83 ec 08             	sub    $0x8,%esp
c010c5ca:	ff 75 0c             	pushl  0xc(%ebp)
c010c5cd:	53                   	push   %ebx
c010c5ce:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5d1:	ff d0                	call   *%eax
c010c5d3:	83 c4 10             	add    $0x10,%esp
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010c5d6:	8b 45 10             	mov    0x10(%ebp),%eax
c010c5d9:	8d 50 01             	lea    0x1(%eax),%edx
c010c5dc:	89 55 10             	mov    %edx,0x10(%ebp)
c010c5df:	0f b6 00             	movzbl (%eax),%eax
c010c5e2:	0f b6 d8             	movzbl %al,%ebx
c010c5e5:	83 fb 25             	cmp    $0x25,%ebx
c010c5e8:	75 d5                	jne    c010c5bf <vprintfmt+0xe>
        }

        // Process a %-escape sequence
        char padc = ' ';
c010c5ea:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c010c5ee:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c010c5f5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c5f8:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c010c5fb:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010c602:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c605:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c010c608:	8b 45 10             	mov    0x10(%ebp),%eax
c010c60b:	8d 50 01             	lea    0x1(%eax),%edx
c010c60e:	89 55 10             	mov    %edx,0x10(%ebp)
c010c611:	0f b6 00             	movzbl (%eax),%eax
c010c614:	0f b6 d8             	movzbl %al,%ebx
c010c617:	8d 43 dd             	lea    -0x23(%ebx),%eax
c010c61a:	83 f8 55             	cmp    $0x55,%eax
c010c61d:	0f 87 06 03 00 00    	ja     c010c929 <vprintfmt+0x378>
c010c623:	8b 04 85 a8 f5 10 c0 	mov    -0x3fef0a58(,%eax,4),%eax
c010c62a:	3e ff e0             	notrack jmp *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c010c62d:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c010c631:	eb d5                	jmp    c010c608 <vprintfmt+0x57>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c010c633:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c010c637:	eb cf                	jmp    c010c608 <vprintfmt+0x57>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010c639:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c010c640:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c643:	89 d0                	mov    %edx,%eax
c010c645:	c1 e0 02             	shl    $0x2,%eax
c010c648:	01 d0                	add    %edx,%eax
c010c64a:	01 c0                	add    %eax,%eax
c010c64c:	01 d8                	add    %ebx,%eax
c010c64e:	83 e8 30             	sub    $0x30,%eax
c010c651:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c010c654:	8b 45 10             	mov    0x10(%ebp),%eax
c010c657:	0f b6 00             	movzbl (%eax),%eax
c010c65a:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c010c65d:	83 fb 2f             	cmp    $0x2f,%ebx
c010c660:	7e 39                	jle    c010c69b <vprintfmt+0xea>
c010c662:	83 fb 39             	cmp    $0x39,%ebx
c010c665:	7f 34                	jg     c010c69b <vprintfmt+0xea>
            for (precision = 0; ; ++ fmt) {
c010c667:	83 45 10 01          	addl   $0x1,0x10(%ebp)
                precision = precision * 10 + ch - '0';
c010c66b:	eb d3                	jmp    c010c640 <vprintfmt+0x8f>
                }
            }
            goto process_precision;

        case '*':
            precision = va_arg(ap, int);
c010c66d:	8b 45 14             	mov    0x14(%ebp),%eax
c010c670:	8d 50 04             	lea    0x4(%eax),%edx
c010c673:	89 55 14             	mov    %edx,0x14(%ebp)
c010c676:	8b 00                	mov    (%eax),%eax
c010c678:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c010c67b:	eb 1f                	jmp    c010c69c <vprintfmt+0xeb>

        case '.':
            if (width < 0)
c010c67d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c681:	79 85                	jns    c010c608 <vprintfmt+0x57>
                width = 0;
c010c683:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c010c68a:	e9 79 ff ff ff       	jmp    c010c608 <vprintfmt+0x57>

        case '#':
            altflag = 1;
c010c68f:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c010c696:	e9 6d ff ff ff       	jmp    c010c608 <vprintfmt+0x57>
            goto process_precision;
c010c69b:	90                   	nop

        process_precision:
            if (width < 0)
c010c69c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c6a0:	0f 89 62 ff ff ff    	jns    c010c608 <vprintfmt+0x57>
                width = precision, precision = -1;
c010c6a6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c6a9:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c6ac:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c010c6b3:	e9 50 ff ff ff       	jmp    c010c608 <vprintfmt+0x57>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c010c6b8:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c010c6bc:	e9 47 ff ff ff       	jmp    c010c608 <vprintfmt+0x57>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat);
c010c6c1:	8b 45 14             	mov    0x14(%ebp),%eax
c010c6c4:	8d 50 04             	lea    0x4(%eax),%edx
c010c6c7:	89 55 14             	mov    %edx,0x14(%ebp)
c010c6ca:	8b 00                	mov    (%eax),%eax
c010c6cc:	83 ec 08             	sub    $0x8,%esp
c010c6cf:	ff 75 0c             	pushl  0xc(%ebp)
c010c6d2:	50                   	push   %eax
c010c6d3:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6d6:	ff d0                	call   *%eax
c010c6d8:	83 c4 10             	add    $0x10,%esp
            break;
c010c6db:	e9 71 02 00 00       	jmp    c010c951 <vprintfmt+0x3a0>

        // error message
        case 'e':
            err = va_arg(ap, int);
c010c6e0:	8b 45 14             	mov    0x14(%ebp),%eax
c010c6e3:	8d 50 04             	lea    0x4(%eax),%edx
c010c6e6:	89 55 14             	mov    %edx,0x14(%ebp)
c010c6e9:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c010c6eb:	85 db                	test   %ebx,%ebx
c010c6ed:	79 02                	jns    c010c6f1 <vprintfmt+0x140>
                err = -err;
c010c6ef:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c010c6f1:	83 fb 18             	cmp    $0x18,%ebx
c010c6f4:	7f 0b                	jg     c010c701 <vprintfmt+0x150>
c010c6f6:	8b 34 9d 20 f5 10 c0 	mov    -0x3fef0ae0(,%ebx,4),%esi
c010c6fd:	85 f6                	test   %esi,%esi
c010c6ff:	75 19                	jne    c010c71a <vprintfmt+0x169>
                printfmt(putch, putdat, "error %d", err);
c010c701:	53                   	push   %ebx
c010c702:	68 95 f5 10 c0       	push   $0xc010f595
c010c707:	ff 75 0c             	pushl  0xc(%ebp)
c010c70a:	ff 75 08             	pushl  0x8(%ebp)
c010c70d:	e8 77 fe ff ff       	call   c010c589 <printfmt>
c010c712:	83 c4 10             	add    $0x10,%esp
            }
            else {
                printfmt(putch, putdat, "%s", p);
            }
            break;
c010c715:	e9 37 02 00 00       	jmp    c010c951 <vprintfmt+0x3a0>
                printfmt(putch, putdat, "%s", p);
c010c71a:	56                   	push   %esi
c010c71b:	68 9e f5 10 c0       	push   $0xc010f59e
c010c720:	ff 75 0c             	pushl  0xc(%ebp)
c010c723:	ff 75 08             	pushl  0x8(%ebp)
c010c726:	e8 5e fe ff ff       	call   c010c589 <printfmt>
c010c72b:	83 c4 10             	add    $0x10,%esp
            break;
c010c72e:	e9 1e 02 00 00       	jmp    c010c951 <vprintfmt+0x3a0>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c010c733:	8b 45 14             	mov    0x14(%ebp),%eax
c010c736:	8d 50 04             	lea    0x4(%eax),%edx
c010c739:	89 55 14             	mov    %edx,0x14(%ebp)
c010c73c:	8b 30                	mov    (%eax),%esi
c010c73e:	85 f6                	test   %esi,%esi
c010c740:	75 05                	jne    c010c747 <vprintfmt+0x196>
                p = "(null)";
c010c742:	be a1 f5 10 c0       	mov    $0xc010f5a1,%esi
            }
            if (width > 0 && padc != '-') {
c010c747:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c74b:	7e 76                	jle    c010c7c3 <vprintfmt+0x212>
c010c74d:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c010c751:	74 70                	je     c010c7c3 <vprintfmt+0x212>
                for (width -= strnlen(p, precision); width > 0; width --) {
c010c753:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c756:	83 ec 08             	sub    $0x8,%esp
c010c759:	50                   	push   %eax
c010c75a:	56                   	push   %esi
c010c75b:	e8 db f7 ff ff       	call   c010bf3b <strnlen>
c010c760:	83 c4 10             	add    $0x10,%esp
c010c763:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c766:	29 c2                	sub    %eax,%edx
c010c768:	89 d0                	mov    %edx,%eax
c010c76a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c76d:	eb 17                	jmp    c010c786 <vprintfmt+0x1d5>
                    putch(padc, putdat);
c010c76f:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c010c773:	83 ec 08             	sub    $0x8,%esp
c010c776:	ff 75 0c             	pushl  0xc(%ebp)
c010c779:	50                   	push   %eax
c010c77a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c77d:	ff d0                	call   *%eax
c010c77f:	83 c4 10             	add    $0x10,%esp
                for (width -= strnlen(p, precision); width > 0; width --) {
c010c782:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010c786:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c78a:	7f e3                	jg     c010c76f <vprintfmt+0x1be>
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010c78c:	eb 35                	jmp    c010c7c3 <vprintfmt+0x212>
                if (altflag && (ch < ' ' || ch > '~')) {
c010c78e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010c792:	74 1c                	je     c010c7b0 <vprintfmt+0x1ff>
c010c794:	83 fb 1f             	cmp    $0x1f,%ebx
c010c797:	7e 05                	jle    c010c79e <vprintfmt+0x1ed>
c010c799:	83 fb 7e             	cmp    $0x7e,%ebx
c010c79c:	7e 12                	jle    c010c7b0 <vprintfmt+0x1ff>
                    putch('?', putdat);
c010c79e:	83 ec 08             	sub    $0x8,%esp
c010c7a1:	ff 75 0c             	pushl  0xc(%ebp)
c010c7a4:	6a 3f                	push   $0x3f
c010c7a6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7a9:	ff d0                	call   *%eax
c010c7ab:	83 c4 10             	add    $0x10,%esp
c010c7ae:	eb 0f                	jmp    c010c7bf <vprintfmt+0x20e>
                }
                else {
                    putch(ch, putdat);
c010c7b0:	83 ec 08             	sub    $0x8,%esp
c010c7b3:	ff 75 0c             	pushl  0xc(%ebp)
c010c7b6:	53                   	push   %ebx
c010c7b7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7ba:	ff d0                	call   *%eax
c010c7bc:	83 c4 10             	add    $0x10,%esp
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010c7bf:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010c7c3:	89 f0                	mov    %esi,%eax
c010c7c5:	8d 70 01             	lea    0x1(%eax),%esi
c010c7c8:	0f b6 00             	movzbl (%eax),%eax
c010c7cb:	0f be d8             	movsbl %al,%ebx
c010c7ce:	85 db                	test   %ebx,%ebx
c010c7d0:	74 26                	je     c010c7f8 <vprintfmt+0x247>
c010c7d2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010c7d6:	78 b6                	js     c010c78e <vprintfmt+0x1dd>
c010c7d8:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c010c7dc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010c7e0:	79 ac                	jns    c010c78e <vprintfmt+0x1dd>
                }
            }
            for (; width > 0; width --) {
c010c7e2:	eb 14                	jmp    c010c7f8 <vprintfmt+0x247>
                putch(' ', putdat);
c010c7e4:	83 ec 08             	sub    $0x8,%esp
c010c7e7:	ff 75 0c             	pushl  0xc(%ebp)
c010c7ea:	6a 20                	push   $0x20
c010c7ec:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7ef:	ff d0                	call   *%eax
c010c7f1:	83 c4 10             	add    $0x10,%esp
            for (; width > 0; width --) {
c010c7f4:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010c7f8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c7fc:	7f e6                	jg     c010c7e4 <vprintfmt+0x233>
            }
            break;
c010c7fe:	e9 4e 01 00 00       	jmp    c010c951 <vprintfmt+0x3a0>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c010c803:	83 ec 08             	sub    $0x8,%esp
c010c806:	ff 75 e0             	pushl  -0x20(%ebp)
c010c809:	8d 45 14             	lea    0x14(%ebp),%eax
c010c80c:	50                   	push   %eax
c010c80d:	e8 2c fd ff ff       	call   c010c53e <getint>
c010c812:	83 c4 10             	add    $0x10,%esp
c010c815:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c818:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c010c81b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c81e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c821:	85 d2                	test   %edx,%edx
c010c823:	79 23                	jns    c010c848 <vprintfmt+0x297>
                putch('-', putdat);
c010c825:	83 ec 08             	sub    $0x8,%esp
c010c828:	ff 75 0c             	pushl  0xc(%ebp)
c010c82b:	6a 2d                	push   $0x2d
c010c82d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c830:	ff d0                	call   *%eax
c010c832:	83 c4 10             	add    $0x10,%esp
                num = -(long long)num;
c010c835:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c838:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c83b:	f7 d8                	neg    %eax
c010c83d:	83 d2 00             	adc    $0x0,%edx
c010c840:	f7 da                	neg    %edx
c010c842:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c845:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c010c848:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010c84f:	e9 9f 00 00 00       	jmp    c010c8f3 <vprintfmt+0x342>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c010c854:	83 ec 08             	sub    $0x8,%esp
c010c857:	ff 75 e0             	pushl  -0x20(%ebp)
c010c85a:	8d 45 14             	lea    0x14(%ebp),%eax
c010c85d:	50                   	push   %eax
c010c85e:	e8 88 fc ff ff       	call   c010c4eb <getuint>
c010c863:	83 c4 10             	add    $0x10,%esp
c010c866:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c869:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c010c86c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010c873:	eb 7e                	jmp    c010c8f3 <vprintfmt+0x342>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c010c875:	83 ec 08             	sub    $0x8,%esp
c010c878:	ff 75 e0             	pushl  -0x20(%ebp)
c010c87b:	8d 45 14             	lea    0x14(%ebp),%eax
c010c87e:	50                   	push   %eax
c010c87f:	e8 67 fc ff ff       	call   c010c4eb <getuint>
c010c884:	83 c4 10             	add    $0x10,%esp
c010c887:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c88a:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c010c88d:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c010c894:	eb 5d                	jmp    c010c8f3 <vprintfmt+0x342>

        // pointer
        case 'p':
            putch('0', putdat);
c010c896:	83 ec 08             	sub    $0x8,%esp
c010c899:	ff 75 0c             	pushl  0xc(%ebp)
c010c89c:	6a 30                	push   $0x30
c010c89e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8a1:	ff d0                	call   *%eax
c010c8a3:	83 c4 10             	add    $0x10,%esp
            putch('x', putdat);
c010c8a6:	83 ec 08             	sub    $0x8,%esp
c010c8a9:	ff 75 0c             	pushl  0xc(%ebp)
c010c8ac:	6a 78                	push   $0x78
c010c8ae:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8b1:	ff d0                	call   *%eax
c010c8b3:	83 c4 10             	add    $0x10,%esp
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c010c8b6:	8b 45 14             	mov    0x14(%ebp),%eax
c010c8b9:	8d 50 04             	lea    0x4(%eax),%edx
c010c8bc:	89 55 14             	mov    %edx,0x14(%ebp)
c010c8bf:	8b 00                	mov    (%eax),%eax
c010c8c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c8c4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c010c8cb:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c010c8d2:	eb 1f                	jmp    c010c8f3 <vprintfmt+0x342>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c010c8d4:	83 ec 08             	sub    $0x8,%esp
c010c8d7:	ff 75 e0             	pushl  -0x20(%ebp)
c010c8da:	8d 45 14             	lea    0x14(%ebp),%eax
c010c8dd:	50                   	push   %eax
c010c8de:	e8 08 fc ff ff       	call   c010c4eb <getuint>
c010c8e3:	83 c4 10             	add    $0x10,%esp
c010c8e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c8e9:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c010c8ec:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, putdat, num, base, width, padc);
c010c8f3:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c010c8f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c8fa:	83 ec 04             	sub    $0x4,%esp
c010c8fd:	52                   	push   %edx
c010c8fe:	ff 75 e8             	pushl  -0x18(%ebp)
c010c901:	50                   	push   %eax
c010c902:	ff 75 f4             	pushl  -0xc(%ebp)
c010c905:	ff 75 f0             	pushl  -0x10(%ebp)
c010c908:	ff 75 0c             	pushl  0xc(%ebp)
c010c90b:	ff 75 08             	pushl  0x8(%ebp)
c010c90e:	e8 e8 fa ff ff       	call   c010c3fb <printnum>
c010c913:	83 c4 20             	add    $0x20,%esp
            break;
c010c916:	eb 39                	jmp    c010c951 <vprintfmt+0x3a0>

        // escaped '%' character
        case '%':
            putch(ch, putdat);
c010c918:	83 ec 08             	sub    $0x8,%esp
c010c91b:	ff 75 0c             	pushl  0xc(%ebp)
c010c91e:	53                   	push   %ebx
c010c91f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c922:	ff d0                	call   *%eax
c010c924:	83 c4 10             	add    $0x10,%esp
            break;
c010c927:	eb 28                	jmp    c010c951 <vprintfmt+0x3a0>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat);
c010c929:	83 ec 08             	sub    $0x8,%esp
c010c92c:	ff 75 0c             	pushl  0xc(%ebp)
c010c92f:	6a 25                	push   $0x25
c010c931:	8b 45 08             	mov    0x8(%ebp),%eax
c010c934:	ff d0                	call   *%eax
c010c936:	83 c4 10             	add    $0x10,%esp
            for (fmt --; fmt[-1] != '%'; fmt --)
c010c939:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010c93d:	eb 04                	jmp    c010c943 <vprintfmt+0x392>
c010c93f:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010c943:	8b 45 10             	mov    0x10(%ebp),%eax
c010c946:	83 e8 01             	sub    $0x1,%eax
c010c949:	0f b6 00             	movzbl (%eax),%eax
c010c94c:	3c 25                	cmp    $0x25,%al
c010c94e:	75 ef                	jne    c010c93f <vprintfmt+0x38e>
                /* do nothing */;
            break;
c010c950:	90                   	nop
    while (1) {
c010c951:	e9 67 fc ff ff       	jmp    c010c5bd <vprintfmt+0xc>
                return;
c010c956:	90                   	nop
        }
    }
}
c010c957:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010c95a:	5b                   	pop    %ebx
c010c95b:	5e                   	pop    %esi
c010c95c:	5d                   	pop    %ebp
c010c95d:	c3                   	ret    

c010c95e <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c010c95e:	f3 0f 1e fb          	endbr32 
c010c962:	55                   	push   %ebp
c010c963:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c010c965:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c968:	8b 40 08             	mov    0x8(%eax),%eax
c010c96b:	8d 50 01             	lea    0x1(%eax),%edx
c010c96e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c971:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c010c974:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c977:	8b 10                	mov    (%eax),%edx
c010c979:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c97c:	8b 40 04             	mov    0x4(%eax),%eax
c010c97f:	39 c2                	cmp    %eax,%edx
c010c981:	73 12                	jae    c010c995 <sprintputch+0x37>
        *b->buf ++ = ch;
c010c983:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c986:	8b 00                	mov    (%eax),%eax
c010c988:	8d 48 01             	lea    0x1(%eax),%ecx
c010c98b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c98e:	89 0a                	mov    %ecx,(%edx)
c010c990:	8b 55 08             	mov    0x8(%ebp),%edx
c010c993:	88 10                	mov    %dl,(%eax)
    }
}
c010c995:	90                   	nop
c010c996:	5d                   	pop    %ebp
c010c997:	c3                   	ret    

c010c998 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c010c998:	f3 0f 1e fb          	endbr32 
c010c99c:	55                   	push   %ebp
c010c99d:	89 e5                	mov    %esp,%ebp
c010c99f:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010c9a2:	8d 45 14             	lea    0x14(%ebp),%eax
c010c9a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c010c9a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c9ab:	50                   	push   %eax
c010c9ac:	ff 75 10             	pushl  0x10(%ebp)
c010c9af:	ff 75 0c             	pushl  0xc(%ebp)
c010c9b2:	ff 75 08             	pushl  0x8(%ebp)
c010c9b5:	e8 0b 00 00 00       	call   c010c9c5 <vsnprintf>
c010c9ba:	83 c4 10             	add    $0x10,%esp
c010c9bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c010c9c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010c9c3:	c9                   	leave  
c010c9c4:	c3                   	ret    

c010c9c5 <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c010c9c5:	f3 0f 1e fb          	endbr32 
c010c9c9:	55                   	push   %ebp
c010c9ca:	89 e5                	mov    %esp,%ebp
c010c9cc:	83 ec 18             	sub    $0x18,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c010c9cf:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9d2:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c9d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c9d8:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c9db:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9de:	01 d0                	add    %edx,%eax
c010c9e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c9e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c010c9ea:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c9ee:	74 0a                	je     c010c9fa <vsnprintf+0x35>
c010c9f0:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c9f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c9f6:	39 c2                	cmp    %eax,%edx
c010c9f8:	76 07                	jbe    c010ca01 <vsnprintf+0x3c>
        return -E_INVAL;
c010c9fa:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010c9ff:	eb 20                	jmp    c010ca21 <vsnprintf+0x5c>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, &b, fmt, ap);
c010ca01:	ff 75 14             	pushl  0x14(%ebp)
c010ca04:	ff 75 10             	pushl  0x10(%ebp)
c010ca07:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010ca0a:	50                   	push   %eax
c010ca0b:	68 5e c9 10 c0       	push   $0xc010c95e
c010ca10:	e8 9c fb ff ff       	call   c010c5b1 <vprintfmt>
c010ca15:	83 c4 10             	add    $0x10,%esp
    // null terminate the buffer
    *b.buf = '\0';
c010ca18:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ca1b:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c010ca1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ca21:	c9                   	leave  
c010ca22:	c3                   	ret    

c010ca23 <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c010ca23:	f3 0f 1e fb          	endbr32 
c010ca27:	55                   	push   %ebp
c010ca28:	89 e5                	mov    %esp,%ebp
c010ca2a:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c010ca2d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca30:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c010ca36:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c010ca39:	b8 20 00 00 00       	mov    $0x20,%eax
c010ca3e:	2b 45 0c             	sub    0xc(%ebp),%eax
c010ca41:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010ca44:	89 c1                	mov    %eax,%ecx
c010ca46:	d3 ea                	shr    %cl,%edx
c010ca48:	89 d0                	mov    %edx,%eax
}
c010ca4a:	c9                   	leave  
c010ca4b:	c3                   	ret    

c010ca4c <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c010ca4c:	f3 0f 1e fb          	endbr32 
c010ca50:	55                   	push   %ebp
c010ca51:	89 e5                	mov    %esp,%ebp
c010ca53:	57                   	push   %edi
c010ca54:	56                   	push   %esi
c010ca55:	53                   	push   %ebx
c010ca56:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c010ca59:	a1 20 2b 13 c0       	mov    0xc0132b20,%eax
c010ca5e:	8b 15 24 2b 13 c0    	mov    0xc0132b24,%edx
c010ca64:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c010ca6a:	6b f0 05             	imul   $0x5,%eax,%esi
c010ca6d:	01 fe                	add    %edi,%esi
c010ca6f:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
c010ca74:	f7 e7                	mul    %edi
c010ca76:	01 d6                	add    %edx,%esi
c010ca78:	89 f2                	mov    %esi,%edx
c010ca7a:	83 c0 0b             	add    $0xb,%eax
c010ca7d:	83 d2 00             	adc    $0x0,%edx
c010ca80:	89 c7                	mov    %eax,%edi
c010ca82:	83 e7 ff             	and    $0xffffffff,%edi
c010ca85:	89 f9                	mov    %edi,%ecx
c010ca87:	0f b7 da             	movzwl %dx,%ebx
c010ca8a:	89 0d 20 2b 13 c0    	mov    %ecx,0xc0132b20
c010ca90:	89 1d 24 2b 13 c0    	mov    %ebx,0xc0132b24
    unsigned long long result = (next >> 12);
c010ca96:	a1 20 2b 13 c0       	mov    0xc0132b20,%eax
c010ca9b:	8b 15 24 2b 13 c0    	mov    0xc0132b24,%edx
c010caa1:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010caa5:	c1 ea 0c             	shr    $0xc,%edx
c010caa8:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010caab:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c010caae:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c010cab5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cab8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010cabb:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010cabe:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010cac1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cac4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010cac7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010cacb:	74 1c                	je     c010cae9 <rand+0x9d>
c010cacd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cad0:	ba 00 00 00 00       	mov    $0x0,%edx
c010cad5:	f7 75 dc             	divl   -0x24(%ebp)
c010cad8:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010cadb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cade:	ba 00 00 00 00       	mov    $0x0,%edx
c010cae3:	f7 75 dc             	divl   -0x24(%ebp)
c010cae6:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cae9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010caec:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010caef:	f7 75 dc             	divl   -0x24(%ebp)
c010caf2:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010caf5:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010caf8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cafb:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010cafe:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010cb01:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010cb04:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c010cb07:	83 c4 24             	add    $0x24,%esp
c010cb0a:	5b                   	pop    %ebx
c010cb0b:	5e                   	pop    %esi
c010cb0c:	5f                   	pop    %edi
c010cb0d:	5d                   	pop    %ebp
c010cb0e:	c3                   	ret    

c010cb0f <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c010cb0f:	f3 0f 1e fb          	endbr32 
c010cb13:	55                   	push   %ebp
c010cb14:	89 e5                	mov    %esp,%ebp
    next = seed;
c010cb16:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb19:	ba 00 00 00 00       	mov    $0x0,%edx
c010cb1e:	a3 20 2b 13 c0       	mov    %eax,0xc0132b20
c010cb23:	89 15 24 2b 13 c0    	mov    %edx,0xc0132b24
}
c010cb29:	90                   	nop
c010cb2a:	5d                   	pop    %ebp
c010cb2b:	c3                   	ret    
